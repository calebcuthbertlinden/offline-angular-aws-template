{"ast":null,"code":"import _asyncToGenerator from \"/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n * Helper functions for accessing the RxStorage instances.\n */\n\nimport { overwritable } from './overwritable';\nimport { newRxError } from './rx-error';\nimport { fillPrimaryKey, getPrimaryFieldOfPrimaryKey } from './rx-schema-helper';\nimport { createRevision, defaultHashSha256, ensureNotFalsy, firstPropertyValueOfObject, flatClone, getDefaultRevision, getDefaultRxDocumentMeta, now, randomCouchString } from './plugins/utils';\nexport var INTERNAL_STORAGE_NAME = '_rxdb_internal';\nexport var RX_DATABASE_LOCAL_DOCS_STORAGE_NAME = 'rxdatabase_storage_local';\nexport function getSingleDocument(_x, _x2) {\n  return _getSingleDocument.apply(this, arguments);\n}\n\n/**\n * Writes a single document,\n * throws RxStorageBulkWriteError on failure\n */\nfunction _getSingleDocument() {\n  _getSingleDocument = _asyncToGenerator(function* (storageInstance, documentId) {\n    var results = yield storageInstance.findDocumentsById([documentId], false);\n    var doc = results[documentId];\n    if (doc) {\n      return doc;\n    } else {\n      return null;\n    }\n  });\n  return _getSingleDocument.apply(this, arguments);\n}\nexport function writeSingle(_x3, _x4, _x5) {\n  return _writeSingle.apply(this, arguments);\n}\n\n/**\n * Checkpoints must be stackable over another.\n * This is required form some RxStorage implementations\n * like the sharding plugin, where a checkpoint only represents\n * the document state from some, but not all shards.\n */\nfunction _writeSingle() {\n  _writeSingle = _asyncToGenerator(function* (instance, writeRow, context) {\n    var writeResult = yield instance.bulkWrite([writeRow], context);\n    if (Object.keys(writeResult.error).length > 0) {\n      var error = firstPropertyValueOfObject(writeResult.error);\n      throw error;\n    } else {\n      var ret = firstPropertyValueOfObject(writeResult.success);\n      return ret;\n    }\n  });\n  return _writeSingle.apply(this, arguments);\n}\nexport function stackCheckpoints(checkpoints) {\n  return Object.assign({}, ...checkpoints);\n}\nexport function storageChangeEventToRxChangeEvent(isLocal, rxStorageChangeEvent, rxCollection) {\n  var documentData = rxStorageChangeEvent.documentData;\n  var previousDocumentData = rxStorageChangeEvent.previousDocumentData;\n  var ret = {\n    eventId: rxStorageChangeEvent.eventId,\n    documentId: rxStorageChangeEvent.documentId,\n    collectionName: rxCollection ? rxCollection.name : undefined,\n    startTime: rxStorageChangeEvent.startTime,\n    endTime: rxStorageChangeEvent.endTime,\n    isLocal,\n    operation: rxStorageChangeEvent.operation,\n    documentData: overwritable.deepFreezeWhenDevMode(documentData),\n    previousDocumentData: overwritable.deepFreezeWhenDevMode(previousDocumentData)\n  };\n  return ret;\n}\nexport function throwIfIsStorageWriteError(collection, documentId, writeData, error) {\n  if (error) {\n    if (error.status === 409) {\n      throw newRxError('CONFLICT', {\n        collection: collection.name,\n        id: documentId,\n        writeError: error,\n        data: writeData\n      });\n    } else if (error.status === 422) {\n      throw newRxError('VD2', {\n        collection: collection.name,\n        id: documentId,\n        writeError: error,\n        data: writeData\n      });\n    } else {\n      throw error;\n    }\n  }\n}\n\n/**\n * Analyzes a list of BulkWriteRows and determines\n * which documents must be inserted, updated or deleted\n * and which events must be emitted and which documents cause a conflict\n * and must not be written.\n * Used as helper inside of some RxStorage implementations.\n * @hotPath The performance of this function is critical\n */\nexport function categorizeBulkWriteRows(storageInstance, primaryPath,\n/**\n * Current state of the documents\n * inside of the storage. Used to determine\n * which writes cause conflicts.\n * This can be a Map for better performance\n * but it can also be an object because some storages\n * need to work with something that is JSON-stringify-able\n * and we do not want to transform a big object into a Map\n * each time we use it.\n */\ndocsInDb,\n/**\n * The write rows that are passed to\n * RxStorageInstance().bulkWrite().\n */\nbulkWriteRows, context) {\n  var hasAttachments = !!storageInstance.schema.attachments;\n  var bulkInsertDocs = [];\n  var bulkUpdateDocs = [];\n  var errors = {};\n  var changedDocumentIds = [];\n  var eventBulkId = randomCouchString(10);\n  var eventBulk = {\n    id: eventBulkId,\n    events: [],\n    checkpoint: null,\n    context\n  };\n  var attachmentsAdd = [];\n  var attachmentsRemove = [];\n  var attachmentsUpdate = [];\n  var startTime = now();\n  var docsByIdIsMap = typeof docsInDb.get === 'function';\n  var hasDocsInDb = docsByIdIsMap ? docsInDb.size > 0 : Object.keys(docsInDb).length > 0;\n  var newestRow;\n  var rowAmount = bulkWriteRows.length;\n  var _loop = function () {\n    var writeRow = bulkWriteRows[rowId];\n    var docId = writeRow.document[primaryPath];\n    var documentInDb = false;\n    if (hasDocsInDb) {\n      documentInDb = docsByIdIsMap ? docsInDb.get(docId) : docsInDb[docId];\n    }\n    var attachmentError;\n    if (!documentInDb) {\n      /**\n       * It is possible to insert already deleted documents,\n       * this can happen on replication.\n       */\n      var insertedIsDeleted = writeRow.document._deleted ? true : false;\n      if (hasAttachments) {\n        Object.entries(writeRow.document._attachments).forEach(([attachmentId, attachmentData]) => {\n          if (!attachmentData.data) {\n            attachmentError = {\n              documentId: docId,\n              isError: true,\n              status: 510,\n              writeRow,\n              attachmentId\n            };\n            errors[docId] = attachmentError;\n          } else {\n            attachmentsAdd.push({\n              documentId: docId,\n              attachmentId,\n              attachmentData: attachmentData,\n              digest: defaultHashSha256(attachmentData.data)\n            });\n          }\n        });\n      }\n      if (!attachmentError) {\n        if (hasAttachments) {\n          bulkInsertDocs.push(stripAttachmentsDataFromRow(writeRow));\n        } else {\n          bulkInsertDocs.push(writeRow);\n        }\n        if (!newestRow || newestRow.document._meta.lwt < writeRow.document._meta.lwt) {\n          newestRow = writeRow;\n        }\n      }\n      if (!insertedIsDeleted) {\n        changedDocumentIds.push(docId);\n        eventBulk.events.push({\n          eventId: getUniqueDeterministicEventKey(eventBulkId, rowId, docId, writeRow),\n          documentId: docId,\n          operation: 'INSERT',\n          documentData: hasAttachments ? stripAttachmentsDataFromDocument(writeRow.document) : writeRow.document,\n          previousDocumentData: hasAttachments && writeRow.previous ? stripAttachmentsDataFromDocument(writeRow.previous) : writeRow.previous,\n          startTime,\n          endTime: now()\n        });\n      }\n    } else {\n      // update existing document\n      var revInDb = documentInDb._rev;\n\n      /**\n       * Check for conflict\n       */\n      if (!writeRow.previous || !!writeRow.previous && revInDb !== writeRow.previous._rev) {\n        // is conflict error\n        var err = {\n          isError: true,\n          status: 409,\n          documentId: docId,\n          writeRow: writeRow,\n          documentInDb\n        };\n        errors[docId] = err;\n        return \"continue\";\n      }\n\n      // handle attachments data\n\n      var updatedRow = hasAttachments ? stripAttachmentsDataFromRow(writeRow) : writeRow;\n      if (hasAttachments) {\n        if (writeRow.document._deleted) {\n          /**\n           * Deleted documents must have cleared all their attachments.\n           */\n          if (writeRow.previous) {\n            Object.keys(writeRow.previous._attachments).forEach(attachmentId => {\n              attachmentsRemove.push({\n                documentId: docId,\n                attachmentId,\n                digest: ensureNotFalsy(writeRow.previous)._attachments[attachmentId].digest\n              });\n            });\n          }\n        } else {\n          // first check for errors\n          Object.entries(writeRow.document._attachments).find(([attachmentId, attachmentData]) => {\n            var previousAttachmentData = writeRow.previous ? writeRow.previous._attachments[attachmentId] : undefined;\n            if (!previousAttachmentData && !attachmentData.data) {\n              attachmentError = {\n                documentId: docId,\n                documentInDb: documentInDb,\n                isError: true,\n                status: 510,\n                writeRow,\n                attachmentId\n              };\n            }\n            return true;\n          });\n          if (!attachmentError) {\n            Object.entries(writeRow.document._attachments).forEach(([attachmentId, attachmentData]) => {\n              var previousAttachmentData = writeRow.previous ? writeRow.previous._attachments[attachmentId] : undefined;\n              if (!previousAttachmentData) {\n                attachmentsAdd.push({\n                  documentId: docId,\n                  attachmentId,\n                  attachmentData: attachmentData,\n                  digest: defaultHashSha256(attachmentData.data)\n                });\n              } else {\n                var newDigest = updatedRow.document._attachments[attachmentId].digest;\n                if (attachmentData.data &&\n                /**\n                 * Performance shortcut,\n                 * do not update the attachment data if it did not change.\n                 */\n                previousAttachmentData.digest !== newDigest) {\n                  attachmentsUpdate.push({\n                    documentId: docId,\n                    attachmentId,\n                    attachmentData: attachmentData,\n                    digest: defaultHashSha256(attachmentData.data)\n                  });\n                }\n              }\n            });\n          }\n        }\n      }\n      if (attachmentError) {\n        errors[docId] = attachmentError;\n      } else {\n        bulkUpdateDocs.push(updatedRow);\n        if (!newestRow || newestRow.document._meta.lwt < updatedRow.document._meta.lwt) {\n          newestRow = updatedRow;\n        }\n      }\n      var writeDoc = writeRow.document;\n      var eventDocumentData = null;\n      var previousEventDocumentData = null;\n      var operation = null;\n      if (writeRow.previous && writeRow.previous._deleted && !writeDoc._deleted) {\n        operation = 'INSERT';\n        eventDocumentData = hasAttachments ? stripAttachmentsDataFromDocument(writeDoc) : writeDoc;\n      } else if (writeRow.previous && !writeRow.previous._deleted && !writeDoc._deleted) {\n        operation = 'UPDATE';\n        eventDocumentData = hasAttachments ? stripAttachmentsDataFromDocument(writeDoc) : writeDoc;\n        previousEventDocumentData = writeRow.previous;\n      } else if (writeDoc._deleted) {\n        operation = 'DELETE';\n        eventDocumentData = ensureNotFalsy(writeRow.document);\n        previousEventDocumentData = writeRow.previous;\n      } else {\n        throw newRxError('SNH', {\n          args: {\n            writeRow\n          }\n        });\n      }\n      changedDocumentIds.push(docId);\n      eventBulk.events.push({\n        eventId: getUniqueDeterministicEventKey(eventBulkId, rowId, docId, writeRow),\n        documentId: docId,\n        documentData: eventDocumentData,\n        previousDocumentData: previousEventDocumentData,\n        operation: operation,\n        startTime,\n        endTime: now()\n      });\n    }\n  };\n  for (var rowId = 0; rowId < rowAmount; rowId++) {\n    var _ret = _loop();\n    if (_ret === \"continue\") continue;\n  }\n  return {\n    bulkInsertDocs,\n    bulkUpdateDocs,\n    newestRow,\n    errors,\n    changedDocumentIds,\n    eventBulk,\n    attachmentsAdd,\n    attachmentsRemove,\n    attachmentsUpdate\n  };\n}\nexport function stripAttachmentsDataFromRow(writeRow) {\n  return {\n    previous: writeRow.previous,\n    document: stripAttachmentsDataFromDocument(writeRow.document)\n  };\n}\nexport function getAttachmentSize(attachmentBase64String) {\n  return atob(attachmentBase64String).length;\n}\n\n/**\n * Used in custom RxStorage implementations.\n */\nexport function attachmentWriteDataToNormalData(writeData) {\n  var data = writeData.data;\n  if (!data) {\n    return writeData;\n  }\n  var ret = {\n    digest: defaultHashSha256(data),\n    length: getAttachmentSize(data),\n    type: writeData.type\n  };\n  return ret;\n}\nexport function stripAttachmentsDataFromDocument(doc) {\n  var useDoc = flatClone(doc);\n  useDoc._attachments = {};\n  Object.entries(doc._attachments).forEach(([attachmentId, attachmentData]) => {\n    useDoc._attachments[attachmentId] = attachmentWriteDataToNormalData(attachmentData);\n  });\n  return useDoc;\n}\n\n/**\n * Flat clone the document data\n * and also the _meta field.\n * Used many times when we want to change the meta\n * during replication etc.\n */\nexport function flatCloneDocWithMeta(doc) {\n  var ret = flatClone(doc);\n  ret._meta = flatClone(doc._meta);\n  return ret;\n}\n\n/**\n * Each event is labeled with the id\n * to make it easy to filter out duplicates\n * even on flattened eventBulks\n */\nexport function getUniqueDeterministicEventKey(eventBulkId, rowId, docId, writeRow) {\n  return eventBulkId + '|' + rowId + '|' + docId + '|' + writeRow.document._rev;\n}\n/**\n * Wraps the normal storageInstance of a RxCollection\n * to ensure that all access is properly using the hooks\n * and other data transformations and also ensure that database.lockedRun()\n * is used properly.\n */\nexport function getWrappedStorageInstance(database, storageInstance,\n/**\n * The original RxJsonSchema\n * before it was mutated by hooks.\n */\nrxJsonSchema) {\n  overwritable.deepFreezeWhenDevMode(rxJsonSchema);\n  var primaryPath = getPrimaryFieldOfPrimaryKey(rxJsonSchema.primaryKey);\n  function transformDocumentDataFromRxDBToRxStorage(writeRow) {\n    var data = flatClone(writeRow.document);\n    data._meta = flatClone(data._meta);\n\n    /**\n     * Do some checks in dev-mode\n     * that would be too performance expensive\n     * in production.\n     */\n    if (overwritable.isDevMode()) {\n      // ensure that the primary key has not been changed\n      data = fillPrimaryKey(primaryPath, rxJsonSchema, data);\n\n      /**\n       * Ensure that the new revision is higher\n       * then the previous one\n       */\n      if (writeRow.previous) {\n        // TODO run this in the dev-mode plugin\n        // const prev = parseRevision(writeRow.previous._rev);\n        // const current = parseRevision(writeRow.document._rev);\n        // if (current.height <= prev.height) {\n        //     throw newRxError('SNH', {\n        //         dataBefore: writeRow.previous,\n        //         dataAfter: writeRow.document,\n        //         args: {\n        //             prev,\n        //             current\n        //         }\n        //     });\n        // }\n      }\n\n      /**\n       * Ensure that _meta fields have been merged\n       * and not replaced.\n       * This is important so that when one plugin A\n       * sets a _meta field and another plugin B does a write\n       * to the document, it must be ensured that the\n       * field of plugin A was not removed.\n       */\n      if (writeRow.previous) {\n        Object.keys(writeRow.previous._meta).forEach(metaFieldName => {\n          if (!writeRow.document._meta.hasOwnProperty(metaFieldName)) {\n            throw newRxError('SNH', {\n              dataBefore: writeRow.previous,\n              dataAfter: writeRow.document\n            });\n          }\n        });\n      }\n    }\n    data._meta.lwt = now();\n\n    /**\n     * Yes we really want to set the revision here.\n     * If you make a plugin that relies on having its own revision\n     * stored into the storage, use this.originalStorageInstance.bulkWrite() instead.\n     */\n    data._rev = createRevision(database.token, writeRow.previous);\n    return {\n      document: data,\n      previous: writeRow.previous\n    };\n  }\n  var ret = {\n    originalStorageInstance: storageInstance,\n    schema: storageInstance.schema,\n    internals: storageInstance.internals,\n    collectionName: storageInstance.collectionName,\n    databaseName: storageInstance.databaseName,\n    options: storageInstance.options,\n    bulkWrite(rows, context) {\n      var toStorageWriteRows = rows.map(row => transformDocumentDataFromRxDBToRxStorage(row));\n      return database.lockedRun(() => storageInstance.bulkWrite(toStorageWriteRows, context))\n      /**\n       * The RxStorageInstance MUST NOT allow to insert already _deleted documents,\n       * without sending the previous document version.\n       * But for better developer experience, RxDB does allow to re-insert deleted documents.\n       * We do this by automatically fixing the conflict errors for that case\n       * by running another bulkWrite() and merging the results.\n       * @link https://github.com/pubkey/rxdb/pull/3839\n       */.then(writeResult => {\n        var reInsertErrors = Object.values(writeResult.error).filter(error => {\n          if (error.status === 409 && !error.writeRow.previous && !error.writeRow.document._deleted && ensureNotFalsy(error.documentInDb)._deleted) {\n            return true;\n          }\n          return false;\n        });\n        if (reInsertErrors.length > 0) {\n          var useWriteResult = {\n            error: flatClone(writeResult.error),\n            success: flatClone(writeResult.success)\n          };\n          var reInserts = reInsertErrors.map(error => {\n            delete useWriteResult.error[error.documentId];\n            return {\n              previous: error.documentInDb,\n              document: Object.assign({}, error.writeRow.document, {\n                _rev: createRevision(database.token, error.documentInDb)\n              })\n            };\n          });\n          return database.lockedRun(() => storageInstance.bulkWrite(reInserts, context)).then(subResult => {\n            useWriteResult.error = Object.assign(useWriteResult.error, subResult.error);\n            useWriteResult.success = Object.assign(useWriteResult.success, subResult.success);\n            return useWriteResult;\n          });\n        }\n        return writeResult;\n      });\n    },\n    query(preparedQuery) {\n      return database.lockedRun(() => storageInstance.query(preparedQuery));\n    },\n    count(preparedQuery) {\n      return database.lockedRun(() => storageInstance.count(preparedQuery));\n    },\n    findDocumentsById(ids, deleted) {\n      return database.lockedRun(() => storageInstance.findDocumentsById(ids, deleted));\n    },\n    getAttachmentData(documentId, attachmentId, digest) {\n      return database.lockedRun(() => storageInstance.getAttachmentData(documentId, attachmentId, digest));\n    },\n    getChangedDocumentsSince(limit, checkpoint) {\n      return database.lockedRun(() => storageInstance.getChangedDocumentsSince(ensureNotFalsy(limit), checkpoint));\n    },\n    cleanup(minDeletedTime) {\n      return database.lockedRun(() => storageInstance.cleanup(minDeletedTime));\n    },\n    remove() {\n      database.storageInstances.delete(ret);\n      return database.lockedRun(() => storageInstance.remove());\n    },\n    close() {\n      database.storageInstances.delete(ret);\n      return database.lockedRun(() => storageInstance.close());\n    },\n    changeStream() {\n      return storageInstance.changeStream();\n    },\n    conflictResultionTasks() {\n      return storageInstance.conflictResultionTasks();\n    },\n    resolveConflictResultionTask(taskSolution) {\n      if (taskSolution.output.isEqual) {\n        return storageInstance.resolveConflictResultionTask(taskSolution);\n      }\n      var doc = Object.assign({}, taskSolution.output.documentData, {\n        _meta: getDefaultRxDocumentMeta(),\n        _rev: getDefaultRevision(),\n        _attachments: {}\n      });\n      var documentData = flatClone(doc);\n      delete documentData._meta;\n      delete documentData._rev;\n      delete documentData._attachments;\n      return storageInstance.resolveConflictResultionTask({\n        id: taskSolution.id,\n        output: {\n          isEqual: false,\n          documentData\n        }\n      });\n    }\n  };\n  database.storageInstances.add(ret);\n  return ret;\n}\n\n/**\n * Each RxStorage implementation should\n * run this method at the first step of createStorageInstance()\n * to ensure that the configuration is correct.\n */\nexport function ensureRxStorageInstanceParamsAreCorrect(params) {\n  if (params.schema.keyCompression) {\n    throw newRxError('UT5', {\n      args: {\n        params\n      }\n    });\n  }\n  if (hasEncryption(params.schema)) {\n    throw newRxError('UT6', {\n      args: {\n        params\n      }\n    });\n  }\n  if (params.schema.attachments && params.schema.attachments.compression) {\n    throw newRxError('UT7', {\n      args: {\n        params\n      }\n    });\n  }\n}\nexport function hasEncryption(jsonSchema) {\n  if (!!jsonSchema.encrypted && jsonSchema.encrypted.length > 0 || jsonSchema.attachments && jsonSchema.attachments.encrypted) {\n    return true;\n  } else {\n    return false;\n  }\n}","map":{"version":3,"names":["overwritable","newRxError","fillPrimaryKey","getPrimaryFieldOfPrimaryKey","createRevision","defaultHashSha256","ensureNotFalsy","firstPropertyValueOfObject","flatClone","getDefaultRevision","getDefaultRxDocumentMeta","now","randomCouchString","INTERNAL_STORAGE_NAME","RX_DATABASE_LOCAL_DOCS_STORAGE_NAME","getSingleDocument","_x","_x2","_getSingleDocument","apply","arguments","_asyncToGenerator","storageInstance","documentId","results","findDocumentsById","doc","writeSingle","_x3","_x4","_x5","_writeSingle","instance","writeRow","context","writeResult","bulkWrite","Object","keys","error","length","ret","success","stackCheckpoints","checkpoints","assign","storageChangeEventToRxChangeEvent","isLocal","rxStorageChangeEvent","rxCollection","documentData","previousDocumentData","eventId","collectionName","name","undefined","startTime","endTime","operation","deepFreezeWhenDevMode","throwIfIsStorageWriteError","collection","writeData","status","id","writeError","data","categorizeBulkWriteRows","primaryPath","docsInDb","bulkWriteRows","hasAttachments","schema","attachments","bulkInsertDocs","bulkUpdateDocs","errors","changedDocumentIds","eventBulkId","eventBulk","events","checkpoint","attachmentsAdd","attachmentsRemove","attachmentsUpdate","docsByIdIsMap","get","hasDocsInDb","size","newestRow","rowAmount","_loop","rowId","docId","document","documentInDb","attachmentError","insertedIsDeleted","_deleted","entries","_attachments","forEach","attachmentId","attachmentData","isError","push","digest","stripAttachmentsDataFromRow","_meta","lwt","getUniqueDeterministicEventKey","stripAttachmentsDataFromDocument","previous","revInDb","_rev","err","updatedRow","find","previousAttachmentData","newDigest","writeDoc","eventDocumentData","previousEventDocumentData","args","_ret","getAttachmentSize","attachmentBase64String","atob","attachmentWriteDataToNormalData","type","useDoc","flatCloneDocWithMeta","getWrappedStorageInstance","database","rxJsonSchema","primaryKey","transformDocumentDataFromRxDBToRxStorage","isDevMode","metaFieldName","hasOwnProperty","dataBefore","dataAfter","token","originalStorageInstance","internals","databaseName","options","rows","toStorageWriteRows","map","row","lockedRun","then","reInsertErrors","values","filter","useWriteResult","reInserts","subResult","query","preparedQuery","count","ids","deleted","getAttachmentData","getChangedDocumentsSince","limit","cleanup","minDeletedTime","remove","storageInstances","delete","close","changeStream","conflictResultionTasks","resolveConflictResultionTask","taskSolution","output","isEqual","add","ensureRxStorageInstanceParamsAreCorrect","params","keyCompression","hasEncryption","compression","jsonSchema","encrypted"],"sources":["/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/node_modules/rxdb/dist/es/rx-storage-helper.js"],"sourcesContent":["/**\n * Helper functions for accessing the RxStorage instances.\n */\n\nimport { overwritable } from './overwritable';\nimport { newRxError } from './rx-error';\nimport { fillPrimaryKey, getPrimaryFieldOfPrimaryKey } from './rx-schema-helper';\nimport { createRevision, defaultHashSha256, ensureNotFalsy, firstPropertyValueOfObject, flatClone, getDefaultRevision, getDefaultRxDocumentMeta, now, randomCouchString } from './plugins/utils';\nexport var INTERNAL_STORAGE_NAME = '_rxdb_internal';\nexport var RX_DATABASE_LOCAL_DOCS_STORAGE_NAME = 'rxdatabase_storage_local';\nexport async function getSingleDocument(storageInstance, documentId) {\n  var results = await storageInstance.findDocumentsById([documentId], false);\n  var doc = results[documentId];\n  if (doc) {\n    return doc;\n  } else {\n    return null;\n  }\n}\n\n/**\n * Writes a single document,\n * throws RxStorageBulkWriteError on failure\n */\nexport async function writeSingle(instance, writeRow, context) {\n  var writeResult = await instance.bulkWrite([writeRow], context);\n  if (Object.keys(writeResult.error).length > 0) {\n    var error = firstPropertyValueOfObject(writeResult.error);\n    throw error;\n  } else {\n    var ret = firstPropertyValueOfObject(writeResult.success);\n    return ret;\n  }\n}\n\n/**\n * Checkpoints must be stackable over another.\n * This is required form some RxStorage implementations\n * like the sharding plugin, where a checkpoint only represents\n * the document state from some, but not all shards.\n */\nexport function stackCheckpoints(checkpoints) {\n  return Object.assign({}, ...checkpoints);\n}\nexport function storageChangeEventToRxChangeEvent(isLocal, rxStorageChangeEvent, rxCollection) {\n  var documentData = rxStorageChangeEvent.documentData;\n  var previousDocumentData = rxStorageChangeEvent.previousDocumentData;\n  var ret = {\n    eventId: rxStorageChangeEvent.eventId,\n    documentId: rxStorageChangeEvent.documentId,\n    collectionName: rxCollection ? rxCollection.name : undefined,\n    startTime: rxStorageChangeEvent.startTime,\n    endTime: rxStorageChangeEvent.endTime,\n    isLocal,\n    operation: rxStorageChangeEvent.operation,\n    documentData: overwritable.deepFreezeWhenDevMode(documentData),\n    previousDocumentData: overwritable.deepFreezeWhenDevMode(previousDocumentData)\n  };\n  return ret;\n}\nexport function throwIfIsStorageWriteError(collection, documentId, writeData, error) {\n  if (error) {\n    if (error.status === 409) {\n      throw newRxError('CONFLICT', {\n        collection: collection.name,\n        id: documentId,\n        writeError: error,\n        data: writeData\n      });\n    } else if (error.status === 422) {\n      throw newRxError('VD2', {\n        collection: collection.name,\n        id: documentId,\n        writeError: error,\n        data: writeData\n      });\n    } else {\n      throw error;\n    }\n  }\n}\n\n/**\n * Analyzes a list of BulkWriteRows and determines\n * which documents must be inserted, updated or deleted\n * and which events must be emitted and which documents cause a conflict\n * and must not be written.\n * Used as helper inside of some RxStorage implementations.\n * @hotPath The performance of this function is critical\n */\nexport function categorizeBulkWriteRows(storageInstance, primaryPath,\n/**\n * Current state of the documents\n * inside of the storage. Used to determine\n * which writes cause conflicts.\n * This can be a Map for better performance\n * but it can also be an object because some storages\n * need to work with something that is JSON-stringify-able\n * and we do not want to transform a big object into a Map\n * each time we use it.\n */\ndocsInDb,\n/**\n * The write rows that are passed to\n * RxStorageInstance().bulkWrite().\n */\nbulkWriteRows, context) {\n  var hasAttachments = !!storageInstance.schema.attachments;\n  var bulkInsertDocs = [];\n  var bulkUpdateDocs = [];\n  var errors = {};\n  var changedDocumentIds = [];\n  var eventBulkId = randomCouchString(10);\n  var eventBulk = {\n    id: eventBulkId,\n    events: [],\n    checkpoint: null,\n    context\n  };\n  var attachmentsAdd = [];\n  var attachmentsRemove = [];\n  var attachmentsUpdate = [];\n  var startTime = now();\n  var docsByIdIsMap = typeof docsInDb.get === 'function';\n  var hasDocsInDb = docsByIdIsMap ? docsInDb.size > 0 : Object.keys(docsInDb).length > 0;\n  var newestRow;\n  var rowAmount = bulkWriteRows.length;\n  var _loop = function () {\n    var writeRow = bulkWriteRows[rowId];\n    var docId = writeRow.document[primaryPath];\n    var documentInDb = false;\n    if (hasDocsInDb) {\n      documentInDb = docsByIdIsMap ? docsInDb.get(docId) : docsInDb[docId];\n    }\n    var attachmentError;\n    if (!documentInDb) {\n      /**\n       * It is possible to insert already deleted documents,\n       * this can happen on replication.\n       */\n      var insertedIsDeleted = writeRow.document._deleted ? true : false;\n      if (hasAttachments) {\n        Object.entries(writeRow.document._attachments).forEach(([attachmentId, attachmentData]) => {\n          if (!attachmentData.data) {\n            attachmentError = {\n              documentId: docId,\n              isError: true,\n              status: 510,\n              writeRow,\n              attachmentId\n            };\n            errors[docId] = attachmentError;\n          } else {\n            attachmentsAdd.push({\n              documentId: docId,\n              attachmentId,\n              attachmentData: attachmentData,\n              digest: defaultHashSha256(attachmentData.data)\n            });\n          }\n        });\n      }\n      if (!attachmentError) {\n        if (hasAttachments) {\n          bulkInsertDocs.push(stripAttachmentsDataFromRow(writeRow));\n        } else {\n          bulkInsertDocs.push(writeRow);\n        }\n        if (!newestRow || newestRow.document._meta.lwt < writeRow.document._meta.lwt) {\n          newestRow = writeRow;\n        }\n      }\n      if (!insertedIsDeleted) {\n        changedDocumentIds.push(docId);\n        eventBulk.events.push({\n          eventId: getUniqueDeterministicEventKey(eventBulkId, rowId, docId, writeRow),\n          documentId: docId,\n          operation: 'INSERT',\n          documentData: hasAttachments ? stripAttachmentsDataFromDocument(writeRow.document) : writeRow.document,\n          previousDocumentData: hasAttachments && writeRow.previous ? stripAttachmentsDataFromDocument(writeRow.previous) : writeRow.previous,\n          startTime,\n          endTime: now()\n        });\n      }\n    } else {\n      // update existing document\n      var revInDb = documentInDb._rev;\n\n      /**\n       * Check for conflict\n       */\n      if (!writeRow.previous || !!writeRow.previous && revInDb !== writeRow.previous._rev) {\n        // is conflict error\n        var err = {\n          isError: true,\n          status: 409,\n          documentId: docId,\n          writeRow: writeRow,\n          documentInDb\n        };\n        errors[docId] = err;\n        return \"continue\";\n      }\n\n      // handle attachments data\n\n      var updatedRow = hasAttachments ? stripAttachmentsDataFromRow(writeRow) : writeRow;\n      if (hasAttachments) {\n        if (writeRow.document._deleted) {\n          /**\n           * Deleted documents must have cleared all their attachments.\n           */\n          if (writeRow.previous) {\n            Object.keys(writeRow.previous._attachments).forEach(attachmentId => {\n              attachmentsRemove.push({\n                documentId: docId,\n                attachmentId,\n                digest: ensureNotFalsy(writeRow.previous)._attachments[attachmentId].digest\n              });\n            });\n          }\n        } else {\n          // first check for errors\n          Object.entries(writeRow.document._attachments).find(([attachmentId, attachmentData]) => {\n            var previousAttachmentData = writeRow.previous ? writeRow.previous._attachments[attachmentId] : undefined;\n            if (!previousAttachmentData && !attachmentData.data) {\n              attachmentError = {\n                documentId: docId,\n                documentInDb: documentInDb,\n                isError: true,\n                status: 510,\n                writeRow,\n                attachmentId\n              };\n            }\n            return true;\n          });\n          if (!attachmentError) {\n            Object.entries(writeRow.document._attachments).forEach(([attachmentId, attachmentData]) => {\n              var previousAttachmentData = writeRow.previous ? writeRow.previous._attachments[attachmentId] : undefined;\n              if (!previousAttachmentData) {\n                attachmentsAdd.push({\n                  documentId: docId,\n                  attachmentId,\n                  attachmentData: attachmentData,\n                  digest: defaultHashSha256(attachmentData.data)\n                });\n              } else {\n                var newDigest = updatedRow.document._attachments[attachmentId].digest;\n                if (attachmentData.data &&\n                /**\n                 * Performance shortcut,\n                 * do not update the attachment data if it did not change.\n                 */\n                previousAttachmentData.digest !== newDigest) {\n                  attachmentsUpdate.push({\n                    documentId: docId,\n                    attachmentId,\n                    attachmentData: attachmentData,\n                    digest: defaultHashSha256(attachmentData.data)\n                  });\n                }\n              }\n            });\n          }\n        }\n      }\n      if (attachmentError) {\n        errors[docId] = attachmentError;\n      } else {\n        bulkUpdateDocs.push(updatedRow);\n        if (!newestRow || newestRow.document._meta.lwt < updatedRow.document._meta.lwt) {\n          newestRow = updatedRow;\n        }\n      }\n      var writeDoc = writeRow.document;\n      var eventDocumentData = null;\n      var previousEventDocumentData = null;\n      var operation = null;\n      if (writeRow.previous && writeRow.previous._deleted && !writeDoc._deleted) {\n        operation = 'INSERT';\n        eventDocumentData = hasAttachments ? stripAttachmentsDataFromDocument(writeDoc) : writeDoc;\n      } else if (writeRow.previous && !writeRow.previous._deleted && !writeDoc._deleted) {\n        operation = 'UPDATE';\n        eventDocumentData = hasAttachments ? stripAttachmentsDataFromDocument(writeDoc) : writeDoc;\n        previousEventDocumentData = writeRow.previous;\n      } else if (writeDoc._deleted) {\n        operation = 'DELETE';\n        eventDocumentData = ensureNotFalsy(writeRow.document);\n        previousEventDocumentData = writeRow.previous;\n      } else {\n        throw newRxError('SNH', {\n          args: {\n            writeRow\n          }\n        });\n      }\n      changedDocumentIds.push(docId);\n      eventBulk.events.push({\n        eventId: getUniqueDeterministicEventKey(eventBulkId, rowId, docId, writeRow),\n        documentId: docId,\n        documentData: eventDocumentData,\n        previousDocumentData: previousEventDocumentData,\n        operation: operation,\n        startTime,\n        endTime: now()\n      });\n    }\n  };\n  for (var rowId = 0; rowId < rowAmount; rowId++) {\n    var _ret = _loop();\n    if (_ret === \"continue\") continue;\n  }\n  return {\n    bulkInsertDocs,\n    bulkUpdateDocs,\n    newestRow,\n    errors,\n    changedDocumentIds,\n    eventBulk,\n    attachmentsAdd,\n    attachmentsRemove,\n    attachmentsUpdate\n  };\n}\nexport function stripAttachmentsDataFromRow(writeRow) {\n  return {\n    previous: writeRow.previous,\n    document: stripAttachmentsDataFromDocument(writeRow.document)\n  };\n}\nexport function getAttachmentSize(attachmentBase64String) {\n  return atob(attachmentBase64String).length;\n}\n\n/**\n * Used in custom RxStorage implementations.\n */\nexport function attachmentWriteDataToNormalData(writeData) {\n  var data = writeData.data;\n  if (!data) {\n    return writeData;\n  }\n  var ret = {\n    digest: defaultHashSha256(data),\n    length: getAttachmentSize(data),\n    type: writeData.type\n  };\n  return ret;\n}\nexport function stripAttachmentsDataFromDocument(doc) {\n  var useDoc = flatClone(doc);\n  useDoc._attachments = {};\n  Object.entries(doc._attachments).forEach(([attachmentId, attachmentData]) => {\n    useDoc._attachments[attachmentId] = attachmentWriteDataToNormalData(attachmentData);\n  });\n  return useDoc;\n}\n\n/**\n * Flat clone the document data\n * and also the _meta field.\n * Used many times when we want to change the meta\n * during replication etc.\n */\nexport function flatCloneDocWithMeta(doc) {\n  var ret = flatClone(doc);\n  ret._meta = flatClone(doc._meta);\n  return ret;\n}\n\n/**\n * Each event is labeled with the id\n * to make it easy to filter out duplicates\n * even on flattened eventBulks\n */\nexport function getUniqueDeterministicEventKey(eventBulkId, rowId, docId, writeRow) {\n  return eventBulkId + '|' + rowId + '|' + docId + '|' + writeRow.document._rev;\n}\n/**\n * Wraps the normal storageInstance of a RxCollection\n * to ensure that all access is properly using the hooks\n * and other data transformations and also ensure that database.lockedRun()\n * is used properly.\n */\nexport function getWrappedStorageInstance(database, storageInstance,\n/**\n * The original RxJsonSchema\n * before it was mutated by hooks.\n */\nrxJsonSchema) {\n  overwritable.deepFreezeWhenDevMode(rxJsonSchema);\n  var primaryPath = getPrimaryFieldOfPrimaryKey(rxJsonSchema.primaryKey);\n  function transformDocumentDataFromRxDBToRxStorage(writeRow) {\n    var data = flatClone(writeRow.document);\n    data._meta = flatClone(data._meta);\n\n    /**\n     * Do some checks in dev-mode\n     * that would be too performance expensive\n     * in production.\n     */\n    if (overwritable.isDevMode()) {\n      // ensure that the primary key has not been changed\n      data = fillPrimaryKey(primaryPath, rxJsonSchema, data);\n\n      /**\n       * Ensure that the new revision is higher\n       * then the previous one\n       */\n      if (writeRow.previous) {\n        // TODO run this in the dev-mode plugin\n        // const prev = parseRevision(writeRow.previous._rev);\n        // const current = parseRevision(writeRow.document._rev);\n        // if (current.height <= prev.height) {\n        //     throw newRxError('SNH', {\n        //         dataBefore: writeRow.previous,\n        //         dataAfter: writeRow.document,\n        //         args: {\n        //             prev,\n        //             current\n        //         }\n        //     });\n        // }\n      }\n\n      /**\n       * Ensure that _meta fields have been merged\n       * and not replaced.\n       * This is important so that when one plugin A\n       * sets a _meta field and another plugin B does a write\n       * to the document, it must be ensured that the\n       * field of plugin A was not removed.\n       */\n      if (writeRow.previous) {\n        Object.keys(writeRow.previous._meta).forEach(metaFieldName => {\n          if (!writeRow.document._meta.hasOwnProperty(metaFieldName)) {\n            throw newRxError('SNH', {\n              dataBefore: writeRow.previous,\n              dataAfter: writeRow.document\n            });\n          }\n        });\n      }\n    }\n    data._meta.lwt = now();\n\n    /**\n     * Yes we really want to set the revision here.\n     * If you make a plugin that relies on having its own revision\n     * stored into the storage, use this.originalStorageInstance.bulkWrite() instead.\n     */\n    data._rev = createRevision(database.token, writeRow.previous);\n    return {\n      document: data,\n      previous: writeRow.previous\n    };\n  }\n  var ret = {\n    originalStorageInstance: storageInstance,\n    schema: storageInstance.schema,\n    internals: storageInstance.internals,\n    collectionName: storageInstance.collectionName,\n    databaseName: storageInstance.databaseName,\n    options: storageInstance.options,\n    bulkWrite(rows, context) {\n      var toStorageWriteRows = rows.map(row => transformDocumentDataFromRxDBToRxStorage(row));\n      return database.lockedRun(() => storageInstance.bulkWrite(toStorageWriteRows, context))\n      /**\n       * The RxStorageInstance MUST NOT allow to insert already _deleted documents,\n       * without sending the previous document version.\n       * But for better developer experience, RxDB does allow to re-insert deleted documents.\n       * We do this by automatically fixing the conflict errors for that case\n       * by running another bulkWrite() and merging the results.\n       * @link https://github.com/pubkey/rxdb/pull/3839\n       */.then(writeResult => {\n        var reInsertErrors = Object.values(writeResult.error).filter(error => {\n          if (error.status === 409 && !error.writeRow.previous && !error.writeRow.document._deleted && ensureNotFalsy(error.documentInDb)._deleted) {\n            return true;\n          }\n          return false;\n        });\n        if (reInsertErrors.length > 0) {\n          var useWriteResult = {\n            error: flatClone(writeResult.error),\n            success: flatClone(writeResult.success)\n          };\n          var reInserts = reInsertErrors.map(error => {\n            delete useWriteResult.error[error.documentId];\n            return {\n              previous: error.documentInDb,\n              document: Object.assign({}, error.writeRow.document, {\n                _rev: createRevision(database.token, error.documentInDb)\n              })\n            };\n          });\n          return database.lockedRun(() => storageInstance.bulkWrite(reInserts, context)).then(subResult => {\n            useWriteResult.error = Object.assign(useWriteResult.error, subResult.error);\n            useWriteResult.success = Object.assign(useWriteResult.success, subResult.success);\n            return useWriteResult;\n          });\n        }\n        return writeResult;\n      });\n    },\n    query(preparedQuery) {\n      return database.lockedRun(() => storageInstance.query(preparedQuery));\n    },\n    count(preparedQuery) {\n      return database.lockedRun(() => storageInstance.count(preparedQuery));\n    },\n    findDocumentsById(ids, deleted) {\n      return database.lockedRun(() => storageInstance.findDocumentsById(ids, deleted));\n    },\n    getAttachmentData(documentId, attachmentId, digest) {\n      return database.lockedRun(() => storageInstance.getAttachmentData(documentId, attachmentId, digest));\n    },\n    getChangedDocumentsSince(limit, checkpoint) {\n      return database.lockedRun(() => storageInstance.getChangedDocumentsSince(ensureNotFalsy(limit), checkpoint));\n    },\n    cleanup(minDeletedTime) {\n      return database.lockedRun(() => storageInstance.cleanup(minDeletedTime));\n    },\n    remove() {\n      database.storageInstances.delete(ret);\n      return database.lockedRun(() => storageInstance.remove());\n    },\n    close() {\n      database.storageInstances.delete(ret);\n      return database.lockedRun(() => storageInstance.close());\n    },\n    changeStream() {\n      return storageInstance.changeStream();\n    },\n    conflictResultionTasks() {\n      return storageInstance.conflictResultionTasks();\n    },\n    resolveConflictResultionTask(taskSolution) {\n      if (taskSolution.output.isEqual) {\n        return storageInstance.resolveConflictResultionTask(taskSolution);\n      }\n      var doc = Object.assign({}, taskSolution.output.documentData, {\n        _meta: getDefaultRxDocumentMeta(),\n        _rev: getDefaultRevision(),\n        _attachments: {}\n      });\n      var documentData = flatClone(doc);\n      delete documentData._meta;\n      delete documentData._rev;\n      delete documentData._attachments;\n      return storageInstance.resolveConflictResultionTask({\n        id: taskSolution.id,\n        output: {\n          isEqual: false,\n          documentData\n        }\n      });\n    }\n  };\n  database.storageInstances.add(ret);\n  return ret;\n}\n\n/**\n * Each RxStorage implementation should\n * run this method at the first step of createStorageInstance()\n * to ensure that the configuration is correct.\n */\nexport function ensureRxStorageInstanceParamsAreCorrect(params) {\n  if (params.schema.keyCompression) {\n    throw newRxError('UT5', {\n      args: {\n        params\n      }\n    });\n  }\n  if (hasEncryption(params.schema)) {\n    throw newRxError('UT6', {\n      args: {\n        params\n      }\n    });\n  }\n  if (params.schema.attachments && params.schema.attachments.compression) {\n    throw newRxError('UT7', {\n      args: {\n        params\n      }\n    });\n  }\n}\nexport function hasEncryption(jsonSchema) {\n  if (!!jsonSchema.encrypted && jsonSchema.encrypted.length > 0 || jsonSchema.attachments && jsonSchema.attachments.encrypted) {\n    return true;\n  } else {\n    return false;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}