{"ast":null,"code":"import { getStateSet } from './states';\nimport { actionFunctions, orderedActionList } from './actions';\nimport { resolveInput } from './bdd/bdd.generated';\nexport * from './states';\nexport * from './util';\nexport function calculateActionFromMap(stateSetToActionMap, input) {\n  const stateSet = getStateSet(input);\n  const actionName = stateSetToActionMap.get(stateSet);\n  if (!actionName) {\n    return {\n      action: 'runFullQueryAgain',\n      stateSet\n    };\n  } else {\n    return {\n      action: actionName,\n      stateSet\n    };\n  }\n}\nexport function calculateActionName(input) {\n  const resolvedActionId = resolveInput(input);\n  return orderedActionList[resolvedActionId];\n}\nexport function calculateActionFunction(input) {\n  const actionName = calculateActionName(input);\n  return actionFunctions[actionName];\n}\n/**\n * for performance reasons,\n * @mutates the input\n * @returns the new results\n */\nexport function runAction(action, queryParams, changeEvent, previousResults, keyDocumentMap) {\n  const fn = actionFunctions[action];\n  fn({\n    queryParams,\n    changeEvent,\n    previousResults,\n    keyDocumentMap\n  });\n  return previousResults;\n}","map":{"version":3,"names":["getStateSet","actionFunctions","orderedActionList","resolveInput","calculateActionFromMap","stateSetToActionMap","input","stateSet","actionName","get","action","calculateActionName","resolvedActionId","calculateActionFunction","runAction","queryParams","changeEvent","previousResults","keyDocumentMap","fn"],"sources":["/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/node_modules/event-reduce-js/dist/es/index.js"],"sourcesContent":["import { getStateSet } from './states';\nimport { actionFunctions, orderedActionList } from './actions';\nimport { resolveInput } from './bdd/bdd.generated';\nexport * from './states';\nexport * from './util';\nexport function calculateActionFromMap(stateSetToActionMap, input) {\n    const stateSet = getStateSet(input);\n    const actionName = stateSetToActionMap.get(stateSet);\n    if (!actionName) {\n        return {\n            action: 'runFullQueryAgain',\n            stateSet\n        };\n    }\n    else {\n        return {\n            action: actionName,\n            stateSet\n        };\n    }\n}\nexport function calculateActionName(input) {\n    const resolvedActionId = resolveInput(input);\n    return orderedActionList[resolvedActionId];\n}\nexport function calculateActionFunction(input) {\n    const actionName = calculateActionName(input);\n    return actionFunctions[actionName];\n}\n/**\n * for performance reasons,\n * @mutates the input\n * @returns the new results\n */\nexport function runAction(action, queryParams, changeEvent, previousResults, keyDocumentMap) {\n    const fn = actionFunctions[action];\n    fn({\n        queryParams,\n        changeEvent,\n        previousResults,\n        keyDocumentMap\n    });\n    return previousResults;\n}\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,UAAU;AACtC,SAASC,eAAe,EAAEC,iBAAiB,QAAQ,WAAW;AAC9D,SAASC,YAAY,QAAQ,qBAAqB;AAClD,cAAc,UAAU;AACxB,cAAc,QAAQ;AACtB,OAAO,SAASC,sBAAsBA,CAACC,mBAAmB,EAAEC,KAAK,EAAE;EAC/D,MAAMC,QAAQ,GAAGP,WAAW,CAACM,KAAK,CAAC;EACnC,MAAME,UAAU,GAAGH,mBAAmB,CAACI,GAAG,CAACF,QAAQ,CAAC;EACpD,IAAI,CAACC,UAAU,EAAE;IACb,OAAO;MACHE,MAAM,EAAE,mBAAmB;MAC3BH;IACJ,CAAC;EACL,CAAC,MACI;IACD,OAAO;MACHG,MAAM,EAAEF,UAAU;MAClBD;IACJ,CAAC;EACL;AACJ;AACA,OAAO,SAASI,mBAAmBA,CAACL,KAAK,EAAE;EACvC,MAAMM,gBAAgB,GAAGT,YAAY,CAACG,KAAK,CAAC;EAC5C,OAAOJ,iBAAiB,CAACU,gBAAgB,CAAC;AAC9C;AACA,OAAO,SAASC,uBAAuBA,CAACP,KAAK,EAAE;EAC3C,MAAME,UAAU,GAAGG,mBAAmB,CAACL,KAAK,CAAC;EAC7C,OAAOL,eAAe,CAACO,UAAU,CAAC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASM,SAASA,CAACJ,MAAM,EAAEK,WAAW,EAAEC,WAAW,EAAEC,eAAe,EAAEC,cAAc,EAAE;EACzF,MAAMC,EAAE,GAAGlB,eAAe,CAACS,MAAM,CAAC;EAClCS,EAAE,CAAC;IACCJ,WAAW;IACXC,WAAW;IACXC,eAAe;IACfC;EACJ,CAAC,CAAC;EACF,OAAOD,eAAe;AAC1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}