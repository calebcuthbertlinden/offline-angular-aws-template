{"ast":null,"code":"// Query Logical Operators: https://docs.mongodb.com/manual/reference/operator/query-logical/\nimport { assert, isArray } from \"../../../util\";\nimport { $or } from \"./or\";\n/**\n * Joins query clauses with a logical NOR returns all documents that fail to match both clauses.\n *\n * @param selector\n * @param value\n * @returns {Function}\n */\nexport function $nor(selector, value, options) {\n  assert(isArray(value), \"Invalid expression. $nor expects value to be an Array\");\n  const f = $or(\"$or\", value, options);\n  return obj => !f(obj);\n}","map":{"version":3,"names":["assert","isArray","$or","$nor","selector","value","options","f","obj"],"sources":["/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/node_modules/mingo/es/operators/query/logical/nor.js"],"sourcesContent":["// Query Logical Operators: https://docs.mongodb.com/manual/reference/operator/query-logical/\nimport { assert, isArray } from \"../../../util\";\nimport { $or } from \"./or\";\n/**\n * Joins query clauses with a logical NOR returns all documents that fail to match both clauses.\n *\n * @param selector\n * @param value\n * @returns {Function}\n */\nexport function $nor(selector, value, options) {\n    assert(isArray(value), \"Invalid expression. $nor expects value to be an Array\");\n    const f = $or(\"$or\", value, options);\n    return (obj) => !f(obj);\n}\n"],"mappings":"AAAA;AACA,SAASA,MAAM,EAAEC,OAAO,QAAQ,eAAe;AAC/C,SAASC,GAAG,QAAQ,MAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,IAAIA,CAACC,QAAQ,EAAEC,KAAK,EAAEC,OAAO,EAAE;EAC3CN,MAAM,CAACC,OAAO,CAACI,KAAK,CAAC,EAAE,uDAAuD,CAAC;EAC/E,MAAME,CAAC,GAAGL,GAAG,CAAC,KAAK,EAAEG,KAAK,EAAEC,OAAO,CAAC;EACpC,OAAQE,GAAG,IAAK,CAACD,CAAC,CAACC,GAAG,CAAC;AAC3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}