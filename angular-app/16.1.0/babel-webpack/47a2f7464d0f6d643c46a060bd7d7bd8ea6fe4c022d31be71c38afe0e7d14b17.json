{"ast":null,"code":"import { Parents } from './parents';\nimport { AbstractNode } from './abstract-node';\nimport { oppositeBoolean } from './util';\nexport class LeafNode extends AbstractNode {\n  constructor(level, rootNode, value, parent) {\n    super(level, rootNode, 'LeafNode');\n    this.value = value;\n    this.parents = new Parents(this);\n    this.parents.add(parent);\n  }\n  removeIfValueEquals(value) {\n    this.ensureNotDeleted();\n    if (this.value !== value) {\n      return false;\n    }\n    const parents = this.parents.getAll();\n    parents.forEach(parent => {\n      const branchKey = parent.branches.getKeyOfNode(this);\n      const otherBranch = parent.branches.getBranch(oppositeBoolean(branchKey));\n      this.parents.remove(parent);\n      parent.branches.setBranch(branchKey, otherBranch);\n      if (parent.isInternalNode()) {\n        parent.applyReductionRule();\n      }\n    });\n    return true;\n  }\n}","map":{"version":3,"names":["Parents","AbstractNode","oppositeBoolean","LeafNode","constructor","level","rootNode","value","parent","parents","add","removeIfValueEquals","ensureNotDeleted","getAll","forEach","branchKey","branches","getKeyOfNode","otherBranch","getBranch","remove","setBranch","isInternalNode","applyReductionRule"],"sources":["/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/node_modules/binary-decision-diagram/dist/es/leaf-node.js"],"sourcesContent":["import { Parents } from './parents';\nimport { AbstractNode } from './abstract-node';\nimport { oppositeBoolean } from './util';\nexport class LeafNode extends AbstractNode {\n    constructor(level, rootNode, value, parent) {\n        super(level, rootNode, 'LeafNode');\n        this.value = value;\n        this.parents = new Parents(this);\n        this.parents.add(parent);\n    }\n    removeIfValueEquals(value) {\n        this.ensureNotDeleted();\n        if (this.value !== value) {\n            return false;\n        }\n        const parents = this.parents.getAll();\n        parents.forEach(parent => {\n            const branchKey = parent.branches.getKeyOfNode(this);\n            const otherBranch = parent.branches.getBranch(oppositeBoolean(branchKey));\n            this.parents.remove(parent);\n            parent.branches.setBranch(branchKey, otherBranch);\n            if (parent.isInternalNode()) {\n                parent.applyReductionRule();\n            }\n        });\n        return true;\n    }\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,WAAW;AACnC,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,eAAe,QAAQ,QAAQ;AACxC,OAAO,MAAMC,QAAQ,SAASF,YAAY,CAAC;EACvCG,WAAWA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,MAAM,EAAE;IACxC,KAAK,CAACH,KAAK,EAAEC,QAAQ,EAAE,UAAU,CAAC;IAClC,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACE,OAAO,GAAG,IAAIT,OAAO,CAAC,IAAI,CAAC;IAChC,IAAI,CAACS,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;EAC5B;EACAG,mBAAmBA,CAACJ,KAAK,EAAE;IACvB,IAAI,CAACK,gBAAgB,CAAC,CAAC;IACvB,IAAI,IAAI,CAACL,KAAK,KAAKA,KAAK,EAAE;MACtB,OAAO,KAAK;IAChB;IACA,MAAME,OAAO,GAAG,IAAI,CAACA,OAAO,CAACI,MAAM,CAAC,CAAC;IACrCJ,OAAO,CAACK,OAAO,CAACN,MAAM,IAAI;MACtB,MAAMO,SAAS,GAAGP,MAAM,CAACQ,QAAQ,CAACC,YAAY,CAAC,IAAI,CAAC;MACpD,MAAMC,WAAW,GAAGV,MAAM,CAACQ,QAAQ,CAACG,SAAS,CAACjB,eAAe,CAACa,SAAS,CAAC,CAAC;MACzE,IAAI,CAACN,OAAO,CAACW,MAAM,CAACZ,MAAM,CAAC;MAC3BA,MAAM,CAACQ,QAAQ,CAACK,SAAS,CAACN,SAAS,EAAEG,WAAW,CAAC;MACjD,IAAIV,MAAM,CAACc,cAAc,CAAC,CAAC,EAAE;QACzBd,MAAM,CAACe,kBAAkB,CAAC,CAAC;MAC/B;IACJ,CAAC,CAAC;IACF,OAAO,IAAI;EACf;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}