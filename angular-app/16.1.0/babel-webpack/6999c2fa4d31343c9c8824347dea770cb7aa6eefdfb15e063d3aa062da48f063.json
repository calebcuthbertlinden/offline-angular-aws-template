{"ast":null,"code":"import _asyncToGenerator from \"/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { IDENTITY_TABLE } from \"../local-storage/local-storage\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../sync-service\";\nclass ProfileService {\n  constructor(syncService) {\n    this.syncService = syncService;\n  }\n  /**\n   * Inserts a new record into the IDENTITY table in the local offline storage.\n   *\n   * @param body - The data object representing the record to be inserted.\n   * @returns A Promise that resolves to void once the record has been successfully inserted.\n   * @example\n   * await post({ id: 1, product: 'Phone', quantity: 2 });\n   */\n  post(body) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield _this.syncService.post(IDENTITY_TABLE, \"\", body);\n    })();\n  }\n}\nProfileService.ɵfac = function ProfileService_Factory(t) {\n  return new (t || ProfileService)(i0.ɵɵinject(i1.SyncService));\n};\nProfileService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProfileService,\n  factory: ProfileService.ɵfac,\n  providedIn: 'root'\n});\nexport { ProfileService };","map":{"version":3,"names":["IDENTITY_TABLE","ProfileService","constructor","syncService","post","body","_this","_asyncToGenerator","i0","ɵɵinject","i1","SyncService","factory","ɵfac","providedIn"],"sources":["/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/src/app/repository/api/profile-repository.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { IDENTITY_TABLE } from \"../local-storage/local-storage\";\nimport { SyncService } from \"../sync-service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProfileService {\n\n  constructor(private syncService: SyncService) {}\n\n  /**\n   * Inserts a new record into the IDENTITY table in the local offline storage.\n   *\n   * @param body - The data object representing the record to be inserted.\n   * @returns A Promise that resolves to void once the record has been successfully inserted.\n   * @example\n   * await post({ id: 1, product: 'Phone', quantity: 2 });\n   */\n  async post(body: any): Promise<void> {\n    await this.syncService.post(IDENTITY_TABLE, \"\", body)\n  }\n\n}"],"mappings":";AACA,SAASA,cAAc,QAAQ,gCAAgC;;;AAG/D,MAGaC,cAAc;EAEzBC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;EAAgB;EAE/C;;;;;;;;EAQMC,IAAIA,CAACC,IAAS;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAClB,MAAMD,KAAI,CAACH,WAAW,CAACC,IAAI,CAACJ,cAAc,EAAE,EAAE,EAAEK,IAAI,CAAC;IAAA;EACvD;;AAdWJ,cAAc,C;mBAAdA,cAAc,EAAAO,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;AAAA;AAAdV,cAAc,C;SAAdA,cAAc;EAAAW,OAAA,EAAdX,cAAc,CAAAY,IAAA;EAAAC,UAAA,EAFb;AAAM;SAEPb,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}