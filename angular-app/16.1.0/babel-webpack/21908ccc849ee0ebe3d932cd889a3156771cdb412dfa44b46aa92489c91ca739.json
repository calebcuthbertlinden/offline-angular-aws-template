{"ast":null,"code":"/**\n * RxChangeEvents a emitted when something in the database changes\n * they can be grabbed by the observables of database, collection and document\n */\n\nimport { overwritable } from './overwritable';\nimport { appendToArray } from './plugins/utils';\nexport function getDocumentDataOfRxChangeEvent(rxChangeEvent) {\n  if (rxChangeEvent.documentData) {\n    return rxChangeEvent.documentData;\n  } else {\n    return rxChangeEvent.previousDocumentData;\n  }\n}\n\n/**\n * Might return null which means an\n * already deleted document got modified but still is deleted.\n * These kind of events are not relevant for the event-reduce algorithm\n * and must be filtered out.\n */\nexport function rxChangeEventToEventReduceChangeEvent(rxChangeEvent) {\n  switch (rxChangeEvent.operation) {\n    case 'INSERT':\n      return {\n        operation: rxChangeEvent.operation,\n        id: rxChangeEvent.documentId,\n        doc: rxChangeEvent.documentData,\n        previous: null\n      };\n    case 'UPDATE':\n      return {\n        operation: rxChangeEvent.operation,\n        id: rxChangeEvent.documentId,\n        doc: overwritable.deepFreezeWhenDevMode(rxChangeEvent.documentData),\n        previous: rxChangeEvent.previousDocumentData ? rxChangeEvent.previousDocumentData : 'UNKNOWN'\n      };\n    case 'DELETE':\n      return {\n        operation: rxChangeEvent.operation,\n        id: rxChangeEvent.documentId,\n        doc: null,\n        previous: rxChangeEvent.previousDocumentData\n      };\n  }\n}\n\n/**\n * Flattens the given events into a single array of events.\n * Used mostly in tests.\n */\nexport function flattenEvents(input) {\n  var output = [];\n  if (Array.isArray(input)) {\n    input.forEach(inputItem => {\n      var add = flattenEvents(inputItem);\n      appendToArray(output, add);\n    });\n  } else {\n    if (input.id && input.events) {\n      // is bulk\n      input.events.forEach(ev => output.push(ev));\n    } else {\n      output.push(input);\n    }\n  }\n  var usedIds = new Set();\n  var nonDuplicate = [];\n  output.forEach(ev => {\n    if (!usedIds.has(ev.eventId)) {\n      usedIds.add(ev.eventId);\n      nonDuplicate.push(ev);\n    }\n  });\n  return nonDuplicate;\n}","map":{"version":3,"names":["overwritable","appendToArray","getDocumentDataOfRxChangeEvent","rxChangeEvent","documentData","previousDocumentData","rxChangeEventToEventReduceChangeEvent","operation","id","documentId","doc","previous","deepFreezeWhenDevMode","flattenEvents","input","output","Array","isArray","forEach","inputItem","add","events","ev","push","usedIds","Set","nonDuplicate","has","eventId"],"sources":["/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/node_modules/rxdb/dist/es/rx-change-event.js"],"sourcesContent":["/**\n * RxChangeEvents a emitted when something in the database changes\n * they can be grabbed by the observables of database, collection and document\n */\n\nimport { overwritable } from './overwritable';\nimport { appendToArray } from './plugins/utils';\nexport function getDocumentDataOfRxChangeEvent(rxChangeEvent) {\n  if (rxChangeEvent.documentData) {\n    return rxChangeEvent.documentData;\n  } else {\n    return rxChangeEvent.previousDocumentData;\n  }\n}\n\n/**\n * Might return null which means an\n * already deleted document got modified but still is deleted.\n * These kind of events are not relevant for the event-reduce algorithm\n * and must be filtered out.\n */\nexport function rxChangeEventToEventReduceChangeEvent(rxChangeEvent) {\n  switch (rxChangeEvent.operation) {\n    case 'INSERT':\n      return {\n        operation: rxChangeEvent.operation,\n        id: rxChangeEvent.documentId,\n        doc: rxChangeEvent.documentData,\n        previous: null\n      };\n    case 'UPDATE':\n      return {\n        operation: rxChangeEvent.operation,\n        id: rxChangeEvent.documentId,\n        doc: overwritable.deepFreezeWhenDevMode(rxChangeEvent.documentData),\n        previous: rxChangeEvent.previousDocumentData ? rxChangeEvent.previousDocumentData : 'UNKNOWN'\n      };\n    case 'DELETE':\n      return {\n        operation: rxChangeEvent.operation,\n        id: rxChangeEvent.documentId,\n        doc: null,\n        previous: rxChangeEvent.previousDocumentData\n      };\n  }\n}\n\n/**\n * Flattens the given events into a single array of events.\n * Used mostly in tests.\n */\nexport function flattenEvents(input) {\n  var output = [];\n  if (Array.isArray(input)) {\n    input.forEach(inputItem => {\n      var add = flattenEvents(inputItem);\n      appendToArray(output, add);\n    });\n  } else {\n    if (input.id && input.events) {\n      // is bulk\n      input.events.forEach(ev => output.push(ev));\n    } else {\n      output.push(input);\n    }\n  }\n  var usedIds = new Set();\n  var nonDuplicate = [];\n  output.forEach(ev => {\n    if (!usedIds.has(ev.eventId)) {\n      usedIds.add(ev.eventId);\n      nonDuplicate.push(ev);\n    }\n  });\n  return nonDuplicate;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,SAASA,YAAY,QAAQ,gBAAgB;AAC7C,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,OAAO,SAASC,8BAA8BA,CAACC,aAAa,EAAE;EAC5D,IAAIA,aAAa,CAACC,YAAY,EAAE;IAC9B,OAAOD,aAAa,CAACC,YAAY;EACnC,CAAC,MAAM;IACL,OAAOD,aAAa,CAACE,oBAAoB;EAC3C;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,qCAAqCA,CAACH,aAAa,EAAE;EACnE,QAAQA,aAAa,CAACI,SAAS;IAC7B,KAAK,QAAQ;MACX,OAAO;QACLA,SAAS,EAAEJ,aAAa,CAACI,SAAS;QAClCC,EAAE,EAAEL,aAAa,CAACM,UAAU;QAC5BC,GAAG,EAAEP,aAAa,CAACC,YAAY;QAC/BO,QAAQ,EAAE;MACZ,CAAC;IACH,KAAK,QAAQ;MACX,OAAO;QACLJ,SAAS,EAAEJ,aAAa,CAACI,SAAS;QAClCC,EAAE,EAAEL,aAAa,CAACM,UAAU;QAC5BC,GAAG,EAAEV,YAAY,CAACY,qBAAqB,CAACT,aAAa,CAACC,YAAY,CAAC;QACnEO,QAAQ,EAAER,aAAa,CAACE,oBAAoB,GAAGF,aAAa,CAACE,oBAAoB,GAAG;MACtF,CAAC;IACH,KAAK,QAAQ;MACX,OAAO;QACLE,SAAS,EAAEJ,aAAa,CAACI,SAAS;QAClCC,EAAE,EAAEL,aAAa,CAACM,UAAU;QAC5BC,GAAG,EAAE,IAAI;QACTC,QAAQ,EAAER,aAAa,CAACE;MAC1B,CAAC;EACL;AACF;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASQ,aAAaA,CAACC,KAAK,EAAE;EACnC,IAAIC,MAAM,GAAG,EAAE;EACf,IAAIC,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC,EAAE;IACxBA,KAAK,CAACI,OAAO,CAACC,SAAS,IAAI;MACzB,IAAIC,GAAG,GAAGP,aAAa,CAACM,SAAS,CAAC;MAClClB,aAAa,CAACc,MAAM,EAAEK,GAAG,CAAC;IAC5B,CAAC,CAAC;EACJ,CAAC,MAAM;IACL,IAAIN,KAAK,CAACN,EAAE,IAAIM,KAAK,CAACO,MAAM,EAAE;MAC5B;MACAP,KAAK,CAACO,MAAM,CAACH,OAAO,CAACI,EAAE,IAAIP,MAAM,CAACQ,IAAI,CAACD,EAAE,CAAC,CAAC;IAC7C,CAAC,MAAM;MACLP,MAAM,CAACQ,IAAI,CAACT,KAAK,CAAC;IACpB;EACF;EACA,IAAIU,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC;EACvB,IAAIC,YAAY,GAAG,EAAE;EACrBX,MAAM,CAACG,OAAO,CAACI,EAAE,IAAI;IACnB,IAAI,CAACE,OAAO,CAACG,GAAG,CAACL,EAAE,CAACM,OAAO,CAAC,EAAE;MAC5BJ,OAAO,CAACJ,GAAG,CAACE,EAAE,CAACM,OAAO,CAAC;MACvBF,YAAY,CAACH,IAAI,CAACD,EAAE,CAAC;IACvB;EACF,CAAC,CAAC;EACF,OAAOI,YAAY;AACrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}