{"ast":null,"code":"// import { ScormWrapperService } from 'ngx-scorm-wrapper';\nimport convertTotalSeconds from './time-converter';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./scorm-wrapper-service\";\nclass LmsService {\n  constructor(scormWrapper) {\n    this.scormWrapper = scormWrapper;\n    this.startTime = 0;\n    try {\n      this.scormWrapper.doLMSInitialize(); // Try to find SCORM_API and initialize it\n    } catch (err) {\n      console.log('Cannot find LMS API');\n    }\n    if (!scormWrapper.LMSIsInitialized) {\n      console.warn('LMS is not connected');\n      return;\n    } else {\n      console.warn('LMS is connected');\n      this.startTime = new Date().getTime();\n      this.scormWrapper.doLMSSetValue('cmi.score.max', '100');\n      this.scormWrapper.doLMSSetValue('cmi.location', '0:0'); // assume that the format is <chapter>:<page>\n      this.scormWrapper.doLMSSetValue('cmi.session_time', this.sessionTime);\n      this.scormWrapper.doLMSSetValue('cmi.completion_status', 'incomplete');\n      this.commit();\n    }\n  }\n  get apiVersion() {\n    return this.scormWrapper.APIVersion;\n  }\n  get sessionTime() {\n    if (this.startTime) {\n      const currentTime = new Date().getTime();\n      return convertTotalSeconds((currentTime - this.startTime) / 1000);\n    }\n    return '00:00:00.0';\n  }\n  get score() {\n    if (this.scormWrapper.LMSIsInitialized) {\n      const scaledScore = +(this.scormWrapper.doLMSGetValue('cmi.score.scaled') || 0);\n      const rawScore = +(this.scormWrapper.doLMSGetValue('cmi.score.raw') || 0);\n      return scaledScore * 100 || rawScore;\n    }\n    console.warn('LMS is not connected');\n    return 0;\n  }\n  set score(score) {\n    if (this.scormWrapper.LMSIsInitialized) {\n      this.scormWrapper.doLMSSetValue('cmi.score.scaled', '' + score / 100);\n      return;\n    }\n    console.warn('LMS is not connected');\n  }\n  commit() {\n    this.scormWrapper.doLMSCommit();\n  }\n  terminate() {\n    this.scormWrapper.doLMSFinish();\n  }\n  getSuspendData() {\n    if (!this.scormWrapper.LMSIsInitialized) {\n      console.warn('LMS is not connected');\n      return null;\n    }\n    const suspendData = this.scormWrapper.doLMSGetValue('cmi.suspend_data');\n    if (suspendData) {\n      return JSON.parse(suspendData);\n    }\n    return null;\n  }\n  sendData(data) {\n    if (!this.scormWrapper.LMSIsInitialized) {\n      console.warn('LMS is not connected');\n    } else {\n      const {\n        score,\n        location,\n        completionStatus,\n        suspendData\n      } = data;\n      this.scormWrapper.doLMSSetValue('cmi.score.max', '100');\n      this.scormWrapper.doLMSSetValue('cmi.location', location); // assume that the format is <chapter>:<page>\n      this.scormWrapper.doLMSSetValue('cmi.session_time', this.sessionTime);\n      this.scormWrapper.doLMSSetValue('cmi.completion_status', completionStatus);\n      this.scormWrapper.doLMSSetValue('cmi.score.scaled', score / 100 + '');\n      this.scormWrapper.doLMSSetValue('cmi.core.lesson_location', location);\n      this.scormWrapper.doLMSSetValue('cmi.suspend_data', JSON.stringify(suspendData));\n      this.commit();\n    }\n  }\n  getData() {\n    if (!this.scormWrapper.LMSIsInitialized) {\n      console.warn('LMS is not connected');\n      return null;\n    }\n    const suspendData = this.scormWrapper.doLMSGetValue('cmi.suspend_data');\n    if (suspendData) {\n      return JSON.parse(suspendData);\n    }\n    return null;\n  }\n}\nLmsService.ɵfac = function LmsService_Factory(t) {\n  return new (t || LmsService)(i0.ɵɵinject(i1.ScormWrapperService));\n};\nLmsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LmsService,\n  factory: LmsService.ɵfac,\n  providedIn: 'root'\n});\nexport { LmsService };","map":{"version":3,"names":["convertTotalSeconds","LmsService","constructor","scormWrapper","startTime","doLMSInitialize","err","console","log","LMSIsInitialized","warn","Date","getTime","doLMSSetValue","sessionTime","commit","apiVersion","APIVersion","currentTime","score","scaledScore","doLMSGetValue","rawScore","doLMSCommit","terminate","doLMSFinish","getSuspendData","suspendData","JSON","parse","sendData","data","location","completionStatus","stringify","getData","i0","ɵɵinject","i1","ScormWrapperService","factory","ɵfac","providedIn"],"sources":["/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/src/app/scorm/lms-service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n// import { ScormWrapperService } from 'ngx-scorm-wrapper';\nimport convertTotalSeconds from './time-converter';\nimport { ScormWrapperService } from './scorm-wrapper-service';\n\nexport interface ILMSData {\n  score: number;\n  location: string;\n  completionStatus: 'complete' | 'incomplete';\n  suspendData: object;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class LmsService {\n\n  private readonly startTime: number = 0;\n\n  constructor(private scormWrapper: ScormWrapperService) {\n\n    try {\n      this.scormWrapper.doLMSInitialize(); // Try to find SCORM_API and initialize it\n    } catch (err) {\n      console.log('Cannot find LMS API');\n    }\n\n    if (!scormWrapper.LMSIsInitialized) {\n      console.warn('LMS is not connected');\n      return;\n    } else {\n      console.warn('LMS is connected');\n      this.startTime = new Date().getTime();\n\n      this.scormWrapper.doLMSSetValue('cmi.score.max', '100');\n      this.scormWrapper.doLMSSetValue('cmi.location', '0:0'); // assume that the format is <chapter>:<page>\n      this.scormWrapper.doLMSSetValue('cmi.session_time', this.sessionTime);\n      this.scormWrapper.doLMSSetValue('cmi.completion_status', 'incomplete');\n      this.commit();\n    }\n  }\n\n  get apiVersion(): string {\n    return this.scormWrapper.APIVersion;\n  }\n\n  get sessionTime(): string {\n    if (this.startTime) {\n      const currentTime = new Date().getTime();\n      return convertTotalSeconds((currentTime - this.startTime) / 1000);\n    }\n    return '00:00:00.0';\n  }\n\n  get score(): number {\n    if (this.scormWrapper.LMSIsInitialized) {\n      const scaledScore = +(this.scormWrapper.doLMSGetValue('cmi.score.scaled') || 0);\n      const rawScore = +(this.scormWrapper.doLMSGetValue('cmi.score.raw') || 0);\n\n      return scaledScore * 100 || rawScore;\n    }\n\n    console.warn('LMS is not connected');\n    return 0;\n  }\n\n  set score(score: number) {\n    if (this.scormWrapper.LMSIsInitialized) {\n      this.scormWrapper.doLMSSetValue('cmi.score.scaled', '' + score / 100);\n      return;\n    }\n    console.warn('LMS is not connected');\n  }\n\n  public commit() {\n    this.scormWrapper.doLMSCommit();\n  }\n\n  public terminate() {\n    this.scormWrapper.doLMSFinish();\n  }\n\n  public getSuspendData(): any {\n    if (!this.scormWrapper.LMSIsInitialized) {\n      console.warn('LMS is not connected');\n      return null;\n    }\n\n    const suspendData = this.scormWrapper.doLMSGetValue('cmi.suspend_data');\n    if (suspendData) {\n      return JSON.parse(suspendData as string);\n    }\n\n    return null;\n  }\n\n\n  public sendData(data: ILMSData): void {\n    if (!this.scormWrapper.LMSIsInitialized) {\n      console.warn('LMS is not connected');\n    } else {\n      const { score, location, completionStatus, suspendData } = data;\n\n      this.scormWrapper.doLMSSetValue('cmi.score.max', '100');\n      this.scormWrapper.doLMSSetValue('cmi.location', location); // assume that the format is <chapter>:<page>\n      this.scormWrapper.doLMSSetValue('cmi.session_time', this.sessionTime);\n      this.scormWrapper.doLMSSetValue('cmi.completion_status', completionStatus);\n      this.scormWrapper.doLMSSetValue('cmi.score.scaled', score / 100 + '');\n      this.scormWrapper.doLMSSetValue('cmi.core.lesson_location', location);\n      this.scormWrapper.doLMSSetValue('cmi.suspend_data', JSON.stringify(suspendData));\n      this.commit();\n    }\n  }\n\n  public getData(): any {\n    if (!this.scormWrapper.LMSIsInitialized) {\n      console.warn('LMS is not connected');\n      return null;\n    }\n\n    const suspendData = this.scormWrapper.doLMSGetValue('cmi.suspend_data');\n    if (suspendData) {\n      return JSON.parse(suspendData as string);\n    }\n\n    return null;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}