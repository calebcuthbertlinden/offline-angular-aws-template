{"ast":null,"code":"import { minBinaryWithLength, maxBinaryWithLength, getNextStateSet } from './util';\n/**\n * fills each missing row of a table\n * with the given value\n */\nexport function fillTruthTable(truthTable, inputLength, value) {\n  const endInput = maxBinaryWithLength(inputLength);\n  let currentInput = minBinaryWithLength(inputLength);\n  let done = false;\n  while (!done) {\n    if (!truthTable.has(currentInput)) {\n      truthTable.set(currentInput, value);\n    }\n    if (currentInput === endInput) {\n      done = true;\n    } else {\n      currentInput = getNextStateSet(currentInput);\n    }\n  }\n}","map":{"version":3,"names":["minBinaryWithLength","maxBinaryWithLength","getNextStateSet","fillTruthTable","truthTable","inputLength","value","endInput","currentInput","done","has","set"],"sources":["/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/node_modules/binary-decision-diagram/dist/es/fill-truth-table.js"],"sourcesContent":["import { minBinaryWithLength, maxBinaryWithLength, getNextStateSet } from './util';\n/**\n * fills each missing row of a table\n * with the given value\n */\nexport function fillTruthTable(truthTable, inputLength, value) {\n    const endInput = maxBinaryWithLength(inputLength);\n    let currentInput = minBinaryWithLength(inputLength);\n    let done = false;\n    while (!done) {\n        if (!truthTable.has(currentInput)) {\n            truthTable.set(currentInput, value);\n        }\n        if (currentInput === endInput) {\n            done = true;\n        }\n        else {\n            currentInput = getNextStateSet(currentInput);\n        }\n    }\n}\n"],"mappings":"AAAA,SAASA,mBAAmB,EAAEC,mBAAmB,EAAEC,eAAe,QAAQ,QAAQ;AAClF;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAACC,UAAU,EAAEC,WAAW,EAAEC,KAAK,EAAE;EAC3D,MAAMC,QAAQ,GAAGN,mBAAmB,CAACI,WAAW,CAAC;EACjD,IAAIG,YAAY,GAAGR,mBAAmB,CAACK,WAAW,CAAC;EACnD,IAAII,IAAI,GAAG,KAAK;EAChB,OAAO,CAACA,IAAI,EAAE;IACV,IAAI,CAACL,UAAU,CAACM,GAAG,CAACF,YAAY,CAAC,EAAE;MAC/BJ,UAAU,CAACO,GAAG,CAACH,YAAY,EAAEF,KAAK,CAAC;IACvC;IACA,IAAIE,YAAY,KAAKD,QAAQ,EAAE;MAC3BE,IAAI,GAAG,IAAI;IACf,CAAC,MACI;MACDD,YAAY,GAAGN,eAAe,CAACM,YAAY,CAAC;IAChD;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}