{"ast":null,"code":"export function deepFreeze(o) {\n  Object.freeze(o);\n  Object.getOwnPropertyNames(o).forEach(function (prop) {\n    if (o.hasOwnProperty(prop) && o[prop] !== null && (typeof o[prop] === 'object' || typeof o[prop] === 'function') && !Object.isFrozen(o[prop])) {\n      deepFreeze(o[prop]);\n    }\n  });\n  return o;\n}\n\n/**\n * To get specific nested path values from objects,\n * RxDB normally uses the 'dot-prop' npm module.\n * But when performance is really relevant, this is not fast enough.\n * Instead we use a monad that can prepare some stuff up front\n * and we can re-use the generated function.\n */\n\nexport function objectPathMonad(objectPath) {\n  var split = objectPath.split('.');\n\n  // reuse this variable for better performance.\n  var splitLength = split.length;\n\n  /**\n   * Performance shortcut,\n   * if no nested path is used,\n   * directly return the field of the object.\n   */\n  if (splitLength === 1) {\n    return obj => obj[objectPath];\n  }\n  return obj => {\n    var currentVal = obj;\n    for (var i = 0; i < splitLength; ++i) {\n      var subPath = split[i];\n      currentVal = currentVal[subPath];\n      if (typeof currentVal === 'undefined') {\n        return currentVal;\n      }\n    }\n    return currentVal;\n  };\n}\nexport function getFromObjectOrThrow(obj, key) {\n  var val = obj[key];\n  if (!val) {\n    throw new Error('missing value from object ' + key);\n  }\n  return val;\n}\n\n/**\n * returns a flattened object\n * @link https://gist.github.com/penguinboy/762197\n */\nexport function flattenObject(ob) {\n  var toReturn = {};\n  for (var i in ob) {\n    if (!ob.hasOwnProperty(i)) continue;\n    if (typeof ob[i] === 'object') {\n      var flatObject = flattenObject(ob[i]);\n      for (var x in flatObject) {\n        if (!flatObject.hasOwnProperty(x)) continue;\n        toReturn[i + '.' + x] = flatObject[x];\n      }\n    } else {\n      toReturn[i] = ob[i];\n    }\n  }\n  return toReturn;\n}\n\n/**\n * does a flat copy on the objects,\n * is about 3 times faster then using deepClone\n * @link https://jsperf.com/object-rest-spread-vs-clone/2\n */\nexport function flatClone(obj) {\n  return Object.assign({}, obj);\n}\n\n/**\n * @link https://stackoverflow.com/a/11509718/3443137\n */\nexport function firstPropertyNameOfObject(obj) {\n  return Object.keys(obj)[0];\n}\nexport function firstPropertyValueOfObject(obj) {\n  var key = Object.keys(obj)[0];\n  return obj[key];\n}\n\n/**\n * deep-sort an object so its attributes are in lexical order.\n * Also sorts the arrays inside of the object if no-array-sort not set\n */\nexport function sortObject(obj, noArraySort = false) {\n  if (!obj) return obj; // do not sort null, false or undefined\n\n  // array\n  if (!noArraySort && Array.isArray(obj)) {\n    return obj.sort((a, b) => {\n      if (typeof a === 'string' && typeof b === 'string') return a.localeCompare(b);\n      if (typeof a === 'object') return 1;else return -1;\n    }).map(i => sortObject(i, noArraySort));\n  }\n\n  // object\n  // array is also of type object\n  if (typeof obj === 'object' && !Array.isArray(obj)) {\n    if (obj instanceof RegExp) {\n      return obj;\n    }\n    var out = {};\n    Object.keys(obj).sort((a, b) => a.localeCompare(b)).forEach(key => {\n      out[key] = sortObject(obj[key], noArraySort);\n    });\n    return out;\n  }\n\n  // everything else\n  return obj;\n}\n\n/**\n * Deep clone a plain json object.\n * Does not work with recursive stuff\n * or non-plain-json.\n * IMPORTANT: Performance of this is very important,\n * do not change it without running performance tests!\n *\n * @link https://github.com/zxdong262/deep-copy/blob/master/src/index.ts\n */\nfunction deepClone(src) {\n  if (!src) {\n    return src;\n  }\n  if (src === null || typeof src !== 'object') {\n    return src;\n  }\n  if (Array.isArray(src)) {\n    var ret = new Array(src.length);\n    var i = ret.length;\n    while (i--) {\n      ret[i] = deepClone(src[i]);\n    }\n    return ret;\n  }\n  var dest = {};\n  // eslint-disable-next-line guard-for-in\n  for (var key in src) {\n    dest[key] = deepClone(src[key]);\n  }\n  return dest;\n}\nexport var clone = deepClone;\n\n/**\n * overwrites the getter with the actual value\n * Mostly used for caching stuff on the first run\n */\nexport function overwriteGetterForCaching(obj, getterName, value) {\n  Object.defineProperty(obj, getterName, {\n    get: function () {\n      return value;\n    }\n  });\n  return value;\n}\n\n/**\n * used to JSON.stringify() objects that contain a regex\n * @link https://stackoverflow.com/a/33416684 thank you Fabian Jakobs!\n */\nexport function stringifyFilter(key, value) {\n  if (value instanceof RegExp) {\n    return value.toString();\n  }\n  return value;\n}","map":{"version":3,"names":["deepFreeze","o","Object","freeze","getOwnPropertyNames","forEach","prop","hasOwnProperty","isFrozen","objectPathMonad","objectPath","split","splitLength","length","obj","currentVal","i","subPath","getFromObjectOrThrow","key","val","Error","flattenObject","ob","toReturn","flatObject","x","flatClone","assign","firstPropertyNameOfObject","keys","firstPropertyValueOfObject","sortObject","noArraySort","Array","isArray","sort","a","b","localeCompare","map","RegExp","out","deepClone","src","ret","dest","clone","overwriteGetterForCaching","getterName","value","defineProperty","get","stringifyFilter","toString"],"sources":["/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/node_modules/rxdb/dist/es/plugins/utils/utils-object.js"],"sourcesContent":["export function deepFreeze(o) {\n  Object.freeze(o);\n  Object.getOwnPropertyNames(o).forEach(function (prop) {\n    if (o.hasOwnProperty(prop) && o[prop] !== null && (typeof o[prop] === 'object' || typeof o[prop] === 'function') && !Object.isFrozen(o[prop])) {\n      deepFreeze(o[prop]);\n    }\n  });\n  return o;\n}\n\n/**\n * To get specific nested path values from objects,\n * RxDB normally uses the 'dot-prop' npm module.\n * But when performance is really relevant, this is not fast enough.\n * Instead we use a monad that can prepare some stuff up front\n * and we can re-use the generated function.\n */\n\nexport function objectPathMonad(objectPath) {\n  var split = objectPath.split('.');\n\n  // reuse this variable for better performance.\n  var splitLength = split.length;\n\n  /**\n   * Performance shortcut,\n   * if no nested path is used,\n   * directly return the field of the object.\n   */\n  if (splitLength === 1) {\n    return obj => obj[objectPath];\n  }\n  return obj => {\n    var currentVal = obj;\n    for (var i = 0; i < splitLength; ++i) {\n      var subPath = split[i];\n      currentVal = currentVal[subPath];\n      if (typeof currentVal === 'undefined') {\n        return currentVal;\n      }\n    }\n    return currentVal;\n  };\n}\nexport function getFromObjectOrThrow(obj, key) {\n  var val = obj[key];\n  if (!val) {\n    throw new Error('missing value from object ' + key);\n  }\n  return val;\n}\n\n/**\n * returns a flattened object\n * @link https://gist.github.com/penguinboy/762197\n */\nexport function flattenObject(ob) {\n  var toReturn = {};\n  for (var i in ob) {\n    if (!ob.hasOwnProperty(i)) continue;\n    if (typeof ob[i] === 'object') {\n      var flatObject = flattenObject(ob[i]);\n      for (var x in flatObject) {\n        if (!flatObject.hasOwnProperty(x)) continue;\n        toReturn[i + '.' + x] = flatObject[x];\n      }\n    } else {\n      toReturn[i] = ob[i];\n    }\n  }\n  return toReturn;\n}\n\n/**\n * does a flat copy on the objects,\n * is about 3 times faster then using deepClone\n * @link https://jsperf.com/object-rest-spread-vs-clone/2\n */\nexport function flatClone(obj) {\n  return Object.assign({}, obj);\n}\n\n/**\n * @link https://stackoverflow.com/a/11509718/3443137\n */\nexport function firstPropertyNameOfObject(obj) {\n  return Object.keys(obj)[0];\n}\nexport function firstPropertyValueOfObject(obj) {\n  var key = Object.keys(obj)[0];\n  return obj[key];\n}\n\n/**\n * deep-sort an object so its attributes are in lexical order.\n * Also sorts the arrays inside of the object if no-array-sort not set\n */\nexport function sortObject(obj, noArraySort = false) {\n  if (!obj) return obj; // do not sort null, false or undefined\n\n  // array\n  if (!noArraySort && Array.isArray(obj)) {\n    return obj.sort((a, b) => {\n      if (typeof a === 'string' && typeof b === 'string') return a.localeCompare(b);\n      if (typeof a === 'object') return 1;else return -1;\n    }).map(i => sortObject(i, noArraySort));\n  }\n\n  // object\n  // array is also of type object\n  if (typeof obj === 'object' && !Array.isArray(obj)) {\n    if (obj instanceof RegExp) {\n      return obj;\n    }\n    var out = {};\n    Object.keys(obj).sort((a, b) => a.localeCompare(b)).forEach(key => {\n      out[key] = sortObject(obj[key], noArraySort);\n    });\n    return out;\n  }\n\n  // everything else\n  return obj;\n}\n\n/**\n * Deep clone a plain json object.\n * Does not work with recursive stuff\n * or non-plain-json.\n * IMPORTANT: Performance of this is very important,\n * do not change it without running performance tests!\n *\n * @link https://github.com/zxdong262/deep-copy/blob/master/src/index.ts\n */\nfunction deepClone(src) {\n  if (!src) {\n    return src;\n  }\n  if (src === null || typeof src !== 'object') {\n    return src;\n  }\n  if (Array.isArray(src)) {\n    var ret = new Array(src.length);\n    var i = ret.length;\n    while (i--) {\n      ret[i] = deepClone(src[i]);\n    }\n    return ret;\n  }\n  var dest = {};\n  // eslint-disable-next-line guard-for-in\n  for (var key in src) {\n    dest[key] = deepClone(src[key]);\n  }\n  return dest;\n}\nexport var clone = deepClone;\n\n/**\n * overwrites the getter with the actual value\n * Mostly used for caching stuff on the first run\n */\nexport function overwriteGetterForCaching(obj, getterName, value) {\n  Object.defineProperty(obj, getterName, {\n    get: function () {\n      return value;\n    }\n  });\n  return value;\n}\n\n/**\n * used to JSON.stringify() objects that contain a regex\n * @link https://stackoverflow.com/a/33416684 thank you Fabian Jakobs!\n */\nexport function stringifyFilter(key, value) {\n  if (value instanceof RegExp) {\n    return value.toString();\n  }\n  return value;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}