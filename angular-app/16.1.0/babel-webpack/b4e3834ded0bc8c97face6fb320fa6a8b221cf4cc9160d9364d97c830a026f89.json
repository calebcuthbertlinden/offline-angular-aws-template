{"ast":null,"code":"/**\n * hook-functions that can be extended by the plugin\n */\nexport var HOOKS = {\n  /**\n   * Runs before a plugin is added.\n   * Use this to block the usage of non-compatible plugins.\n   */\n  preAddRxPlugin: [],\n  /**\n   * functions that run before the database is created\n   */\n  preCreateRxDatabase: [],\n  /**\n   * runs after the database is created and prepared\n   * but before the instance is returned to the user\n   * @async\n   */\n  createRxDatabase: [],\n  preCreateRxCollection: [],\n  createRxCollection: [],\n  /**\n  * runs at the end of the destroy-process of a collection\n  * @async\n  */\n  postDestroyRxCollection: [],\n  /**\n   * Runs after a collection is removed.\n   * @async\n   */\n  postRemoveRxCollection: [],\n  /**\n    * functions that get the json-schema as input\n    * to do additionally checks/manipulation\n    */\n  preCreateRxSchema: [],\n  /**\n   * functions that run after the RxSchema is created\n   * gets RxSchema as attribute\n   */\n  createRxSchema: [],\n  preCreateRxQuery: [],\n  /**\n   * Runs before a query is send to the\n   * prepareQuery function of the storage engine.\n   */\n  prePrepareQuery: [],\n  createRxDocument: [],\n  /**\n   * runs after a RxDocument is created,\n   * cannot be async\n   */\n  postCreateRxDocument: [],\n  /**\n   * Runs before a RxStorageInstance is created\n   * gets the params of createStorageInstance()\n   * as attribute so you can manipulate them.\n   * Notice that you have to clone stuff before mutating the inputs.\n   */\n  preCreateRxStorageInstance: [],\n  /**\n   * runs on the document-data before the document is migrated\n   * {\n   *   doc: Object, // original doc-data\n   *   migrated: // migrated doc-data after run through migration-strategies\n   * }\n   */\n  preMigrateDocument: [],\n  /**\n   * runs after the migration of a document has been done\n   */\n  postMigrateDocument: [],\n  /**\n   * runs at the beginning of the destroy-process of a database\n   */\n  preDestroyRxDatabase: [],\n  /**\n   * runs after a database has been removed\n   * @async\n   */\n  postRemoveRxDatabase: [],\n  /**\n   * runs before the replication writes the rows to master\n   * but before the rows have been modified\n   * @async\n   */\n  preReplicationMasterWrite: [],\n  /**\n   * runs after the replication has been sent to the server\n   * but before the new documents have been handled\n   * @async\n   */\n  preReplicationMasterWriteDocumentsHandle: []\n};\nexport function runPluginHooks(hookKey, obj) {\n  if (HOOKS[hookKey]) {\n    HOOKS[hookKey].forEach(fun => fun(obj));\n  }\n}\n\n/**\n * TODO\n * we should not run the hooks in parallel\n * this makes stuff unpredictable.\n */\nexport function runAsyncPluginHooks(hookKey, obj) {\n  return Promise.all(HOOKS[hookKey].map(fun => fun(obj)));\n}\n\n/**\n * used in tests to remove hooks\n */\nexport function _clearHook(type, fun) {\n  HOOKS[type] = HOOKS[type].filter(h => h !== fun);\n}","map":{"version":3,"names":["HOOKS","preAddRxPlugin","preCreateRxDatabase","createRxDatabase","preCreateRxCollection","createRxCollection","postDestroyRxCollection","postRemoveRxCollection","preCreateRxSchema","createRxSchema","preCreateRxQuery","prePrepareQuery","createRxDocument","postCreateRxDocument","preCreateRxStorageInstance","preMigrateDocument","postMigrateDocument","preDestroyRxDatabase","postRemoveRxDatabase","preReplicationMasterWrite","preReplicationMasterWriteDocumentsHandle","runPluginHooks","hookKey","obj","forEach","fun","runAsyncPluginHooks","Promise","all","map","_clearHook","type","filter","h"],"sources":["/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/node_modules/rxdb/dist/es/hooks.js"],"sourcesContent":["/**\n * hook-functions that can be extended by the plugin\n */\nexport var HOOKS = {\n  /**\n   * Runs before a plugin is added.\n   * Use this to block the usage of non-compatible plugins.\n   */\n  preAddRxPlugin: [],\n  /**\n   * functions that run before the database is created\n   */\n  preCreateRxDatabase: [],\n  /**\n   * runs after the database is created and prepared\n   * but before the instance is returned to the user\n   * @async\n   */\n  createRxDatabase: [],\n  preCreateRxCollection: [],\n  createRxCollection: [],\n  /**\n  * runs at the end of the destroy-process of a collection\n  * @async\n  */\n  postDestroyRxCollection: [],\n  /**\n   * Runs after a collection is removed.\n   * @async\n   */\n  postRemoveRxCollection: [],\n  /**\n    * functions that get the json-schema as input\n    * to do additionally checks/manipulation\n    */\n  preCreateRxSchema: [],\n  /**\n   * functions that run after the RxSchema is created\n   * gets RxSchema as attribute\n   */\n  createRxSchema: [],\n  preCreateRxQuery: [],\n  /**\n   * Runs before a query is send to the\n   * prepareQuery function of the storage engine.\n   */\n  prePrepareQuery: [],\n  createRxDocument: [],\n  /**\n   * runs after a RxDocument is created,\n   * cannot be async\n   */\n  postCreateRxDocument: [],\n  /**\n   * Runs before a RxStorageInstance is created\n   * gets the params of createStorageInstance()\n   * as attribute so you can manipulate them.\n   * Notice that you have to clone stuff before mutating the inputs.\n   */\n  preCreateRxStorageInstance: [],\n  /**\n   * runs on the document-data before the document is migrated\n   * {\n   *   doc: Object, // original doc-data\n   *   migrated: // migrated doc-data after run through migration-strategies\n   * }\n   */\n  preMigrateDocument: [],\n  /**\n   * runs after the migration of a document has been done\n   */\n  postMigrateDocument: [],\n  /**\n   * runs at the beginning of the destroy-process of a database\n   */\n  preDestroyRxDatabase: [],\n  /**\n   * runs after a database has been removed\n   * @async\n   */\n  postRemoveRxDatabase: [],\n  /**\n   * runs before the replication writes the rows to master\n   * but before the rows have been modified\n   * @async\n   */\n  preReplicationMasterWrite: [],\n  /**\n   * runs after the replication has been sent to the server\n   * but before the new documents have been handled\n   * @async\n   */\n  preReplicationMasterWriteDocumentsHandle: []\n};\nexport function runPluginHooks(hookKey, obj) {\n  if (HOOKS[hookKey]) {\n    HOOKS[hookKey].forEach(fun => fun(obj));\n  }\n}\n\n/**\n * TODO\n * we should not run the hooks in parallel\n * this makes stuff unpredictable.\n */\nexport function runAsyncPluginHooks(hookKey, obj) {\n  return Promise.all(HOOKS[hookKey].map(fun => fun(obj)));\n}\n\n/**\n * used in tests to remove hooks\n */\nexport function _clearHook(type, fun) {\n  HOOKS[type] = HOOKS[type].filter(h => h !== fun);\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,IAAIA,KAAK,GAAG;EACjB;AACF;AACA;AACA;EACEC,cAAc,EAAE,EAAE;EAClB;AACF;AACA;EACEC,mBAAmB,EAAE,EAAE;EACvB;AACF;AACA;AACA;AACA;EACEC,gBAAgB,EAAE,EAAE;EACpBC,qBAAqB,EAAE,EAAE;EACzBC,kBAAkB,EAAE,EAAE;EACtB;AACF;AACA;AACA;EACEC,uBAAuB,EAAE,EAAE;EAC3B;AACF;AACA;AACA;EACEC,sBAAsB,EAAE,EAAE;EAC1B;AACF;AACA;AACA;EACEC,iBAAiB,EAAE,EAAE;EACrB;AACF;AACA;AACA;EACEC,cAAc,EAAE,EAAE;EAClBC,gBAAgB,EAAE,EAAE;EACpB;AACF;AACA;AACA;EACEC,eAAe,EAAE,EAAE;EACnBC,gBAAgB,EAAE,EAAE;EACpB;AACF;AACA;AACA;EACEC,oBAAoB,EAAE,EAAE;EACxB;AACF;AACA;AACA;AACA;AACA;EACEC,0BAA0B,EAAE,EAAE;EAC9B;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,kBAAkB,EAAE,EAAE;EACtB;AACF;AACA;EACEC,mBAAmB,EAAE,EAAE;EACvB;AACF;AACA;EACEC,oBAAoB,EAAE,EAAE;EACxB;AACF;AACA;AACA;EACEC,oBAAoB,EAAE,EAAE;EACxB;AACF;AACA;AACA;AACA;EACEC,yBAAyB,EAAE,EAAE;EAC7B;AACF;AACA;AACA;AACA;EACEC,wCAAwC,EAAE;AAC5C,CAAC;AACD,OAAO,SAASC,cAAcA,CAACC,OAAO,EAAEC,GAAG,EAAE;EAC3C,IAAIvB,KAAK,CAACsB,OAAO,CAAC,EAAE;IAClBtB,KAAK,CAACsB,OAAO,CAAC,CAACE,OAAO,CAACC,GAAG,IAAIA,GAAG,CAACF,GAAG,CAAC,CAAC;EACzC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,mBAAmBA,CAACJ,OAAO,EAAEC,GAAG,EAAE;EAChD,OAAOI,OAAO,CAACC,GAAG,CAAC5B,KAAK,CAACsB,OAAO,CAAC,CAACO,GAAG,CAACJ,GAAG,IAAIA,GAAG,CAACF,GAAG,CAAC,CAAC,CAAC;AACzD;;AAEA;AACA;AACA;AACA,OAAO,SAASO,UAAUA,CAACC,IAAI,EAAEN,GAAG,EAAE;EACpCzB,KAAK,CAAC+B,IAAI,CAAC,GAAG/B,KAAK,CAAC+B,IAAI,CAAC,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKR,GAAG,CAAC;AAClD"},"metadata":{},"sourceType":"module","externalDependencies":[]}