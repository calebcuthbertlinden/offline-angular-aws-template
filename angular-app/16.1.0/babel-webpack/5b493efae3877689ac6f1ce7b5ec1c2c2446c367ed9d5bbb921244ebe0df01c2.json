{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport { overwriteGetterForCaching, isMaybeReadonlyArray, deepEqual } from './plugins/utils';\nimport { newRxError } from './rx-error';\nimport { runPluginHooks } from './hooks';\nimport { defineGetterSetter } from './rx-document';\nimport { fillWithDefaultSettings, getComposedPrimaryKeyOfDocumentData, getFinalFields, getPrimaryFieldOfPrimaryKey, normalizeRxJsonSchema } from './rx-schema-helper';\nimport { overwritable } from './overwritable';\nexport var RxSchema = /*#__PURE__*/function () {\n  function RxSchema(jsonSchema, hashFunction) {\n    this.jsonSchema = jsonSchema;\n    this.hashFunction = hashFunction;\n    this.indexes = getIndexes(this.jsonSchema);\n\n    // primary is always required\n    this.primaryPath = getPrimaryFieldOfPrimaryKey(this.jsonSchema.primaryKey);\n    this.finalFields = getFinalFields(this.jsonSchema);\n  }\n  var _proto = RxSchema.prototype;\n  /**\n   * checks if a given change on a document is allowed\n   * Ensures that:\n   * - final fields are not modified\n   * @throws {Error} if not valid\n   */\n  _proto.validateChange = function validateChange(dataBefore, dataAfter) {\n    this.finalFields.forEach(fieldName => {\n      if (!deepEqual(dataBefore[fieldName], dataAfter[fieldName])) {\n        throw newRxError('DOC9', {\n          dataBefore,\n          dataAfter,\n          fieldName,\n          schema: this.jsonSchema\n        });\n      }\n    });\n  }\n\n  /**\n   * creates the schema-based document-prototype,\n   * see RxCollection.getDocumentPrototype()\n   */;\n  _proto.getDocumentPrototype = function getDocumentPrototype() {\n    var proto = {};\n    defineGetterSetter(this, proto, '');\n    overwriteGetterForCaching(this, 'getDocumentPrototype', () => proto);\n    return proto;\n  };\n  _proto.getPrimaryOfDocumentData = function getPrimaryOfDocumentData(documentData) {\n    return getComposedPrimaryKeyOfDocumentData(this.jsonSchema, documentData);\n  };\n  _createClass(RxSchema, [{\n    key: \"version\",\n    get: function () {\n      return this.jsonSchema.version;\n    }\n  }, {\n    key: \"defaultValues\",\n    get: function () {\n      var values = {};\n      Object.entries(this.jsonSchema.properties).filter(([, v]) => v.hasOwnProperty('default')).forEach(([k, v]) => values[k] = v.default);\n      return overwriteGetterForCaching(this, 'defaultValues', values);\n    }\n\n    /**\n     * @overrides itself on the first call\n     *\n     * TODO this should be a pure function that\n     * caches the hash in a WeakMap.\n     */\n  }, {\n    key: \"hash\",\n    get: function () {\n      return overwriteGetterForCaching(this, 'hash', this.hashFunction(JSON.stringify(this.jsonSchema)));\n    }\n  }]);\n  return RxSchema;\n}();\nexport function getIndexes(jsonSchema) {\n  return (jsonSchema.indexes || []).map(index => isMaybeReadonlyArray(index) ? index : [index]);\n}\n\n/**\n * array with previous version-numbers\n */\nexport function getPreviousVersions(schema) {\n  var version = schema.version ? schema.version : 0;\n  var c = 0;\n  return new Array(version).fill(0).map(() => c++);\n}\nexport function createRxSchema(jsonSchema, hashFunction, runPreCreateHooks = true) {\n  if (runPreCreateHooks) {\n    runPluginHooks('preCreateRxSchema', jsonSchema);\n  }\n  var useJsonSchema = fillWithDefaultSettings(jsonSchema);\n  useJsonSchema = normalizeRxJsonSchema(useJsonSchema);\n  overwritable.deepFreezeWhenDevMode(useJsonSchema);\n  var schema = new RxSchema(useJsonSchema, hashFunction);\n  runPluginHooks('createRxSchema', schema);\n  return schema;\n}\nexport function isRxSchema(obj) {\n  return obj instanceof RxSchema;\n}\n\n/**\n * Used as helper function the generate the document type out of the schema via typescript.\n * @link https://github.com/pubkey/rxdb/discussions/3467\n */\nexport function toTypedRxJsonSchema(schema) {\n  return schema;\n}","map":{"version":3,"names":["_createClass","overwriteGetterForCaching","isMaybeReadonlyArray","deepEqual","newRxError","runPluginHooks","defineGetterSetter","fillWithDefaultSettings","getComposedPrimaryKeyOfDocumentData","getFinalFields","getPrimaryFieldOfPrimaryKey","normalizeRxJsonSchema","overwritable","RxSchema","jsonSchema","hashFunction","indexes","getIndexes","primaryPath","primaryKey","finalFields","_proto","prototype","validateChange","dataBefore","dataAfter","forEach","fieldName","schema","getDocumentPrototype","proto","getPrimaryOfDocumentData","documentData","key","get","version","values","Object","entries","properties","filter","v","hasOwnProperty","k","default","JSON","stringify","map","index","getPreviousVersions","c","Array","fill","createRxSchema","runPreCreateHooks","useJsonSchema","deepFreezeWhenDevMode","isRxSchema","obj","toTypedRxJsonSchema"],"sources":["/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/node_modules/rxdb/dist/es/rx-schema.js"],"sourcesContent":["import _createClass from \"@babel/runtime/helpers/createClass\";\nimport { overwriteGetterForCaching, isMaybeReadonlyArray, deepEqual } from './plugins/utils';\nimport { newRxError } from './rx-error';\nimport { runPluginHooks } from './hooks';\nimport { defineGetterSetter } from './rx-document';\nimport { fillWithDefaultSettings, getComposedPrimaryKeyOfDocumentData, getFinalFields, getPrimaryFieldOfPrimaryKey, normalizeRxJsonSchema } from './rx-schema-helper';\nimport { overwritable } from './overwritable';\nexport var RxSchema = /*#__PURE__*/function () {\n  function RxSchema(jsonSchema, hashFunction) {\n    this.jsonSchema = jsonSchema;\n    this.hashFunction = hashFunction;\n    this.indexes = getIndexes(this.jsonSchema);\n\n    // primary is always required\n    this.primaryPath = getPrimaryFieldOfPrimaryKey(this.jsonSchema.primaryKey);\n    this.finalFields = getFinalFields(this.jsonSchema);\n  }\n  var _proto = RxSchema.prototype;\n  /**\n   * checks if a given change on a document is allowed\n   * Ensures that:\n   * - final fields are not modified\n   * @throws {Error} if not valid\n   */\n  _proto.validateChange = function validateChange(dataBefore, dataAfter) {\n    this.finalFields.forEach(fieldName => {\n      if (!deepEqual(dataBefore[fieldName], dataAfter[fieldName])) {\n        throw newRxError('DOC9', {\n          dataBefore,\n          dataAfter,\n          fieldName,\n          schema: this.jsonSchema\n        });\n      }\n    });\n  }\n\n  /**\n   * creates the schema-based document-prototype,\n   * see RxCollection.getDocumentPrototype()\n   */;\n  _proto.getDocumentPrototype = function getDocumentPrototype() {\n    var proto = {};\n    defineGetterSetter(this, proto, '');\n    overwriteGetterForCaching(this, 'getDocumentPrototype', () => proto);\n    return proto;\n  };\n  _proto.getPrimaryOfDocumentData = function getPrimaryOfDocumentData(documentData) {\n    return getComposedPrimaryKeyOfDocumentData(this.jsonSchema, documentData);\n  };\n  _createClass(RxSchema, [{\n    key: \"version\",\n    get: function () {\n      return this.jsonSchema.version;\n    }\n  }, {\n    key: \"defaultValues\",\n    get: function () {\n      var values = {};\n      Object.entries(this.jsonSchema.properties).filter(([, v]) => v.hasOwnProperty('default')).forEach(([k, v]) => values[k] = v.default);\n      return overwriteGetterForCaching(this, 'defaultValues', values);\n    }\n\n    /**\n     * @overrides itself on the first call\n     *\n     * TODO this should be a pure function that\n     * caches the hash in a WeakMap.\n     */\n  }, {\n    key: \"hash\",\n    get: function () {\n      return overwriteGetterForCaching(this, 'hash', this.hashFunction(JSON.stringify(this.jsonSchema)));\n    }\n  }]);\n  return RxSchema;\n}();\nexport function getIndexes(jsonSchema) {\n  return (jsonSchema.indexes || []).map(index => isMaybeReadonlyArray(index) ? index : [index]);\n}\n\n/**\n * array with previous version-numbers\n */\nexport function getPreviousVersions(schema) {\n  var version = schema.version ? schema.version : 0;\n  var c = 0;\n  return new Array(version).fill(0).map(() => c++);\n}\nexport function createRxSchema(jsonSchema, hashFunction, runPreCreateHooks = true) {\n  if (runPreCreateHooks) {\n    runPluginHooks('preCreateRxSchema', jsonSchema);\n  }\n  var useJsonSchema = fillWithDefaultSettings(jsonSchema);\n  useJsonSchema = normalizeRxJsonSchema(useJsonSchema);\n  overwritable.deepFreezeWhenDevMode(useJsonSchema);\n  var schema = new RxSchema(useJsonSchema, hashFunction);\n  runPluginHooks('createRxSchema', schema);\n  return schema;\n}\nexport function isRxSchema(obj) {\n  return obj instanceof RxSchema;\n}\n\n/**\n * Used as helper function the generate the document type out of the schema via typescript.\n * @link https://github.com/pubkey/rxdb/discussions/3467\n */\nexport function toTypedRxJsonSchema(schema) {\n  return schema;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}