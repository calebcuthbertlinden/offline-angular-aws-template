{"ast":null,"code":"import _asyncToGenerator from \"/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { arrayBufferToBase64 } from './utils-base64';\n\n/**\n * Since RxDB 13.0.0 we only use Blob instead of falling back to Buffer,\n * because Node.js >18 supports Blobs anyway.\n */\n/**\n * depending if we are on node or browser,\n * we have to use Buffer(node) or Blob(browser)\n */\nexport function createBlob(data, type) {\n  var blob = new Blob([data], {\n    type\n  });\n  return blob;\n}\nexport function createBlobFromBase64(_x, _x2) {\n  return _createBlobFromBase.apply(this, arguments);\n}\nfunction _createBlobFromBase() {\n  _createBlobFromBase = _asyncToGenerator(function* (base64String, type) {\n    var base64Response = yield fetch(\"data:\" + type + \";base64,\" + base64String);\n    var blob = yield base64Response.blob();\n    return blob;\n  });\n  return _createBlobFromBase.apply(this, arguments);\n}\nexport function isBlob(data) {\n  if (data instanceof Blob || typeof Buffer !== 'undefined' && Buffer.isBuffer(data)) {\n    return true;\n  } else {\n    return false;\n  }\n}\nexport function blobToString(blob) {\n  /**\n   * in the electron-renderer we have a typed array instead of a blob\n   * so we have to transform it.\n   * @link https://github.com/pubkey/rxdb/issues/1371\n   */\n  var blobType = Object.prototype.toString.call(blob);\n  if (blobType === '[object Uint8Array]') {\n    blob = new Blob([blob]);\n  }\n  if (typeof blob === 'string') {\n    return Promise.resolve(blob);\n  }\n  return blob.text();\n}\nexport function blobToBase64String(_x3) {\n  return _blobToBase64String.apply(this, arguments);\n}\nfunction _blobToBase64String() {\n  _blobToBase64String = _asyncToGenerator(function* (blob) {\n    if (typeof blob === 'string') {\n      return blob;\n    }\n\n    /**\n     * in the electron-renderer we have a typed array instead of a blob\n     * so we have to transform it.\n     * @link https://github.com/pubkey/rxdb/issues/1371\n     */\n    var blobType = Object.prototype.toString.call(blob);\n    if (blobType === '[object Uint8Array]') {\n      blob = new Blob([blob]);\n    }\n    var arrayBuffer = yield fetch(URL.createObjectURL(blob)).then(res => res.arrayBuffer());\n    return arrayBufferToBase64(arrayBuffer);\n  });\n  return _blobToBase64String.apply(this, arguments);\n}\nexport function getBlobSize(blob) {\n  return blob.size;\n}","map":{"version":3,"names":["arrayBufferToBase64","createBlob","data","type","blob","Blob","createBlobFromBase64","_x","_x2","_createBlobFromBase","apply","arguments","_asyncToGenerator","base64String","base64Response","fetch","isBlob","Buffer","isBuffer","blobToString","blobType","Object","prototype","toString","call","Promise","resolve","text","blobToBase64String","_x3","_blobToBase64String","arrayBuffer","URL","createObjectURL","then","res","getBlobSize","size"],"sources":["/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/node_modules/rxdb/dist/es/plugins/utils/utils-blob.js"],"sourcesContent":["import { arrayBufferToBase64 } from './utils-base64';\n\n/**\n * Since RxDB 13.0.0 we only use Blob instead of falling back to Buffer,\n * because Node.js >18 supports Blobs anyway.\n */\n/**\n * depending if we are on node or browser,\n * we have to use Buffer(node) or Blob(browser)\n */\nexport function createBlob(data, type) {\n  var blob = new Blob([data], {\n    type\n  });\n  return blob;\n}\nexport async function createBlobFromBase64(base64String, type) {\n  var base64Response = await fetch(\"data:\" + type + \";base64,\" + base64String);\n  var blob = await base64Response.blob();\n  return blob;\n}\nexport function isBlob(data) {\n  if (data instanceof Blob || typeof Buffer !== 'undefined' && Buffer.isBuffer(data)) {\n    return true;\n  } else {\n    return false;\n  }\n}\nexport function blobToString(blob) {\n  /**\n   * in the electron-renderer we have a typed array instead of a blob\n   * so we have to transform it.\n   * @link https://github.com/pubkey/rxdb/issues/1371\n   */\n  var blobType = Object.prototype.toString.call(blob);\n  if (blobType === '[object Uint8Array]') {\n    blob = new Blob([blob]);\n  }\n  if (typeof blob === 'string') {\n    return Promise.resolve(blob);\n  }\n  return blob.text();\n}\nexport async function blobToBase64String(blob) {\n  if (typeof blob === 'string') {\n    return blob;\n  }\n\n  /**\n   * in the electron-renderer we have a typed array instead of a blob\n   * so we have to transform it.\n   * @link https://github.com/pubkey/rxdb/issues/1371\n   */\n  var blobType = Object.prototype.toString.call(blob);\n  if (blobType === '[object Uint8Array]') {\n    blob = new Blob([blob]);\n  }\n  var arrayBuffer = await fetch(URL.createObjectURL(blob)).then(res => res.arrayBuffer());\n  return arrayBufferToBase64(arrayBuffer);\n}\nexport function getBlobSize(blob) {\n  return blob.size;\n}\n"],"mappings":";AAAA,SAASA,mBAAmB,QAAQ,gBAAgB;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAACC,IAAI,EAAEC,IAAI,EAAE;EACrC,IAAIC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACH,IAAI,CAAC,EAAE;IAC1BC;EACF,CAAC,CAAC;EACF,OAAOC,IAAI;AACb;AACA,gBAAsBE,oBAAoBA,CAAAC,EAAA,EAAAC,GAAA;EAAA,OAAAC,mBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAIzC,SAAAF,oBAAA;EAAAA,mBAAA,GAAAG,iBAAA,CAJM,WAAoCC,YAAY,EAAEV,IAAI,EAAE;IAC7D,IAAIW,cAAc,SAASC,KAAK,CAAC,OAAO,GAAGZ,IAAI,GAAG,UAAU,GAAGU,YAAY,CAAC;IAC5E,IAAIT,IAAI,SAASU,cAAc,CAACV,IAAI,CAAC,CAAC;IACtC,OAAOA,IAAI;EACb,CAAC;EAAA,OAAAK,mBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AACD,OAAO,SAASK,MAAMA,CAACd,IAAI,EAAE;EAC3B,IAAIA,IAAI,YAAYG,IAAI,IAAI,OAAOY,MAAM,KAAK,WAAW,IAAIA,MAAM,CAACC,QAAQ,CAAChB,IAAI,CAAC,EAAE;IAClF,OAAO,IAAI;EACb,CAAC,MAAM;IACL,OAAO,KAAK;EACd;AACF;AACA,OAAO,SAASiB,YAAYA,CAACf,IAAI,EAAE;EACjC;AACF;AACA;AACA;AACA;EACE,IAAIgB,QAAQ,GAAGC,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACpB,IAAI,CAAC;EACnD,IAAIgB,QAAQ,KAAK,qBAAqB,EAAE;IACtChB,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACD,IAAI,CAAC,CAAC;EACzB;EACA,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAC5B,OAAOqB,OAAO,CAACC,OAAO,CAACtB,IAAI,CAAC;EAC9B;EACA,OAAOA,IAAI,CAACuB,IAAI,CAAC,CAAC;AACpB;AACA,gBAAsBC,kBAAkBA,CAAAC,GAAA;EAAA,OAAAC,mBAAA,CAAApB,KAAA,OAAAC,SAAA;AAAA;AAgBvC,SAAAmB,oBAAA;EAAAA,mBAAA,GAAAlB,iBAAA,CAhBM,WAAkCR,IAAI,EAAE;IAC7C,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;MAC5B,OAAOA,IAAI;IACb;;IAEA;AACF;AACA;AACA;AACA;IACE,IAAIgB,QAAQ,GAAGC,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACpB,IAAI,CAAC;IACnD,IAAIgB,QAAQ,KAAK,qBAAqB,EAAE;MACtChB,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACD,IAAI,CAAC,CAAC;IACzB;IACA,IAAI2B,WAAW,SAAShB,KAAK,CAACiB,GAAG,CAACC,eAAe,CAAC7B,IAAI,CAAC,CAAC,CAAC8B,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACJ,WAAW,CAAC,CAAC,CAAC;IACvF,OAAO/B,mBAAmB,CAAC+B,WAAW,CAAC;EACzC,CAAC;EAAA,OAAAD,mBAAA,CAAApB,KAAA,OAAAC,SAAA;AAAA;AACD,OAAO,SAASyB,WAAWA,CAAChC,IAAI,EAAE;EAChC,OAAOA,IAAI,CAACiC,IAAI;AAClB"},"metadata":{},"sourceType":"module","externalDependencies":[]}