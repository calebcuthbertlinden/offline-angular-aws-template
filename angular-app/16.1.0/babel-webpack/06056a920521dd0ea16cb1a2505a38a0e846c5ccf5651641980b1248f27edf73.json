{"ast":null,"code":"import _defineProperty from \"/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nlet _Symbol$iterator;\nimport { Aggregator } from \"./aggregator\";\nimport { compose, Lazy } from \"./lazy\";\nimport { isObject } from \"./util\";\n/**\n * Cursor to iterate and perform filtering on matched objects.\n * This object must not be used directly. A cursor may be obtaine from calling `find()` on an instance of `Query`.\n *\n * @param collection The input source of the collection\n * @param predicate A predicate function to test documents\n * @param projection A projection criteria\n * @param options Options\n * @constructor\n */\n_Symbol$iterator = Symbol.iterator;\nexport class Cursor {\n  constructor(source, predicate, projection, options) {\n    _defineProperty(this, \"source\", void 0);\n    _defineProperty(this, \"predicate\", void 0);\n    _defineProperty(this, \"projection\", void 0);\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"operators\", []);\n    _defineProperty(this, \"result\", null);\n    _defineProperty(this, \"buffer\", []);\n    this.source = source;\n    this.predicate = predicate;\n    this.projection = projection;\n    this.options = options;\n  }\n  /** Returns the iterator from running the query */\n  fetch() {\n    if (this.result) return this.result;\n    // add projection operator\n    if (isObject(this.projection)) {\n      this.operators.push({\n        $project: this.projection\n      });\n    }\n    // filter collection\n    this.result = Lazy(this.source).filter(this.predicate);\n    if (this.operators.length > 0) {\n      this.result = new Aggregator(this.operators, this.options).stream(this.result);\n    }\n    return this.result;\n  }\n  /** Returns an iterator with the buffered data included */\n  fetchAll() {\n    const buffered = Lazy([...this.buffer]);\n    this.buffer = [];\n    return compose(buffered, this.fetch());\n  }\n  /**\n   * Return remaining objects in the cursor as an array. This method exhausts the cursor\n   * @returns {Array}\n   */\n  all() {\n    return this.fetchAll().value();\n  }\n  /**\n   * Returns the number of objects return in the cursor. This method exhausts the cursor\n   * @returns {Number}\n   */\n  count() {\n    return this.all().length;\n  }\n  /**\n   * Returns a cursor that begins returning results only after passing or skipping a number of documents.\n   * @param {Number} n the number of results to skip.\n   * @return {Cursor} Returns the cursor, so you can chain this call.\n   */\n  skip(n) {\n    this.operators.push({\n      $skip: n\n    });\n    return this;\n  }\n  /**\n   * Constrains the size of a cursor's result set.\n   * @param {Number} n the number of results to limit to.\n   * @return {Cursor} Returns the cursor, so you can chain this call.\n   */\n  limit(n) {\n    this.operators.push({\n      $limit: n\n    });\n    return this;\n  }\n  /**\n   * Returns results ordered according to a sort specification.\n   * @param {Object} modifier an object of key and values specifying the sort order. 1 for ascending and -1 for descending\n   * @return {Cursor} Returns the cursor, so you can chain this call.\n   */\n  sort(modifier) {\n    this.operators.push({\n      $sort: modifier\n    });\n    return this;\n  }\n  /**\n   * Specifies the collation for the cursor returned by the `mingo.Query.find`\n   * @param {*} spec\n   */\n  collation(spec) {\n    this.options = {\n      ...this.options,\n      collation: spec\n    };\n    return this;\n  }\n  /**\n   * Returns the next document in a cursor.\n   * @returns {Object | Boolean}\n   */\n  next() {\n    // yield value obtains in hasNext()\n    if (this.buffer.length > 0) {\n      return this.buffer.pop();\n    }\n    const o = this.fetch().next();\n    if (o.done) return;\n    return o.value;\n  }\n  /**\n   * Returns true if the cursor has documents and can be iterated.\n   * @returns {boolean}\n   */\n  hasNext() {\n    // there is a value in the buffer\n    if (this.buffer.length > 0) return true;\n    const o = this.fetch().next();\n    if (o.done) return false;\n    this.buffer.push(o.value);\n    return true;\n  }\n  /**\n   * Applies a function to each document in a cursor and collects the return values in an array.\n   * @param callback\n   * @returns {Array}\n   */\n  map(callback) {\n    return this.all().map(callback);\n  }\n  /**\n   * Applies a JavaScript function for every document in a cursor.\n   * @param callback\n   */\n  forEach(callback) {\n    this.all().forEach(callback);\n  }\n  [_Symbol$iterator]() {\n    return this.fetchAll();\n  }\n}","map":{"version":3,"names":["Aggregator","compose","Lazy","isObject","_Symbol$iterator","Symbol","iterator","Cursor","constructor","source","predicate","projection","options","_defineProperty","fetch","result","operators","push","$project","filter","length","stream","fetchAll","buffered","buffer","all","value","count","skip","n","$skip","limit","$limit","sort","modifier","$sort","collation","spec","next","pop","o","done","hasNext","map","callback","forEach"],"sources":["/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/node_modules/mingo/es/cursor.js"],"sourcesContent":["import { Aggregator } from \"./aggregator\";\nimport { compose, Lazy } from \"./lazy\";\nimport { isObject } from \"./util\";\n/**\n * Cursor to iterate and perform filtering on matched objects.\n * This object must not be used directly. A cursor may be obtaine from calling `find()` on an instance of `Query`.\n *\n * @param collection The input source of the collection\n * @param predicate A predicate function to test documents\n * @param projection A projection criteria\n * @param options Options\n * @constructor\n */\nexport class Cursor {\n    source;\n    predicate;\n    projection;\n    options;\n    operators = [];\n    result = null;\n    buffer = [];\n    constructor(source, predicate, projection, options) {\n        this.source = source;\n        this.predicate = predicate;\n        this.projection = projection;\n        this.options = options;\n    }\n    /** Returns the iterator from running the query */\n    fetch() {\n        if (this.result)\n            return this.result;\n        // add projection operator\n        if (isObject(this.projection)) {\n            this.operators.push({ $project: this.projection });\n        }\n        // filter collection\n        this.result = Lazy(this.source).filter(this.predicate);\n        if (this.operators.length > 0) {\n            this.result = new Aggregator(this.operators, this.options).stream(this.result);\n        }\n        return this.result;\n    }\n    /** Returns an iterator with the buffered data included */\n    fetchAll() {\n        const buffered = Lazy([...this.buffer]);\n        this.buffer = [];\n        return compose(buffered, this.fetch());\n    }\n    /**\n     * Return remaining objects in the cursor as an array. This method exhausts the cursor\n     * @returns {Array}\n     */\n    all() {\n        return this.fetchAll().value();\n    }\n    /**\n     * Returns the number of objects return in the cursor. This method exhausts the cursor\n     * @returns {Number}\n     */\n    count() {\n        return this.all().length;\n    }\n    /**\n     * Returns a cursor that begins returning results only after passing or skipping a number of documents.\n     * @param {Number} n the number of results to skip.\n     * @return {Cursor} Returns the cursor, so you can chain this call.\n     */\n    skip(n) {\n        this.operators.push({ $skip: n });\n        return this;\n    }\n    /**\n     * Constrains the size of a cursor's result set.\n     * @param {Number} n the number of results to limit to.\n     * @return {Cursor} Returns the cursor, so you can chain this call.\n     */\n    limit(n) {\n        this.operators.push({ $limit: n });\n        return this;\n    }\n    /**\n     * Returns results ordered according to a sort specification.\n     * @param {Object} modifier an object of key and values specifying the sort order. 1 for ascending and -1 for descending\n     * @return {Cursor} Returns the cursor, so you can chain this call.\n     */\n    sort(modifier) {\n        this.operators.push({ $sort: modifier });\n        return this;\n    }\n    /**\n     * Specifies the collation for the cursor returned by the `mingo.Query.find`\n     * @param {*} spec\n     */\n    collation(spec) {\n        this.options = { ...this.options, collation: spec };\n        return this;\n    }\n    /**\n     * Returns the next document in a cursor.\n     * @returns {Object | Boolean}\n     */\n    next() {\n        // yield value obtains in hasNext()\n        if (this.buffer.length > 0) {\n            return this.buffer.pop();\n        }\n        const o = this.fetch().next();\n        if (o.done)\n            return;\n        return o.value;\n    }\n    /**\n     * Returns true if the cursor has documents and can be iterated.\n     * @returns {boolean}\n     */\n    hasNext() {\n        // there is a value in the buffer\n        if (this.buffer.length > 0)\n            return true;\n        const o = this.fetch().next();\n        if (o.done)\n            return false;\n        this.buffer.push(o.value);\n        return true;\n    }\n    /**\n     * Applies a function to each document in a cursor and collects the return values in an array.\n     * @param callback\n     * @returns {Array}\n     */\n    map(callback) {\n        return this.all().map(callback);\n    }\n    /**\n     * Applies a JavaScript function for every document in a cursor.\n     * @param callback\n     */\n    forEach(callback) {\n        this.all().forEach(callback);\n    }\n    [Symbol.iterator]() {\n        return this.fetchAll();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}