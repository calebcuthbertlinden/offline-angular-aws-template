{"ast":null,"code":"import { Branches } from './branches';\nimport { Parents } from './parents';\nimport { AbstractNode } from './abstract-node';\nexport class InternalNode extends AbstractNode {\n  constructor(level, rootNode, parent) {\n    super(level, rootNode, 'InternalNode');\n    this.branches = new Branches(this);\n    this.parents = new Parents(this);\n    this.parents.add(parent);\n  }\n  /**\n   * by the reduction-rule of bdd,\n   * if both branches are equal,\n   * we can remove this node from the bdd\n   */\n  applyReductionRule() {\n    // console.log('applyReductionRule() ' + this.id);\n    if (this.branches.hasEqualBranches()) {\n      this.ensureNotDeleted('applyReductionRule');\n      const keepBranch = this.branches.getBranch('0');\n      // move own parents to keepBranch\n      const ownParents = this.parents.getAll();\n      ownParents.forEach(parent => {\n        // console.log('ownParent: ' + parent.id);\n        const branchKey = parent.branches.getKeyOfNode(this);\n        parent.branches.setBranch(branchKey, keepBranch);\n        // remove parents from own list\n        // this will auto-remove the connection to the other '1'-branch\n        this.parents.remove(parent);\n        // if parent has now two equal branches,\n        // we have to apply the reduction again\n        // to ensure we end in a valid state\n        if (parent.branches.areBranchesStrictEqual() && parent.isInternalNode()) {\n          parent.applyReductionRule();\n        }\n      });\n      return true;\n    }\n    return false;\n  }\n}","map":{"version":3,"names":["Branches","Parents","AbstractNode","InternalNode","constructor","level","rootNode","parent","branches","parents","add","applyReductionRule","hasEqualBranches","ensureNotDeleted","keepBranch","getBranch","ownParents","getAll","forEach","branchKey","getKeyOfNode","setBranch","remove","areBranchesStrictEqual","isInternalNode"],"sources":["/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/node_modules/binary-decision-diagram/dist/es/internal-node.js"],"sourcesContent":["import { Branches } from './branches';\nimport { Parents } from './parents';\nimport { AbstractNode } from './abstract-node';\nexport class InternalNode extends AbstractNode {\n    constructor(level, rootNode, parent) {\n        super(level, rootNode, 'InternalNode');\n        this.branches = new Branches(this);\n        this.parents = new Parents(this);\n        this.parents.add(parent);\n    }\n    /**\n     * by the reduction-rule of bdd,\n     * if both branches are equal,\n     * we can remove this node from the bdd\n     */\n    applyReductionRule() {\n        // console.log('applyReductionRule() ' + this.id);\n        if (this.branches.hasEqualBranches()) {\n            this.ensureNotDeleted('applyReductionRule');\n            const keepBranch = this.branches.getBranch('0');\n            // move own parents to keepBranch\n            const ownParents = this.parents.getAll();\n            ownParents.forEach(parent => {\n                // console.log('ownParent: ' + parent.id);\n                const branchKey = parent.branches.getKeyOfNode(this);\n                parent.branches.setBranch(branchKey, keepBranch);\n                // remove parents from own list\n                // this will auto-remove the connection to the other '1'-branch\n                this.parents.remove(parent);\n                // if parent has now two equal branches,\n                // we have to apply the reduction again\n                // to ensure we end in a valid state\n                if (parent.branches.areBranchesStrictEqual() && parent.isInternalNode()) {\n                    parent.applyReductionRule();\n                }\n            });\n            return true;\n        }\n        return false;\n    }\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,YAAY;AACrC,SAASC,OAAO,QAAQ,WAAW;AACnC,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,OAAO,MAAMC,YAAY,SAASD,YAAY,CAAC;EAC3CE,WAAWA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,MAAM,EAAE;IACjC,KAAK,CAACF,KAAK,EAAEC,QAAQ,EAAE,cAAc,CAAC;IACtC,IAAI,CAACE,QAAQ,GAAG,IAAIR,QAAQ,CAAC,IAAI,CAAC;IAClC,IAAI,CAACS,OAAO,GAAG,IAAIR,OAAO,CAAC,IAAI,CAAC;IAChC,IAAI,CAACQ,OAAO,CAACC,GAAG,CAACH,MAAM,CAAC;EAC5B;EACA;AACJ;AACA;AACA;AACA;EACII,kBAAkBA,CAAA,EAAG;IACjB;IACA,IAAI,IAAI,CAACH,QAAQ,CAACI,gBAAgB,CAAC,CAAC,EAAE;MAClC,IAAI,CAACC,gBAAgB,CAAC,oBAAoB,CAAC;MAC3C,MAAMC,UAAU,GAAG,IAAI,CAACN,QAAQ,CAACO,SAAS,CAAC,GAAG,CAAC;MAC/C;MACA,MAAMC,UAAU,GAAG,IAAI,CAACP,OAAO,CAACQ,MAAM,CAAC,CAAC;MACxCD,UAAU,CAACE,OAAO,CAACX,MAAM,IAAI;QACzB;QACA,MAAMY,SAAS,GAAGZ,MAAM,CAACC,QAAQ,CAACY,YAAY,CAAC,IAAI,CAAC;QACpDb,MAAM,CAACC,QAAQ,CAACa,SAAS,CAACF,SAAS,EAAEL,UAAU,CAAC;QAChD;QACA;QACA,IAAI,CAACL,OAAO,CAACa,MAAM,CAACf,MAAM,CAAC;QAC3B;QACA;QACA;QACA,IAAIA,MAAM,CAACC,QAAQ,CAACe,sBAAsB,CAAC,CAAC,IAAIhB,MAAM,CAACiB,cAAc,CAAC,CAAC,EAAE;UACrEjB,MAAM,CAACI,kBAAkB,CAAC,CAAC;QAC/B;MACJ,CAAC,CAAC;MACF,OAAO,IAAI;IACf;IACA,OAAO,KAAK;EAChB;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}