{"ast":null,"code":"/**\n * run some tests on the bdd\n * to ensure everything is correct\n */\nexport function ensureCorrectBdd(bdd) {\n  const jsonString = JSON.stringify(bdd.toJSON(true));\n  let allNodes = [];\n  const nodesById = new Map();\n  bdd.getLevels().forEach(level => {\n    const levelNodes = bdd.getNodesOfLevel(level);\n    levelNodes.forEach(node => {\n      nodesById.set(node.id, node);\n    });\n    allNodes = allNodes.concat(levelNodes);\n  });\n  const recursiveNodes = getNodesRecursive(bdd);\n  if (allNodes.length !== recursiveNodes.size) {\n    const allNodesIds = allNodes.map(n => n.id).sort();\n    const recursiveNodesIds = Array.from(recursiveNodes).map(n => n.id).sort();\n    const nodesOnlyInRecursive = recursiveNodesIds.filter(id => !allNodesIds.includes(id));\n    //        console.log(JSON.stringify(allNodes.map(n => n.id).sort(), null, 2));\n    //      console.log(JSON.stringify(Array.from(recursiveNodes).map(n => n.id).sort(), null, 2));\n    if (recursiveNodes.size > allNodes.length) {\n      const firstId = nodesOnlyInRecursive[0];\n      const referenceToFirst = allNodes.find(n => {\n        if (n.isInternalNode()) {\n          return n.branches.hasNodeIdAsBranch(firstId);\n        }\n        return false;\n      });\n      console.log('referenceToFirst:');\n      referenceToFirst === null || referenceToFirst === void 0 ? void 0 : referenceToFirst.log();\n    }\n    throw new Error('ensureCorrectBdd() ' + 'nodes in list not equal size to recursive nodes ' + 'allNodes: ' + allNodes.length + ' ' + 'recursiveNodes: ' + recursiveNodes.size + ' ' + 'nodesOnlyInRecursive: ' + nodesOnlyInRecursive.join(', ') + ' ');\n  }\n  allNodes.forEach(node => {\n    if (node.isRootNode()) {\n      return;\n    }\n    const useNode = node;\n    if (node.deleted) {\n      throw new Error('ensureCorrectBdd() ' + 'bdd includes a deleted node');\n    }\n    // each node should have a parent\n    if (useNode.parents.size === 0) {\n      throw new Error('ensureCorrectBdd() ' + 'node has no parent ' + useNode.id);\n    }\n    if (useNode.isInternalNode()) {\n      const internalNode = useNode;\n      const bothBranches = internalNode.branches.getBothBranches();\n      // a node should not have 2 equal branches\n      if (internalNode.branches.areBranchesStrictEqual()) {\n        throw new Error('ensureCorrectBdd() ' + 'node has two equal branches: ' + bothBranches.map(n => n.id).join(', '));\n      }\n      // each branch should have the node as parent\n      bothBranches.forEach(branch => {\n        if (!branch.parents.has(internalNode)) {\n          throw new Error('ensureCorrectBdd() ' + 'branch must have the node as parent');\n        }\n      });\n    }\n    // each parent should have the child as branch\n    useNode.parents.getAll().forEach(parent => {\n      if (!parent.branches.hasBranchAsNode(useNode)) {\n        throw new Error('ensureCorrectBdd() ' + 'parent node does not have child as branch');\n      }\n    });\n  });\n  if (jsonString.includes('\"deleted\":true')) {\n    throw new Error('ensureCorrectBdd() ' + 'bdd includes a deleted node');\n  }\n}\nexport function getNodesRecursive(node, set = new Set()) {\n  set.add(node);\n  if (!node.isLeafNode()) {\n    const useNode = node;\n    const branch1 = useNode.branches.getBranch('0');\n    set.add(branch1);\n    getNodesRecursive(branch1, set);\n    const branch2 = useNode.branches.getBranch('1');\n    set.add(branch2);\n    getNodesRecursive(branch2, set);\n  }\n  return set;\n}","map":{"version":3,"names":["ensureCorrectBdd","bdd","jsonString","JSON","stringify","toJSON","allNodes","nodesById","Map","getLevels","forEach","level","levelNodes","getNodesOfLevel","node","set","id","concat","recursiveNodes","getNodesRecursive","length","size","allNodesIds","map","n","sort","recursiveNodesIds","Array","from","nodesOnlyInRecursive","filter","includes","firstId","referenceToFirst","find","isInternalNode","branches","hasNodeIdAsBranch","console","log","Error","join","isRootNode","useNode","deleted","parents","internalNode","bothBranches","getBothBranches","areBranchesStrictEqual","branch","has","getAll","parent","hasBranchAsNode","Set","add","isLeafNode","branch1","getBranch","branch2"],"sources":["/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/node_modules/binary-decision-diagram/dist/es/ensure-correct-bdd.js"],"sourcesContent":["/**\n * run some tests on the bdd\n * to ensure everything is correct\n */\nexport function ensureCorrectBdd(bdd) {\n    const jsonString = JSON.stringify(bdd.toJSON(true));\n    let allNodes = [];\n    const nodesById = new Map();\n    bdd.getLevels().forEach(level => {\n        const levelNodes = bdd.getNodesOfLevel(level);\n        levelNodes.forEach(node => {\n            nodesById.set(node.id, node);\n        });\n        allNodes = allNodes.concat(levelNodes);\n    });\n    const recursiveNodes = getNodesRecursive(bdd);\n    if (allNodes.length !== recursiveNodes.size) {\n        const allNodesIds = allNodes.map(n => n.id).sort();\n        const recursiveNodesIds = Array.from(recursiveNodes).map(n => n.id).sort();\n        const nodesOnlyInRecursive = recursiveNodesIds.filter(id => !allNodesIds.includes(id));\n        //        console.log(JSON.stringify(allNodes.map(n => n.id).sort(), null, 2));\n        //      console.log(JSON.stringify(Array.from(recursiveNodes).map(n => n.id).sort(), null, 2));\n        if (recursiveNodes.size > allNodes.length) {\n            const firstId = nodesOnlyInRecursive[0];\n            const referenceToFirst = allNodes.find(n => {\n                if (n.isInternalNode()) {\n                    return n.branches.hasNodeIdAsBranch(firstId);\n                }\n                return false;\n            });\n            console.log('referenceToFirst:');\n            referenceToFirst === null || referenceToFirst === void 0 ? void 0 : referenceToFirst.log();\n        }\n        throw new Error('ensureCorrectBdd() ' +\n            'nodes in list not equal size to recursive nodes ' +\n            'allNodes: ' + allNodes.length + ' ' +\n            'recursiveNodes: ' + recursiveNodes.size + ' ' +\n            'nodesOnlyInRecursive: ' + nodesOnlyInRecursive.join(', ') + ' ');\n    }\n    allNodes.forEach(node => {\n        if (node.isRootNode()) {\n            return;\n        }\n        const useNode = node;\n        if (node.deleted) {\n            throw new Error('ensureCorrectBdd() ' +\n                'bdd includes a deleted node');\n        }\n        // each node should have a parent\n        if (useNode.parents.size === 0) {\n            throw new Error('ensureCorrectBdd() ' +\n                'node has no parent ' + useNode.id);\n        }\n        if (useNode.isInternalNode()) {\n            const internalNode = useNode;\n            const bothBranches = internalNode.branches.getBothBranches();\n            // a node should not have 2 equal branches\n            if (internalNode.branches.areBranchesStrictEqual()) {\n                throw new Error('ensureCorrectBdd() ' +\n                    'node has two equal branches: ' +\n                    bothBranches.map(n => n.id).join(', '));\n            }\n            // each branch should have the node as parent\n            bothBranches.forEach(branch => {\n                if (!branch.parents.has(internalNode)) {\n                    throw new Error('ensureCorrectBdd() ' +\n                        'branch must have the node as parent');\n                }\n            });\n        }\n        // each parent should have the child as branch\n        useNode.parents.getAll().forEach(parent => {\n            if (!parent.branches.hasBranchAsNode(useNode)) {\n                throw new Error('ensureCorrectBdd() ' +\n                    'parent node does not have child as branch');\n            }\n        });\n    });\n    if (jsonString.includes('\"deleted\":true')) {\n        throw new Error('ensureCorrectBdd() ' +\n            'bdd includes a deleted node');\n    }\n}\nexport function getNodesRecursive(node, set = new Set()) {\n    set.add(node);\n    if (!node.isLeafNode()) {\n        const useNode = node;\n        const branch1 = useNode.branches.getBranch('0');\n        set.add(branch1);\n        getNodesRecursive(branch1, set);\n        const branch2 = useNode.branches.getBranch('1');\n        set.add(branch2);\n        getNodesRecursive(branch2, set);\n    }\n    return set;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}