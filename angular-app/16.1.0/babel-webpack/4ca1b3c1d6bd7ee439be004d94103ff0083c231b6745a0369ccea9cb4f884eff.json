{"ast":null,"code":"import _asyncToGenerator from \"/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { createRevision, flatClone, getDefaultRevision, getDefaultRxDocumentMeta, now } from './plugins/utils';\nimport { fillObjectWithDefaults, fillPrimaryKey } from './rx-schema-helper';\nimport { runAsyncPluginHooks } from './hooks';\nimport { getAllCollectionDocuments } from './rx-database-internal-store';\nimport { flatCloneDocWithMeta } from './rx-storage-helper';\nimport { overwritable } from './overwritable';\n\n/**\n * fills in the default data.\n * This also clones the data.\n */\nexport function fillObjectDataBeforeInsert(schema, data) {\n  data = flatClone(data);\n  data = fillObjectWithDefaults(schema, data);\n  data = fillPrimaryKey(schema.primaryPath, schema.jsonSchema, data);\n  data._meta = getDefaultRxDocumentMeta();\n  if (!data.hasOwnProperty('_deleted')) {\n    data._deleted = false;\n  }\n  if (!data.hasOwnProperty('_attachments')) {\n    data._attachments = {};\n  }\n  if (!data.hasOwnProperty('_rev')) {\n    data._rev = getDefaultRevision();\n  }\n  return data;\n}\n\n/**\n * Creates the storage instances that are used internally in the collection\n */\nexport function createRxCollectionStorageInstance(_x, _x2) {\n  return _createRxCollectionStorageInstance.apply(this, arguments);\n}\n\n/**\n * Removes the main storage of the collection\n * and all connected storages like the ones from the replication meta etc.\n */\nfunction _createRxCollectionStorageInstance() {\n  _createRxCollectionStorageInstance = _asyncToGenerator(function* (rxDatabase, storageInstanceCreationParams) {\n    storageInstanceCreationParams.multiInstance = rxDatabase.multiInstance;\n    var storageInstance = yield rxDatabase.storage.createStorageInstance(storageInstanceCreationParams);\n    return storageInstance;\n  });\n  return _createRxCollectionStorageInstance.apply(this, arguments);\n}\nexport function removeCollectionStorages(_x3, _x4, _x5, _x6, _x7, _x8) {\n  return _removeCollectionStorages.apply(this, arguments);\n}\nfunction _removeCollectionStorages() {\n  _removeCollectionStorages = _asyncToGenerator(function* (storage, databaseInternalStorage, databaseInstanceToken, databaseName, collectionName,\n  /**\n   * If no hash function is provided,\n   * we assume that the whole internal store is removed anyway\n   * so we do not have to delete the meta documents.\n   */\n  hashFunction) {\n    var allCollectionMetaDocs = yield getAllCollectionDocuments(storage.statics, databaseInternalStorage);\n    var relevantCollectionMetaDocs = allCollectionMetaDocs.filter(metaDoc => metaDoc.data.name === collectionName);\n    var removeStorages = [];\n    relevantCollectionMetaDocs.forEach(metaDoc => {\n      removeStorages.push({\n        collectionName: metaDoc.data.name,\n        schema: metaDoc.data.schema,\n        isCollection: true\n      });\n      metaDoc.data.connectedStorages.forEach(row => removeStorages.push({\n        collectionName: row.collectionName,\n        isCollection: false,\n        schema: row.schema\n      }));\n    });\n\n    // ensure uniqueness\n    var alreadyAdded = new Set();\n    removeStorages = removeStorages.filter(row => {\n      var key = row.collectionName + '||' + row.schema.version;\n      if (alreadyAdded.has(key)) {\n        return false;\n      } else {\n        alreadyAdded.add(key);\n        return true;\n      }\n    });\n\n    // remove all the storages\n    yield Promise.all(removeStorages.map( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (row) {\n        var storageInstance = yield storage.createStorageInstance({\n          collectionName: row.collectionName,\n          databaseInstanceToken,\n          databaseName,\n          multiInstance: false,\n          options: {},\n          schema: row.schema,\n          devMode: overwritable.isDevMode()\n        });\n        yield storageInstance.remove();\n        if (row.isCollection) {\n          yield runAsyncPluginHooks('postRemoveRxCollection', {\n            storage,\n            databaseName: databaseName,\n            collectionName\n          });\n        }\n      });\n      return function (_x9) {\n        return _ref.apply(this, arguments);\n      };\n    }()));\n\n    // remove the meta documents\n    if (hashFunction) {\n      var writeRows = relevantCollectionMetaDocs.map(doc => {\n        var writeDoc = flatCloneDocWithMeta(doc);\n        writeDoc._deleted = true;\n        writeDoc._meta.lwt = now();\n        writeDoc._rev = createRevision(databaseInstanceToken, doc);\n        return {\n          previous: doc,\n          document: writeDoc\n        };\n      });\n      yield databaseInternalStorage.bulkWrite(writeRows, 'rx-database-remove-collection-all');\n    }\n  });\n  return _removeCollectionStorages.apply(this, arguments);\n}","map":{"version":3,"names":["createRevision","flatClone","getDefaultRevision","getDefaultRxDocumentMeta","now","fillObjectWithDefaults","fillPrimaryKey","runAsyncPluginHooks","getAllCollectionDocuments","flatCloneDocWithMeta","overwritable","fillObjectDataBeforeInsert","schema","data","primaryPath","jsonSchema","_meta","hasOwnProperty","_deleted","_attachments","_rev","createRxCollectionStorageInstance","_x","_x2","_createRxCollectionStorageInstance","apply","arguments","_asyncToGenerator","rxDatabase","storageInstanceCreationParams","multiInstance","storageInstance","storage","createStorageInstance","removeCollectionStorages","_x3","_x4","_x5","_x6","_x7","_x8","_removeCollectionStorages","databaseInternalStorage","databaseInstanceToken","databaseName","collectionName","hashFunction","allCollectionMetaDocs","statics","relevantCollectionMetaDocs","filter","metaDoc","name","removeStorages","forEach","push","isCollection","connectedStorages","row","alreadyAdded","Set","key","version","has","add","Promise","all","map","_ref","options","devMode","isDevMode","remove","_x9","writeRows","doc","writeDoc","lwt","previous","document","bulkWrite"],"sources":["/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/node_modules/rxdb/dist/es/rx-collection-helper.js"],"sourcesContent":["import { createRevision, flatClone, getDefaultRevision, getDefaultRxDocumentMeta, now } from './plugins/utils';\nimport { fillObjectWithDefaults, fillPrimaryKey } from './rx-schema-helper';\nimport { runAsyncPluginHooks } from './hooks';\nimport { getAllCollectionDocuments } from './rx-database-internal-store';\nimport { flatCloneDocWithMeta } from './rx-storage-helper';\nimport { overwritable } from './overwritable';\n\n/**\n * fills in the default data.\n * This also clones the data.\n */\nexport function fillObjectDataBeforeInsert(schema, data) {\n  data = flatClone(data);\n  data = fillObjectWithDefaults(schema, data);\n  data = fillPrimaryKey(schema.primaryPath, schema.jsonSchema, data);\n  data._meta = getDefaultRxDocumentMeta();\n  if (!data.hasOwnProperty('_deleted')) {\n    data._deleted = false;\n  }\n  if (!data.hasOwnProperty('_attachments')) {\n    data._attachments = {};\n  }\n  if (!data.hasOwnProperty('_rev')) {\n    data._rev = getDefaultRevision();\n  }\n  return data;\n}\n\n/**\n * Creates the storage instances that are used internally in the collection\n */\nexport async function createRxCollectionStorageInstance(rxDatabase, storageInstanceCreationParams) {\n  storageInstanceCreationParams.multiInstance = rxDatabase.multiInstance;\n  var storageInstance = await rxDatabase.storage.createStorageInstance(storageInstanceCreationParams);\n  return storageInstance;\n}\n\n/**\n * Removes the main storage of the collection\n * and all connected storages like the ones from the replication meta etc.\n */\nexport async function removeCollectionStorages(storage, databaseInternalStorage, databaseInstanceToken, databaseName, collectionName,\n/**\n * If no hash function is provided,\n * we assume that the whole internal store is removed anyway\n * so we do not have to delete the meta documents.\n */\nhashFunction) {\n  var allCollectionMetaDocs = await getAllCollectionDocuments(storage.statics, databaseInternalStorage);\n  var relevantCollectionMetaDocs = allCollectionMetaDocs.filter(metaDoc => metaDoc.data.name === collectionName);\n  var removeStorages = [];\n  relevantCollectionMetaDocs.forEach(metaDoc => {\n    removeStorages.push({\n      collectionName: metaDoc.data.name,\n      schema: metaDoc.data.schema,\n      isCollection: true\n    });\n    metaDoc.data.connectedStorages.forEach(row => removeStorages.push({\n      collectionName: row.collectionName,\n      isCollection: false,\n      schema: row.schema\n    }));\n  });\n\n  // ensure uniqueness\n  var alreadyAdded = new Set();\n  removeStorages = removeStorages.filter(row => {\n    var key = row.collectionName + '||' + row.schema.version;\n    if (alreadyAdded.has(key)) {\n      return false;\n    } else {\n      alreadyAdded.add(key);\n      return true;\n    }\n  });\n\n  // remove all the storages\n  await Promise.all(removeStorages.map(async row => {\n    var storageInstance = await storage.createStorageInstance({\n      collectionName: row.collectionName,\n      databaseInstanceToken,\n      databaseName,\n      multiInstance: false,\n      options: {},\n      schema: row.schema,\n      devMode: overwritable.isDevMode()\n    });\n    await storageInstance.remove();\n    if (row.isCollection) {\n      await runAsyncPluginHooks('postRemoveRxCollection', {\n        storage,\n        databaseName: databaseName,\n        collectionName\n      });\n    }\n  }));\n\n  // remove the meta documents\n  if (hashFunction) {\n    var writeRows = relevantCollectionMetaDocs.map(doc => {\n      var writeDoc = flatCloneDocWithMeta(doc);\n      writeDoc._deleted = true;\n      writeDoc._meta.lwt = now();\n      writeDoc._rev = createRevision(databaseInstanceToken, doc);\n      return {\n        previous: doc,\n        document: writeDoc\n      };\n    });\n    await databaseInternalStorage.bulkWrite(writeRows, 'rx-database-remove-collection-all');\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}