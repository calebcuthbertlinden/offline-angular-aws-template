{"ast":null,"code":"import _asyncToGenerator from \"/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nexport function lastOfArray(ar) {\n  return ar[ar.length - 1];\n}\n\n/**\n * shuffle the given array\n */\nexport function shuffleArray(arr) {\n  return arr.slice(0).sort(() => Math.random() - 0.5);\n}\nexport function toArray(input) {\n  return Array.isArray(input) ? input.slice(0) : [input];\n}\n\n/**\n * Split array with items into smaller arrays with items\n * @link https://stackoverflow.com/a/7273794/3443137\n */\nexport function batchArray(array, batchSize) {\n  array = array.slice(0);\n  var ret = [];\n  while (array.length) {\n    var batch = array.splice(0, batchSize);\n    ret.push(batch);\n  }\n  return ret;\n}\n\n/**\n * @link https://stackoverflow.com/a/15996017\n */\nexport function removeOneFromArrayIfMatches(ar, condition) {\n  ar = ar.slice();\n  var i = ar.length;\n  var done = false;\n  while (i-- && !done) {\n    if (condition(ar[i])) {\n      done = true;\n      ar.splice(i, 1);\n    }\n  }\n  return ar;\n}\n\n/**\n * returns true if the supplied argument is either an Array<T> or a Readonly<Array<T>>\n */\nexport function isMaybeReadonlyArray(x) {\n  // While this looks strange, it's a workaround for an issue in TypeScript:\n  // https://github.com/microsoft/TypeScript/issues/17002\n  //\n  // The problem is that `Array.isArray` as a type guard returns `false` for a readonly array,\n  // but at runtime the object is an array and the runtime call to `Array.isArray` would return `true`.\n  // The type predicate here allows for both `Array<T>` and `Readonly<Array<T>>` to pass a type check while\n  // still performing runtime type inspection.\n  return Array.isArray(x);\n}\n\n/**\n * Use this in array.filter() to remove all empty slots\n * and have the correct typings afterwards.\n * @link https://stackoverflow.com/a/46700791/3443137\n */\nexport function arrayFilterNotEmpty(value) {\n  if (value === null || value === undefined) {\n    return false;\n  }\n  return true;\n}\nexport function countUntilNotMatching(ar, matchingFn) {\n  var count = 0;\n  var idx = -1;\n  for (var _item of ar) {\n    idx = idx + 1;\n    var matching = matchingFn(_item, idx);\n    if (matching) {\n      count = count + 1;\n    } else {\n      break;\n    }\n  }\n  return count;\n}\nexport function asyncFilter(_x, _x2) {\n  return _asyncFilter.apply(this, arguments);\n}\n\n/**\n * @link https://stackoverflow.com/a/3762735\n */\nfunction _asyncFilter() {\n  _asyncFilter = _asyncToGenerator(function* (array, predicate) {\n    var filters = yield Promise.all(array.map(predicate));\n    return array.filter((...[, index]) => filters[index]);\n  });\n  return _asyncFilter.apply(this, arguments);\n}\nexport function sumNumberArray(array) {\n  var count = 0;\n  for (var i = array.length; i--;) {\n    count += array[i];\n  }\n  return count;\n}\nexport function maxOfNumbers(arr) {\n  return Math.max(...arr);\n}\n\n/**\n * Appends the given documents to the given array.\n * This will mutate the first given array.\n * Mostly used as faster alternative to Array.concat()\n * because .concat() is so slow.\n * @link https://www.measurethat.net/Benchmarks/Show/4223/0/array-concat-vs-spread-operator-vs-push#latest_results_block\n */\nexport function appendToArray(ar, add) {\n  var amount = add.length;\n  for (var i = 0; i < amount; ++i) {\n    var element = add[i];\n    ar.push(element);\n  }\n}","map":{"version":3,"names":["lastOfArray","ar","length","shuffleArray","arr","slice","sort","Math","random","toArray","input","Array","isArray","batchArray","array","batchSize","ret","batch","splice","push","removeOneFromArrayIfMatches","condition","i","done","isMaybeReadonlyArray","x","arrayFilterNotEmpty","value","undefined","countUntilNotMatching","matchingFn","count","idx","_item","matching","asyncFilter","_x","_x2","_asyncFilter","apply","arguments","_asyncToGenerator","predicate","filters","Promise","all","map","filter","index","sumNumberArray","maxOfNumbers","max","appendToArray","add","amount","element"],"sources":["/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/node_modules/rxdb/dist/es/plugins/utils/utils-array.js"],"sourcesContent":["export function lastOfArray(ar) {\n  return ar[ar.length - 1];\n}\n\n/**\n * shuffle the given array\n */\nexport function shuffleArray(arr) {\n  return arr.slice(0).sort(() => Math.random() - 0.5);\n}\nexport function toArray(input) {\n  return Array.isArray(input) ? input.slice(0) : [input];\n}\n\n/**\n * Split array with items into smaller arrays with items\n * @link https://stackoverflow.com/a/7273794/3443137\n */\nexport function batchArray(array, batchSize) {\n  array = array.slice(0);\n  var ret = [];\n  while (array.length) {\n    var batch = array.splice(0, batchSize);\n    ret.push(batch);\n  }\n  return ret;\n}\n\n/**\n * @link https://stackoverflow.com/a/15996017\n */\nexport function removeOneFromArrayIfMatches(ar, condition) {\n  ar = ar.slice();\n  var i = ar.length;\n  var done = false;\n  while (i-- && !done) {\n    if (condition(ar[i])) {\n      done = true;\n      ar.splice(i, 1);\n    }\n  }\n  return ar;\n}\n\n/**\n * returns true if the supplied argument is either an Array<T> or a Readonly<Array<T>>\n */\nexport function isMaybeReadonlyArray(x) {\n  // While this looks strange, it's a workaround for an issue in TypeScript:\n  // https://github.com/microsoft/TypeScript/issues/17002\n  //\n  // The problem is that `Array.isArray` as a type guard returns `false` for a readonly array,\n  // but at runtime the object is an array and the runtime call to `Array.isArray` would return `true`.\n  // The type predicate here allows for both `Array<T>` and `Readonly<Array<T>>` to pass a type check while\n  // still performing runtime type inspection.\n  return Array.isArray(x);\n}\n\n/**\n * Use this in array.filter() to remove all empty slots\n * and have the correct typings afterwards.\n * @link https://stackoverflow.com/a/46700791/3443137\n */\nexport function arrayFilterNotEmpty(value) {\n  if (value === null || value === undefined) {\n    return false;\n  }\n  return true;\n}\nexport function countUntilNotMatching(ar, matchingFn) {\n  var count = 0;\n  var idx = -1;\n  for (var _item of ar) {\n    idx = idx + 1;\n    var matching = matchingFn(_item, idx);\n    if (matching) {\n      count = count + 1;\n    } else {\n      break;\n    }\n  }\n  return count;\n}\nexport async function asyncFilter(array, predicate) {\n  var filters = await Promise.all(array.map(predicate));\n  return array.filter((...[, index]) => filters[index]);\n}\n\n/**\n * @link https://stackoverflow.com/a/3762735\n */\nexport function sumNumberArray(array) {\n  var count = 0;\n  for (var i = array.length; i--;) {\n    count += array[i];\n  }\n  return count;\n}\nexport function maxOfNumbers(arr) {\n  return Math.max(...arr);\n}\n\n/**\n * Appends the given documents to the given array.\n * This will mutate the first given array.\n * Mostly used as faster alternative to Array.concat()\n * because .concat() is so slow.\n * @link https://www.measurethat.net/Benchmarks/Show/4223/0/array-concat-vs-spread-operator-vs-push#latest_results_block\n */\nexport function appendToArray(ar, add) {\n  var amount = add.length;\n  for (var i = 0; i < amount; ++i) {\n    var element = add[i];\n    ar.push(element);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}