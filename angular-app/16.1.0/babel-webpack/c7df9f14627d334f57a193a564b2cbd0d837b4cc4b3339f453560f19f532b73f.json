{"ast":null,"code":"import { newRxError } from './rx-error';\nimport { appendToArray, ensureNotFalsy, flatClone, getProperty, isMaybeReadonlyArray, REGEX_ALL_DOTS, RX_META_LWT_MINIMUM, sortObject, trimDots } from './plugins/utils';\n/**\n * Helper function to create a valid RxJsonSchema\n * with a given version.\n */\nexport function getPseudoSchemaForVersion(version, primaryKey) {\n  var pseudoSchema = fillWithDefaultSettings({\n    version,\n    type: 'object',\n    primaryKey: primaryKey,\n    properties: {\n      [primaryKey]: {\n        type: 'string',\n        maxLength: 100\n      }\n    },\n    required: [primaryKey]\n  });\n  return pseudoSchema;\n}\n\n/**\n * Returns the sub-schema for a given path\n */\nexport function getSchemaByObjectPath(rxJsonSchema, path) {\n  var usePath = path;\n  usePath = usePath.replace(REGEX_ALL_DOTS, '.properties.');\n  usePath = 'properties.' + usePath;\n  usePath = trimDots(usePath);\n  var ret = getProperty(rxJsonSchema, usePath);\n  return ret;\n}\nexport function fillPrimaryKey(primaryPath, jsonSchema, documentData) {\n  // optimization shortcut.\n  if (typeof jsonSchema.primaryKey === 'string') {\n    return documentData;\n  }\n  var newPrimary = getComposedPrimaryKeyOfDocumentData(jsonSchema, documentData);\n  var existingPrimary = documentData[primaryPath];\n  if (existingPrimary && existingPrimary !== newPrimary) {\n    throw newRxError('DOC19', {\n      args: {\n        documentData,\n        existingPrimary,\n        newPrimary\n      },\n      schema: jsonSchema\n    });\n  }\n  documentData[primaryPath] = newPrimary;\n  return documentData;\n}\nexport function getPrimaryFieldOfPrimaryKey(primaryKey) {\n  if (typeof primaryKey === 'string') {\n    return primaryKey;\n  } else {\n    return primaryKey.key;\n  }\n}\nexport function getLengthOfPrimaryKey(schema) {\n  var primaryPath = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n  var schemaPart = getSchemaByObjectPath(schema, primaryPath);\n  return ensureNotFalsy(schemaPart.maxLength);\n}\n\n/**\n * Returns the composed primaryKey of a document by its data.\n */\nexport function getComposedPrimaryKeyOfDocumentData(jsonSchema, documentData) {\n  if (typeof jsonSchema.primaryKey === 'string') {\n    return documentData[jsonSchema.primaryKey];\n  }\n  var compositePrimary = jsonSchema.primaryKey;\n  return compositePrimary.fields.map(field => {\n    var value = getProperty(documentData, field);\n    if (typeof value === 'undefined') {\n      throw newRxError('DOC18', {\n        args: {\n          field,\n          documentData\n        }\n      });\n    }\n    return value;\n  }).join(compositePrimary.separator);\n}\n\n/**\n * Normalize the RxJsonSchema.\n * We need this to ensure everything is set up properly\n * and we have the same hash on schemas that represent the same value but\n * have different json.\n *\n * - Orders the schemas attributes by alphabetical order\n * - Adds the primaryKey to all indexes that do not contain the primaryKey\n * - We need this for deterministic sort order on all queries, which is required for event-reduce to work.\n *\n * @return RxJsonSchema - ordered and filled\n */\nexport function normalizeRxJsonSchema(jsonSchema) {\n  var normalizedSchema = sortObject(jsonSchema, true);\n  return normalizedSchema;\n}\n\n/**\n * fills the schema-json with default-settings\n * @return cloned schemaObj\n */\nexport function fillWithDefaultSettings(schemaObj) {\n  schemaObj = flatClone(schemaObj);\n  var primaryPath = getPrimaryFieldOfPrimaryKey(schemaObj.primaryKey);\n  schemaObj.properties = flatClone(schemaObj.properties);\n\n  // additionalProperties is always false\n  schemaObj.additionalProperties = false;\n\n  // fill with key-compression-state ()\n  if (!schemaObj.hasOwnProperty('keyCompression')) {\n    schemaObj.keyCompression = false;\n  }\n\n  // indexes must be array\n  schemaObj.indexes = schemaObj.indexes ? schemaObj.indexes.slice(0) : [];\n\n  // required must be array\n  schemaObj.required = schemaObj.required ? schemaObj.required.slice(0) : [];\n\n  // encrypted must be array\n  schemaObj.encrypted = schemaObj.encrypted ? schemaObj.encrypted.slice(0) : [];\n\n  // add _rev\n  schemaObj.properties._rev = {\n    type: 'string',\n    minLength: 1\n  };\n\n  // add attachments\n  schemaObj.properties._attachments = {\n    type: 'object'\n  };\n\n  // add deleted flag\n  schemaObj.properties._deleted = {\n    type: 'boolean'\n  };\n\n  // add meta property\n  schemaObj.properties._meta = RX_META_SCHEMA;\n\n  /**\n   * meta fields are all required\n   */\n  schemaObj.required = schemaObj.required ? schemaObj.required.slice(0) : [];\n  schemaObj.required.push('_deleted');\n  schemaObj.required.push('_rev');\n  schemaObj.required.push('_meta');\n  schemaObj.required.push('_attachments');\n\n  // final fields are always required\n  var finalFields = getFinalFields(schemaObj);\n  appendToArray(schemaObj.required, finalFields);\n  schemaObj.required = schemaObj.required.filter(field => !field.includes('.')).filter((elem, pos, arr) => arr.indexOf(elem) === pos); // unique;\n\n  // version is 0 by default\n  schemaObj.version = schemaObj.version || 0;\n\n  /**\n   * Append primary key to indexes that do not contain the primaryKey.\n   * All indexes must have the primaryKey to ensure a deterministic sort order.\n   */\n  if (schemaObj.indexes) {\n    schemaObj.indexes = schemaObj.indexes.map(index => {\n      var arIndex = isMaybeReadonlyArray(index) ? index.slice(0) : [index];\n      if (!arIndex.includes(primaryPath)) {\n        var modifiedIndex = arIndex.slice(0);\n        modifiedIndex.push(primaryPath);\n        return modifiedIndex;\n      }\n      return arIndex;\n    });\n  }\n  return schemaObj;\n}\nexport var RX_META_SCHEMA = {\n  type: 'object',\n  properties: {\n    /**\n     * The last-write time.\n     * Unix time in milliseconds.\n     */\n    lwt: {\n      type: 'number',\n      /**\n       * We use 1 as minimum so that the value is never falsy.\n       */\n      minimum: RX_META_LWT_MINIMUM,\n      maximum: 1000000000000000,\n      multipleOf: 0.01\n    }\n  },\n  /**\n   * Additional properties are allowed\n   * and can be used by plugins to set various flags.\n   */\n  additionalProperties: true,\n  required: ['lwt']\n};\n\n/**\n * returns the final-fields of the schema\n * @return field-names of the final-fields\n */\nexport function getFinalFields(jsonSchema) {\n  var ret = Object.keys(jsonSchema.properties).filter(key => jsonSchema.properties[key].final);\n\n  // primary is also final\n  var primaryPath = getPrimaryFieldOfPrimaryKey(jsonSchema.primaryKey);\n  ret.push(primaryPath);\n\n  // fields of composite primary are final\n  if (typeof jsonSchema.primaryKey !== 'string') {\n    jsonSchema.primaryKey.fields.forEach(field => ret.push(field));\n  }\n  return ret;\n}\n\n/**\n * fills all unset fields with default-values if set\n * @hotPath\n */\nexport function fillObjectWithDefaults(rxSchema, obj) {\n  var defaultKeys = Object.keys(rxSchema.defaultValues);\n  for (var i = 0; i < defaultKeys.length; ++i) {\n    var key = defaultKeys[i];\n    if (!obj.hasOwnProperty(key) || typeof obj[key] === 'undefined') {\n      obj[key] = rxSchema.defaultValues[key];\n    }\n  }\n  return obj;\n}\nexport var DEFAULT_CHECKPOINT_SCHEMA = {\n  type: 'object',\n  properties: {\n    id: {\n      type: 'string'\n    },\n    lwt: {\n      type: 'number'\n    }\n  },\n  required: ['id', 'lwt'],\n  additionalProperties: false\n};","map":{"version":3,"names":["newRxError","appendToArray","ensureNotFalsy","flatClone","getProperty","isMaybeReadonlyArray","REGEX_ALL_DOTS","RX_META_LWT_MINIMUM","sortObject","trimDots","getPseudoSchemaForVersion","version","primaryKey","pseudoSchema","fillWithDefaultSettings","type","properties","maxLength","required","getSchemaByObjectPath","rxJsonSchema","path","usePath","replace","ret","fillPrimaryKey","primaryPath","jsonSchema","documentData","newPrimary","getComposedPrimaryKeyOfDocumentData","existingPrimary","args","schema","getPrimaryFieldOfPrimaryKey","key","getLengthOfPrimaryKey","schemaPart","compositePrimary","fields","map","field","value","join","separator","normalizeRxJsonSchema","normalizedSchema","schemaObj","additionalProperties","hasOwnProperty","keyCompression","indexes","slice","encrypted","_rev","minLength","_attachments","_deleted","_meta","RX_META_SCHEMA","push","finalFields","getFinalFields","filter","includes","elem","pos","arr","indexOf","index","arIndex","modifiedIndex","lwt","minimum","maximum","multipleOf","Object","keys","final","forEach","fillObjectWithDefaults","rxSchema","obj","defaultKeys","defaultValues","i","length","DEFAULT_CHECKPOINT_SCHEMA","id"],"sources":["/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/node_modules/rxdb/dist/es/rx-schema-helper.js"],"sourcesContent":["import { newRxError } from './rx-error';\nimport { appendToArray, ensureNotFalsy, flatClone, getProperty, isMaybeReadonlyArray, REGEX_ALL_DOTS, RX_META_LWT_MINIMUM, sortObject, trimDots } from './plugins/utils';\n/**\n * Helper function to create a valid RxJsonSchema\n * with a given version.\n */\nexport function getPseudoSchemaForVersion(version, primaryKey) {\n  var pseudoSchema = fillWithDefaultSettings({\n    version,\n    type: 'object',\n    primaryKey: primaryKey,\n    properties: {\n      [primaryKey]: {\n        type: 'string',\n        maxLength: 100\n      }\n    },\n    required: [primaryKey]\n  });\n  return pseudoSchema;\n}\n\n/**\n * Returns the sub-schema for a given path\n */\nexport function getSchemaByObjectPath(rxJsonSchema, path) {\n  var usePath = path;\n  usePath = usePath.replace(REGEX_ALL_DOTS, '.properties.');\n  usePath = 'properties.' + usePath;\n  usePath = trimDots(usePath);\n  var ret = getProperty(rxJsonSchema, usePath);\n  return ret;\n}\nexport function fillPrimaryKey(primaryPath, jsonSchema, documentData) {\n  // optimization shortcut.\n  if (typeof jsonSchema.primaryKey === 'string') {\n    return documentData;\n  }\n  var newPrimary = getComposedPrimaryKeyOfDocumentData(jsonSchema, documentData);\n  var existingPrimary = documentData[primaryPath];\n  if (existingPrimary && existingPrimary !== newPrimary) {\n    throw newRxError('DOC19', {\n      args: {\n        documentData,\n        existingPrimary,\n        newPrimary\n      },\n      schema: jsonSchema\n    });\n  }\n  documentData[primaryPath] = newPrimary;\n  return documentData;\n}\nexport function getPrimaryFieldOfPrimaryKey(primaryKey) {\n  if (typeof primaryKey === 'string') {\n    return primaryKey;\n  } else {\n    return primaryKey.key;\n  }\n}\nexport function getLengthOfPrimaryKey(schema) {\n  var primaryPath = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n  var schemaPart = getSchemaByObjectPath(schema, primaryPath);\n  return ensureNotFalsy(schemaPart.maxLength);\n}\n\n/**\n * Returns the composed primaryKey of a document by its data.\n */\nexport function getComposedPrimaryKeyOfDocumentData(jsonSchema, documentData) {\n  if (typeof jsonSchema.primaryKey === 'string') {\n    return documentData[jsonSchema.primaryKey];\n  }\n  var compositePrimary = jsonSchema.primaryKey;\n  return compositePrimary.fields.map(field => {\n    var value = getProperty(documentData, field);\n    if (typeof value === 'undefined') {\n      throw newRxError('DOC18', {\n        args: {\n          field,\n          documentData\n        }\n      });\n    }\n    return value;\n  }).join(compositePrimary.separator);\n}\n\n/**\n * Normalize the RxJsonSchema.\n * We need this to ensure everything is set up properly\n * and we have the same hash on schemas that represent the same value but\n * have different json.\n *\n * - Orders the schemas attributes by alphabetical order\n * - Adds the primaryKey to all indexes that do not contain the primaryKey\n * - We need this for deterministic sort order on all queries, which is required for event-reduce to work.\n *\n * @return RxJsonSchema - ordered and filled\n */\nexport function normalizeRxJsonSchema(jsonSchema) {\n  var normalizedSchema = sortObject(jsonSchema, true);\n  return normalizedSchema;\n}\n\n/**\n * fills the schema-json with default-settings\n * @return cloned schemaObj\n */\nexport function fillWithDefaultSettings(schemaObj) {\n  schemaObj = flatClone(schemaObj);\n  var primaryPath = getPrimaryFieldOfPrimaryKey(schemaObj.primaryKey);\n  schemaObj.properties = flatClone(schemaObj.properties);\n\n  // additionalProperties is always false\n  schemaObj.additionalProperties = false;\n\n  // fill with key-compression-state ()\n  if (!schemaObj.hasOwnProperty('keyCompression')) {\n    schemaObj.keyCompression = false;\n  }\n\n  // indexes must be array\n  schemaObj.indexes = schemaObj.indexes ? schemaObj.indexes.slice(0) : [];\n\n  // required must be array\n  schemaObj.required = schemaObj.required ? schemaObj.required.slice(0) : [];\n\n  // encrypted must be array\n  schemaObj.encrypted = schemaObj.encrypted ? schemaObj.encrypted.slice(0) : [];\n\n  // add _rev\n  schemaObj.properties._rev = {\n    type: 'string',\n    minLength: 1\n  };\n\n  // add attachments\n  schemaObj.properties._attachments = {\n    type: 'object'\n  };\n\n  // add deleted flag\n  schemaObj.properties._deleted = {\n    type: 'boolean'\n  };\n\n  // add meta property\n  schemaObj.properties._meta = RX_META_SCHEMA;\n\n  /**\n   * meta fields are all required\n   */\n  schemaObj.required = schemaObj.required ? schemaObj.required.slice(0) : [];\n  schemaObj.required.push('_deleted');\n  schemaObj.required.push('_rev');\n  schemaObj.required.push('_meta');\n  schemaObj.required.push('_attachments');\n\n  // final fields are always required\n  var finalFields = getFinalFields(schemaObj);\n  appendToArray(schemaObj.required, finalFields);\n  schemaObj.required = schemaObj.required.filter(field => !field.includes('.')).filter((elem, pos, arr) => arr.indexOf(elem) === pos); // unique;\n\n  // version is 0 by default\n  schemaObj.version = schemaObj.version || 0;\n\n  /**\n   * Append primary key to indexes that do not contain the primaryKey.\n   * All indexes must have the primaryKey to ensure a deterministic sort order.\n   */\n  if (schemaObj.indexes) {\n    schemaObj.indexes = schemaObj.indexes.map(index => {\n      var arIndex = isMaybeReadonlyArray(index) ? index.slice(0) : [index];\n      if (!arIndex.includes(primaryPath)) {\n        var modifiedIndex = arIndex.slice(0);\n        modifiedIndex.push(primaryPath);\n        return modifiedIndex;\n      }\n      return arIndex;\n    });\n  }\n  return schemaObj;\n}\nexport var RX_META_SCHEMA = {\n  type: 'object',\n  properties: {\n    /**\n     * The last-write time.\n     * Unix time in milliseconds.\n     */\n    lwt: {\n      type: 'number',\n      /**\n       * We use 1 as minimum so that the value is never falsy.\n       */\n      minimum: RX_META_LWT_MINIMUM,\n      maximum: 1000000000000000,\n      multipleOf: 0.01\n    }\n  },\n  /**\n   * Additional properties are allowed\n   * and can be used by plugins to set various flags.\n   */\n  additionalProperties: true,\n  required: ['lwt']\n};\n\n/**\n * returns the final-fields of the schema\n * @return field-names of the final-fields\n */\nexport function getFinalFields(jsonSchema) {\n  var ret = Object.keys(jsonSchema.properties).filter(key => jsonSchema.properties[key].final);\n\n  // primary is also final\n  var primaryPath = getPrimaryFieldOfPrimaryKey(jsonSchema.primaryKey);\n  ret.push(primaryPath);\n\n  // fields of composite primary are final\n  if (typeof jsonSchema.primaryKey !== 'string') {\n    jsonSchema.primaryKey.fields.forEach(field => ret.push(field));\n  }\n  return ret;\n}\n\n/**\n * fills all unset fields with default-values if set\n * @hotPath\n */\nexport function fillObjectWithDefaults(rxSchema, obj) {\n  var defaultKeys = Object.keys(rxSchema.defaultValues);\n  for (var i = 0; i < defaultKeys.length; ++i) {\n    var key = defaultKeys[i];\n    if (!obj.hasOwnProperty(key) || typeof obj[key] === 'undefined') {\n      obj[key] = rxSchema.defaultValues[key];\n    }\n  }\n  return obj;\n}\nexport var DEFAULT_CHECKPOINT_SCHEMA = {\n  type: 'object',\n  properties: {\n    id: {\n      type: 'string'\n    },\n    lwt: {\n      type: 'number'\n    }\n  },\n  required: ['id', 'lwt'],\n  additionalProperties: false\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}