{"ast":null,"code":"/**\n * copied and adapted from npm 'binary-search-insert'\n * @link https://www.npmjs.com/package/binary-search-insert\n */\nexport function pushAtSortPosition(array, item, compareFunction, noCopy) {\n  var ret = noCopy ? array : array.slice(0);\n  var high = ret.length - 1;\n  var low = 0;\n  var mid = 0;\n  /**\n   * Optimization shortcut.\n   */\n\n  if (ret.length === 0) {\n    ret.push(item);\n    return [ret, 0];\n  }\n  /**\n   * So we do not have to ghet the ret[mid] doc again\n   * at the last we store it here.\n   */\n\n  var lastMidDoc;\n  while (low <= high) {\n    // https://github.com/darkskyapp/binary-search\n    // http://googleresearch.blogspot.com/2006/06/extra-extra-read-all-about-it-nearly.html\n    mid = low + (high - low >> 1);\n    lastMidDoc = ret[mid];\n    if (compareFunction(lastMidDoc, item) <= 0.0) {\n      // searching too low\n      low = mid + 1;\n    } else {\n      // searching too high\n      high = mid - 1;\n    }\n  }\n  if (compareFunction(lastMidDoc, item) <= 0.0) {\n    mid++;\n  }\n  /**\n   * Insert at correct position\n   */\n\n  ret.splice(mid, 0, item);\n  return [ret, mid];\n}","map":{"version":3,"names":["pushAtSortPosition","array","item","compareFunction","noCopy","ret","slice","high","length","low","mid","push","lastMidDoc","splice"],"sources":["/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/node_modules/event-reduce-js/node_modules/array-push-at-sort-position/dist/es/index.js"],"sourcesContent":["/**\n * copied and adapted from npm 'binary-search-insert'\n * @link https://www.npmjs.com/package/binary-search-insert\n */\nexport function pushAtSortPosition(array, item, compareFunction, noCopy) {\n  var ret = noCopy ? array : array.slice(0);\n  var high = ret.length - 1;\n  var low = 0;\n  var mid = 0;\n  /**\n   * Optimization shortcut.\n   */\n\n  if (ret.length === 0) {\n    ret.push(item);\n    return [ret, 0];\n  }\n  /**\n   * So we do not have to ghet the ret[mid] doc again\n   * at the last we store it here.\n   */\n\n\n  var lastMidDoc;\n\n  while (low <= high) {\n    // https://github.com/darkskyapp/binary-search\n    // http://googleresearch.blogspot.com/2006/06/extra-extra-read-all-about-it-nearly.html\n    mid = low + (high - low >> 1);\n    lastMidDoc = ret[mid];\n\n    if (compareFunction(lastMidDoc, item) <= 0.0) {\n      // searching too low\n      low = mid + 1;\n    } else {\n      // searching too high\n      high = mid - 1;\n    }\n  }\n\n  if (compareFunction(lastMidDoc, item) <= 0.0) {\n    mid++;\n  }\n  /**\n   * Insert at correct position\n   */\n\n\n  ret.splice(mid, 0, item);\n  return [ret, mid];\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,SAASA,kBAAkBA,CAACC,KAAK,EAAEC,IAAI,EAAEC,eAAe,EAAEC,MAAM,EAAE;EACvE,IAAIC,GAAG,GAAGD,MAAM,GAAGH,KAAK,GAAGA,KAAK,CAACK,KAAK,CAAC,CAAC,CAAC;EACzC,IAAIC,IAAI,GAAGF,GAAG,CAACG,MAAM,GAAG,CAAC;EACzB,IAAIC,GAAG,GAAG,CAAC;EACX,IAAIC,GAAG,GAAG,CAAC;EACX;AACF;AACA;;EAEE,IAAIL,GAAG,CAACG,MAAM,KAAK,CAAC,EAAE;IACpBH,GAAG,CAACM,IAAI,CAACT,IAAI,CAAC;IACd,OAAO,CAACG,GAAG,EAAE,CAAC,CAAC;EACjB;EACA;AACF;AACA;AACA;;EAGE,IAAIO,UAAU;EAEd,OAAOH,GAAG,IAAIF,IAAI,EAAE;IAClB;IACA;IACAG,GAAG,GAAGD,GAAG,IAAIF,IAAI,GAAGE,GAAG,IAAI,CAAC,CAAC;IAC7BG,UAAU,GAAGP,GAAG,CAACK,GAAG,CAAC;IAErB,IAAIP,eAAe,CAACS,UAAU,EAAEV,IAAI,CAAC,IAAI,GAAG,EAAE;MAC5C;MACAO,GAAG,GAAGC,GAAG,GAAG,CAAC;IACf,CAAC,MAAM;MACL;MACAH,IAAI,GAAGG,GAAG,GAAG,CAAC;IAChB;EACF;EAEA,IAAIP,eAAe,CAACS,UAAU,EAAEV,IAAI,CAAC,IAAI,GAAG,EAAE;IAC5CQ,GAAG,EAAE;EACP;EACA;AACF;AACA;;EAGEL,GAAG,CAACQ,MAAM,CAACH,GAAG,EAAE,CAAC,EAAER,IAAI,CAAC;EACxB,OAAO,CAACG,GAAG,EAAEK,GAAG,CAAC;AACnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}