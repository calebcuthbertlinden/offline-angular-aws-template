{"ast":null,"code":"import { splitStringToChunks } from '../util';\nimport { getNumberOfChar } from './string-format';\nexport function minimalStringToSimpleBdd(str) {\n  const nodesById = new Map();\n  // parse leaf nodes\n  const leafNodeAmount = parseInt(str.charAt(0) + str.charAt(1), 10);\n  const lastLeafNodeChar = 2 + leafNodeAmount * 2;\n  const leafNodeChars = str.substring(2, lastLeafNodeChar);\n  const leafNodeChunks = splitStringToChunks(leafNodeChars, 2);\n  for (let i = 0; i < leafNodeChunks.length; i++) {\n    const chunk = leafNodeChunks[i];\n    const id = chunk.charAt(0);\n    const value = getNumberOfChar(chunk.charAt(1));\n    nodesById.set(id, value);\n  }\n  // parse internal nodes\n  const internalNodeChars = str.substring(lastLeafNodeChar, str.length - 3);\n  const internalNodeChunks = splitStringToChunks(internalNodeChars, 4);\n  for (let i = 0; i < internalNodeChunks.length; i++) {\n    const chunk = internalNodeChunks[i];\n    const id = chunk.charAt(0);\n    const idOf0Branch = chunk.charAt(1);\n    const idOf1Branch = chunk.charAt(2);\n    const level = getNumberOfChar(chunk.charAt(3));\n    if (!nodesById.has(idOf0Branch)) {\n      throw new Error('missing node with id ' + idOf0Branch);\n    }\n    if (!nodesById.has(idOf1Branch)) {\n      throw new Error('missing node with id ' + idOf1Branch);\n    }\n    const node0 = nodesById.get(idOf0Branch);\n    const node1 = nodesById.get(idOf1Branch);\n    const node = {\n      l: level,\n      0: node0,\n      1: node1\n    };\n    nodesById.set(id, node);\n  }\n  // parse root node\n  const last3 = str.slice(-3);\n  const idOf0 = last3.charAt(0);\n  const idOf1 = last3.charAt(1);\n  const levelOfRoot = getNumberOfChar(last3.charAt(2));\n  const nodeOf0 = nodesById.get(idOf0);\n  const nodeOf1 = nodesById.get(idOf1);\n  const rootNode = {\n    l: levelOfRoot,\n    0: nodeOf0,\n    1: nodeOf1\n  };\n  return rootNode;\n}","map":{"version":3,"names":["splitStringToChunks","getNumberOfChar","minimalStringToSimpleBdd","str","nodesById","Map","leafNodeAmount","parseInt","charAt","lastLeafNodeChar","leafNodeChars","substring","leafNodeChunks","i","length","chunk","id","value","set","internalNodeChars","internalNodeChunks","idOf0Branch","idOf1Branch","level","has","Error","node0","get","node1","node","l","last3","slice","idOf0","idOf1","levelOfRoot","nodeOf0","nodeOf1","rootNode"],"sources":["/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/node_modules/binary-decision-diagram/dist/es/minimal-string/minimal-string-to-simple-bdd.js"],"sourcesContent":["import { splitStringToChunks } from '../util';\nimport { getNumberOfChar } from './string-format';\nexport function minimalStringToSimpleBdd(str) {\n    const nodesById = new Map();\n    // parse leaf nodes\n    const leafNodeAmount = parseInt(str.charAt(0) + str.charAt(1), 10);\n    const lastLeafNodeChar = (2 + leafNodeAmount * 2);\n    const leafNodeChars = str.substring(2, lastLeafNodeChar);\n    const leafNodeChunks = splitStringToChunks(leafNodeChars, 2);\n    for (let i = 0; i < leafNodeChunks.length; i++) {\n        const chunk = leafNodeChunks[i];\n        const id = chunk.charAt(0);\n        const value = getNumberOfChar(chunk.charAt(1));\n        nodesById.set(id, value);\n    }\n    // parse internal nodes\n    const internalNodeChars = str.substring(lastLeafNodeChar, str.length - 3);\n    const internalNodeChunks = splitStringToChunks(internalNodeChars, 4);\n    for (let i = 0; i < internalNodeChunks.length; i++) {\n        const chunk = internalNodeChunks[i];\n        const id = chunk.charAt(0);\n        const idOf0Branch = chunk.charAt(1);\n        const idOf1Branch = chunk.charAt(2);\n        const level = getNumberOfChar(chunk.charAt(3));\n        if (!nodesById.has(idOf0Branch)) {\n            throw new Error('missing node with id ' + idOf0Branch);\n        }\n        if (!nodesById.has(idOf1Branch)) {\n            throw new Error('missing node with id ' + idOf1Branch);\n        }\n        const node0 = nodesById.get(idOf0Branch);\n        const node1 = nodesById.get(idOf1Branch);\n        const node = {\n            l: level,\n            0: node0,\n            1: node1\n        };\n        nodesById.set(id, node);\n    }\n    // parse root node\n    const last3 = str.slice(-3);\n    const idOf0 = last3.charAt(0);\n    const idOf1 = last3.charAt(1);\n    const levelOfRoot = getNumberOfChar(last3.charAt(2));\n    const nodeOf0 = nodesById.get(idOf0);\n    const nodeOf1 = nodesById.get(idOf1);\n    const rootNode = {\n        l: levelOfRoot,\n        0: nodeOf0,\n        1: nodeOf1,\n    };\n    return rootNode;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}