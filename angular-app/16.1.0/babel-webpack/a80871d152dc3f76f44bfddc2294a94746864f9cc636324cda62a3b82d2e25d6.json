{"ast":null,"code":"/**\n * this handles how plugins are added to rxdb\n * basically it changes the internal prototypes\n * by passing them to the plugins-functions\n */\nimport { RxSchema } from './rx-schema';\nimport { basePrototype as RxDocumentPrototype } from './rx-document';\nimport { RxQueryBase } from './rx-query';\nimport { RxCollectionBase } from './rx-collection';\nimport { RxDatabaseBase } from './rx-database';\nimport { overwritable } from './overwritable';\nimport { HOOKS, runPluginHooks } from './hooks';\nimport { newRxError, newRxTypeError } from './rx-error';\n\n/**\n * prototypes that can be manipulated with a plugin\n */\nvar PROTOTYPES = {\n  RxSchema: RxSchema.prototype,\n  RxDocument: RxDocumentPrototype,\n  RxQuery: RxQueryBase.prototype,\n  RxCollection: RxCollectionBase.prototype,\n  RxDatabase: RxDatabaseBase.prototype\n};\nvar ADDED_PLUGINS = new Set();\nvar ADDED_PLUGIN_NAMES = new Set();\n\n/**\n * Add a plugin to the RxDB library.\n * Plugins are added globally and cannot be removed.\n */\nexport function addRxPlugin(plugin) {\n  runPluginHooks('preAddRxPlugin', {\n    plugin,\n    plugins: ADDED_PLUGINS\n  });\n\n  // do nothing if added before\n  if (ADDED_PLUGINS.has(plugin)) {\n    return;\n  } else {\n    // ensure no other plugin with the same name was already added\n    if (ADDED_PLUGIN_NAMES.has(plugin.name)) {\n      throw newRxError('PL3', {\n        name: plugin.name,\n        plugin\n      });\n    }\n    ADDED_PLUGINS.add(plugin);\n    ADDED_PLUGIN_NAMES.add(plugin.name);\n  }\n\n  /**\n   * To identify broken configurations,\n   * we only allow RxDB plugins to be passed into addRxPlugin().\n   */\n  if (!plugin.rxdb) {\n    throw newRxTypeError('PL1', {\n      plugin\n    });\n  }\n  if (plugin.init) {\n    plugin.init();\n  }\n\n  // prototype-overwrites\n  if (plugin.prototypes) {\n    Object.entries(plugin.prototypes).forEach(([name, fun]) => {\n      return fun(PROTOTYPES[name]);\n    });\n  }\n  // overwritable-overwrites\n  if (plugin.overwritable) {\n    Object.assign(overwritable, plugin.overwritable);\n  }\n  // extend-hooks\n  if (plugin.hooks) {\n    Object.entries(plugin.hooks).forEach(([name, hooksObj]) => {\n      if (hooksObj.after) {\n        HOOKS[name].push(hooksObj.after);\n      }\n      if (hooksObj.before) {\n        HOOKS[name].unshift(hooksObj.before);\n      }\n    });\n  }\n}","map":{"version":3,"names":["RxSchema","basePrototype","RxDocumentPrototype","RxQueryBase","RxCollectionBase","RxDatabaseBase","overwritable","HOOKS","runPluginHooks","newRxError","newRxTypeError","PROTOTYPES","prototype","RxDocument","RxQuery","RxCollection","RxDatabase","ADDED_PLUGINS","Set","ADDED_PLUGIN_NAMES","addRxPlugin","plugin","plugins","has","name","add","rxdb","init","prototypes","Object","entries","forEach","fun","assign","hooks","hooksObj","after","push","before","unshift"],"sources":["/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/node_modules/rxdb/dist/es/plugin.js"],"sourcesContent":["/**\n * this handles how plugins are added to rxdb\n * basically it changes the internal prototypes\n * by passing them to the plugins-functions\n */\nimport { RxSchema } from './rx-schema';\nimport { basePrototype as RxDocumentPrototype } from './rx-document';\nimport { RxQueryBase } from './rx-query';\nimport { RxCollectionBase } from './rx-collection';\nimport { RxDatabaseBase } from './rx-database';\nimport { overwritable } from './overwritable';\nimport { HOOKS, runPluginHooks } from './hooks';\nimport { newRxError, newRxTypeError } from './rx-error';\n\n/**\n * prototypes that can be manipulated with a plugin\n */\nvar PROTOTYPES = {\n  RxSchema: RxSchema.prototype,\n  RxDocument: RxDocumentPrototype,\n  RxQuery: RxQueryBase.prototype,\n  RxCollection: RxCollectionBase.prototype,\n  RxDatabase: RxDatabaseBase.prototype\n};\nvar ADDED_PLUGINS = new Set();\nvar ADDED_PLUGIN_NAMES = new Set();\n\n/**\n * Add a plugin to the RxDB library.\n * Plugins are added globally and cannot be removed.\n */\nexport function addRxPlugin(plugin) {\n  runPluginHooks('preAddRxPlugin', {\n    plugin,\n    plugins: ADDED_PLUGINS\n  });\n\n  // do nothing if added before\n  if (ADDED_PLUGINS.has(plugin)) {\n    return;\n  } else {\n    // ensure no other plugin with the same name was already added\n    if (ADDED_PLUGIN_NAMES.has(plugin.name)) {\n      throw newRxError('PL3', {\n        name: plugin.name,\n        plugin\n      });\n    }\n    ADDED_PLUGINS.add(plugin);\n    ADDED_PLUGIN_NAMES.add(plugin.name);\n  }\n\n  /**\n   * To identify broken configurations,\n   * we only allow RxDB plugins to be passed into addRxPlugin().\n   */\n  if (!plugin.rxdb) {\n    throw newRxTypeError('PL1', {\n      plugin\n    });\n  }\n  if (plugin.init) {\n    plugin.init();\n  }\n\n  // prototype-overwrites\n  if (plugin.prototypes) {\n    Object.entries(plugin.prototypes).forEach(([name, fun]) => {\n      return fun(PROTOTYPES[name]);\n    });\n  }\n  // overwritable-overwrites\n  if (plugin.overwritable) {\n    Object.assign(overwritable, plugin.overwritable);\n  }\n  // extend-hooks\n  if (plugin.hooks) {\n    Object.entries(plugin.hooks).forEach(([name, hooksObj]) => {\n      if (hooksObj.after) {\n        HOOKS[name].push(hooksObj.after);\n      }\n      if (hooksObj.before) {\n        HOOKS[name].unshift(hooksObj.before);\n      }\n    });\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,QAAQ,QAAQ,aAAa;AACtC,SAASC,aAAa,IAAIC,mBAAmB,QAAQ,eAAe;AACpE,SAASC,WAAW,QAAQ,YAAY;AACxC,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SAASC,cAAc,QAAQ,eAAe;AAC9C,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,SAASC,KAAK,EAAEC,cAAc,QAAQ,SAAS;AAC/C,SAASC,UAAU,EAAEC,cAAc,QAAQ,YAAY;;AAEvD;AACA;AACA;AACA,IAAIC,UAAU,GAAG;EACfX,QAAQ,EAAEA,QAAQ,CAACY,SAAS;EAC5BC,UAAU,EAAEX,mBAAmB;EAC/BY,OAAO,EAAEX,WAAW,CAACS,SAAS;EAC9BG,YAAY,EAAEX,gBAAgB,CAACQ,SAAS;EACxCI,UAAU,EAAEX,cAAc,CAACO;AAC7B,CAAC;AACD,IAAIK,aAAa,GAAG,IAAIC,GAAG,CAAC,CAAC;AAC7B,IAAIC,kBAAkB,GAAG,IAAID,GAAG,CAAC,CAAC;;AAElC;AACA;AACA;AACA;AACA,OAAO,SAASE,WAAWA,CAACC,MAAM,EAAE;EAClCb,cAAc,CAAC,gBAAgB,EAAE;IAC/Ba,MAAM;IACNC,OAAO,EAAEL;EACX,CAAC,CAAC;;EAEF;EACA,IAAIA,aAAa,CAACM,GAAG,CAACF,MAAM,CAAC,EAAE;IAC7B;EACF,CAAC,MAAM;IACL;IACA,IAAIF,kBAAkB,CAACI,GAAG,CAACF,MAAM,CAACG,IAAI,CAAC,EAAE;MACvC,MAAMf,UAAU,CAAC,KAAK,EAAE;QACtBe,IAAI,EAAEH,MAAM,CAACG,IAAI;QACjBH;MACF,CAAC,CAAC;IACJ;IACAJ,aAAa,CAACQ,GAAG,CAACJ,MAAM,CAAC;IACzBF,kBAAkB,CAACM,GAAG,CAACJ,MAAM,CAACG,IAAI,CAAC;EACrC;;EAEA;AACF;AACA;AACA;EACE,IAAI,CAACH,MAAM,CAACK,IAAI,EAAE;IAChB,MAAMhB,cAAc,CAAC,KAAK,EAAE;MAC1BW;IACF,CAAC,CAAC;EACJ;EACA,IAAIA,MAAM,CAACM,IAAI,EAAE;IACfN,MAAM,CAACM,IAAI,CAAC,CAAC;EACf;;EAEA;EACA,IAAIN,MAAM,CAACO,UAAU,EAAE;IACrBC,MAAM,CAACC,OAAO,CAACT,MAAM,CAACO,UAAU,CAAC,CAACG,OAAO,CAAC,CAAC,CAACP,IAAI,EAAEQ,GAAG,CAAC,KAAK;MACzD,OAAOA,GAAG,CAACrB,UAAU,CAACa,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC;EACJ;EACA;EACA,IAAIH,MAAM,CAACf,YAAY,EAAE;IACvBuB,MAAM,CAACI,MAAM,CAAC3B,YAAY,EAAEe,MAAM,CAACf,YAAY,CAAC;EAClD;EACA;EACA,IAAIe,MAAM,CAACa,KAAK,EAAE;IAChBL,MAAM,CAACC,OAAO,CAACT,MAAM,CAACa,KAAK,CAAC,CAACH,OAAO,CAAC,CAAC,CAACP,IAAI,EAAEW,QAAQ,CAAC,KAAK;MACzD,IAAIA,QAAQ,CAACC,KAAK,EAAE;QAClB7B,KAAK,CAACiB,IAAI,CAAC,CAACa,IAAI,CAACF,QAAQ,CAACC,KAAK,CAAC;MAClC;MACA,IAAID,QAAQ,CAACG,MAAM,EAAE;QACnB/B,KAAK,CAACiB,IAAI,CAAC,CAACe,OAAO,CAACJ,QAAQ,CAACG,MAAM,CAAC;MACtC;IACF,CAAC,CAAC;EACJ;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}