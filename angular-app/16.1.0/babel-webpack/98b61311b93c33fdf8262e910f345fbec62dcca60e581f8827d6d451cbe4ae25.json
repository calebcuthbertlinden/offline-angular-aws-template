{"ast":null,"code":"/**\n * this plugin adds the leader-election-capabilities to rxdb\n */\n\nimport { createLeaderElection } from 'broadcast-channel';\nimport { getBroadcastChannelReference, removeBroadcastChannelReference } from '../../rx-storage-multiinstance';\nimport { PROMISE_RESOLVE_TRUE, getFromMapOrCreate } from '../utils';\nvar LEADER_ELECTORS_OF_DB = new WeakMap();\nvar LEADER_ELECTOR_BY_BROADCAST_CHANNEL = new WeakMap();\n\n/**\n * Returns the leader elector of a broadcast channel.\n * Used to ensure we reuse the same elector for the channel each time.\n */\nexport function getLeaderElectorByBroadcastChannel(broadcastChannel) {\n  return getFromMapOrCreate(LEADER_ELECTOR_BY_BROADCAST_CHANNEL, broadcastChannel, () => createLeaderElection(broadcastChannel));\n}\n\n/**\n * @overwrites RxDatabase().leaderElector for caching\n */\nexport function getForDatabase() {\n  var broadcastChannel = getBroadcastChannelReference(this.token, this.name, this);\n\n  /**\n   * Clean up the reference on RxDatabase.destroy()\n   */\n  var oldDestroy = this.destroy.bind(this);\n  this.destroy = function () {\n    removeBroadcastChannelReference(this.token, this);\n    return oldDestroy();\n  };\n  var elector = getLeaderElectorByBroadcastChannel(broadcastChannel);\n  if (!elector) {\n    elector = getLeaderElectorByBroadcastChannel(broadcastChannel);\n    LEADER_ELECTORS_OF_DB.set(this, elector);\n  }\n\n  /**\n   * Overwrite for caching\n   */\n  this.leaderElector = () => elector;\n  return elector;\n}\nexport function isLeader() {\n  if (!this.multiInstance) {\n    return true;\n  }\n  return this.leaderElector().isLeader;\n}\nexport function waitForLeadership() {\n  if (!this.multiInstance) {\n    return PROMISE_RESOLVE_TRUE;\n  } else {\n    return this.leaderElector().awaitLeadership().then(() => true);\n  }\n}\n\n/**\n * runs when the database gets destroyed\n */\nexport function onDestroy(db) {\n  var has = LEADER_ELECTORS_OF_DB.get(db);\n  if (has) {\n    has.die();\n  }\n}\nexport var rxdb = true;\nexport var prototypes = {\n  RxDatabase: proto => {\n    proto.leaderElector = getForDatabase;\n    proto.isLeader = isLeader;\n    proto.waitForLeadership = waitForLeadership;\n  }\n};\nexport var RxDBLeaderElectionPlugin = {\n  name: 'leader-election',\n  rxdb,\n  prototypes,\n  hooks: {\n    preDestroyRxDatabase: {\n      after: onDestroy\n    }\n  }\n};","map":{"version":3,"names":["createLeaderElection","getBroadcastChannelReference","removeBroadcastChannelReference","PROMISE_RESOLVE_TRUE","getFromMapOrCreate","LEADER_ELECTORS_OF_DB","WeakMap","LEADER_ELECTOR_BY_BROADCAST_CHANNEL","getLeaderElectorByBroadcastChannel","broadcastChannel","getForDatabase","token","name","oldDestroy","destroy","bind","elector","set","leaderElector","isLeader","multiInstance","waitForLeadership","awaitLeadership","then","onDestroy","db","has","get","die","rxdb","prototypes","RxDatabase","proto","RxDBLeaderElectionPlugin","hooks","preDestroyRxDatabase","after"],"sources":["/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/node_modules/rxdb/dist/es/plugins/leader-election/index.js"],"sourcesContent":["/**\n * this plugin adds the leader-election-capabilities to rxdb\n */\n\nimport { createLeaderElection } from 'broadcast-channel';\nimport { getBroadcastChannelReference, removeBroadcastChannelReference } from '../../rx-storage-multiinstance';\nimport { PROMISE_RESOLVE_TRUE, getFromMapOrCreate } from '../utils';\nvar LEADER_ELECTORS_OF_DB = new WeakMap();\nvar LEADER_ELECTOR_BY_BROADCAST_CHANNEL = new WeakMap();\n\n/**\n * Returns the leader elector of a broadcast channel.\n * Used to ensure we reuse the same elector for the channel each time.\n */\nexport function getLeaderElectorByBroadcastChannel(broadcastChannel) {\n  return getFromMapOrCreate(LEADER_ELECTOR_BY_BROADCAST_CHANNEL, broadcastChannel, () => createLeaderElection(broadcastChannel));\n}\n\n/**\n * @overwrites RxDatabase().leaderElector for caching\n */\nexport function getForDatabase() {\n  var broadcastChannel = getBroadcastChannelReference(this.token, this.name, this);\n\n  /**\n   * Clean up the reference on RxDatabase.destroy()\n   */\n  var oldDestroy = this.destroy.bind(this);\n  this.destroy = function () {\n    removeBroadcastChannelReference(this.token, this);\n    return oldDestroy();\n  };\n  var elector = getLeaderElectorByBroadcastChannel(broadcastChannel);\n  if (!elector) {\n    elector = getLeaderElectorByBroadcastChannel(broadcastChannel);\n    LEADER_ELECTORS_OF_DB.set(this, elector);\n  }\n\n  /**\n   * Overwrite for caching\n   */\n  this.leaderElector = () => elector;\n  return elector;\n}\nexport function isLeader() {\n  if (!this.multiInstance) {\n    return true;\n  }\n  return this.leaderElector().isLeader;\n}\nexport function waitForLeadership() {\n  if (!this.multiInstance) {\n    return PROMISE_RESOLVE_TRUE;\n  } else {\n    return this.leaderElector().awaitLeadership().then(() => true);\n  }\n}\n\n/**\n * runs when the database gets destroyed\n */\nexport function onDestroy(db) {\n  var has = LEADER_ELECTORS_OF_DB.get(db);\n  if (has) {\n    has.die();\n  }\n}\nexport var rxdb = true;\nexport var prototypes = {\n  RxDatabase: proto => {\n    proto.leaderElector = getForDatabase;\n    proto.isLeader = isLeader;\n    proto.waitForLeadership = waitForLeadership;\n  }\n};\nexport var RxDBLeaderElectionPlugin = {\n  name: 'leader-election',\n  rxdb,\n  prototypes,\n  hooks: {\n    preDestroyRxDatabase: {\n      after: onDestroy\n    }\n  }\n};\n"],"mappings":"AAAA;AACA;AACA;;AAEA,SAASA,oBAAoB,QAAQ,mBAAmB;AACxD,SAASC,4BAA4B,EAAEC,+BAA+B,QAAQ,gCAAgC;AAC9G,SAASC,oBAAoB,EAAEC,kBAAkB,QAAQ,UAAU;AACnE,IAAIC,qBAAqB,GAAG,IAAIC,OAAO,CAAC,CAAC;AACzC,IAAIC,mCAAmC,GAAG,IAAID,OAAO,CAAC,CAAC;;AAEvD;AACA;AACA;AACA;AACA,OAAO,SAASE,kCAAkCA,CAACC,gBAAgB,EAAE;EACnE,OAAOL,kBAAkB,CAACG,mCAAmC,EAAEE,gBAAgB,EAAE,MAAMT,oBAAoB,CAACS,gBAAgB,CAAC,CAAC;AAChI;;AAEA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAAA,EAAG;EAC/B,IAAID,gBAAgB,GAAGR,4BAA4B,CAAC,IAAI,CAACU,KAAK,EAAE,IAAI,CAACC,IAAI,EAAE,IAAI,CAAC;;EAEhF;AACF;AACA;EACE,IAAIC,UAAU,GAAG,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,IAAI,CAAC;EACxC,IAAI,CAACD,OAAO,GAAG,YAAY;IACzBZ,+BAA+B,CAAC,IAAI,CAACS,KAAK,EAAE,IAAI,CAAC;IACjD,OAAOE,UAAU,CAAC,CAAC;EACrB,CAAC;EACD,IAAIG,OAAO,GAAGR,kCAAkC,CAACC,gBAAgB,CAAC;EAClE,IAAI,CAACO,OAAO,EAAE;IACZA,OAAO,GAAGR,kCAAkC,CAACC,gBAAgB,CAAC;IAC9DJ,qBAAqB,CAACY,GAAG,CAAC,IAAI,EAAED,OAAO,CAAC;EAC1C;;EAEA;AACF;AACA;EACE,IAAI,CAACE,aAAa,GAAG,MAAMF,OAAO;EAClC,OAAOA,OAAO;AAChB;AACA,OAAO,SAASG,QAAQA,CAAA,EAAG;EACzB,IAAI,CAAC,IAAI,CAACC,aAAa,EAAE;IACvB,OAAO,IAAI;EACb;EACA,OAAO,IAAI,CAACF,aAAa,CAAC,CAAC,CAACC,QAAQ;AACtC;AACA,OAAO,SAASE,iBAAiBA,CAAA,EAAG;EAClC,IAAI,CAAC,IAAI,CAACD,aAAa,EAAE;IACvB,OAAOjB,oBAAoB;EAC7B,CAAC,MAAM;IACL,OAAO,IAAI,CAACe,aAAa,CAAC,CAAC,CAACI,eAAe,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM,IAAI,CAAC;EAChE;AACF;;AAEA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAACC,EAAE,EAAE;EAC5B,IAAIC,GAAG,GAAGrB,qBAAqB,CAACsB,GAAG,CAACF,EAAE,CAAC;EACvC,IAAIC,GAAG,EAAE;IACPA,GAAG,CAACE,GAAG,CAAC,CAAC;EACX;AACF;AACA,OAAO,IAAIC,IAAI,GAAG,IAAI;AACtB,OAAO,IAAIC,UAAU,GAAG;EACtBC,UAAU,EAAEC,KAAK,IAAI;IACnBA,KAAK,CAACd,aAAa,GAAGR,cAAc;IACpCsB,KAAK,CAACb,QAAQ,GAAGA,QAAQ;IACzBa,KAAK,CAACX,iBAAiB,GAAGA,iBAAiB;EAC7C;AACF,CAAC;AACD,OAAO,IAAIY,wBAAwB,GAAG;EACpCrB,IAAI,EAAE,iBAAiB;EACvBiB,IAAI;EACJC,UAAU;EACVI,KAAK,EAAE;IACLC,oBAAoB,EAAE;MACpBC,KAAK,EAAEZ;IACT;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}