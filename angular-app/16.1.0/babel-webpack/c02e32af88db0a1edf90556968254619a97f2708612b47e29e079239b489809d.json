{"ast":null,"code":"import _asyncToGenerator from \"/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { InjectionToken } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./local-storage\";\nimport * as i2 from \"./offline-service\";\nexport const APP_STORAGE = new InjectionToken('APP_STORAGE');\nexport const IDENTITY_TABLE = 'identity';\nexport const NUGGET_TABLE = 'nugget';\nclass SyncService {\n  constructor(localstorageService, onlineOfflineService) {\n    this.localstorageService = localstorageService;\n    this.registerToEvents(onlineOfflineService);\n    this.online = onlineOfflineService.isOnline;\n  }\n  registerToEvents(onlineOfflineService) {\n    onlineOfflineService.connectionChanged.subscribe(online => {\n      if (online) {\n        console.log('went online');\n        console.log('sending all stored items');\n        this.online = true;\n      } else {\n        console.log('went offline, storing in indexdb');\n        this.online = false;\n      }\n    });\n  }\n  execute(online, offline, table, body) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.online) {\n        return online(table, body);\n        // return await this.localstorageService.post(table, body)\n      } else {\n        return yield offline.call(table, body);\n      }\n    })();\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  post(table, path, body) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      yield _this2.execute(_this2.localstorageService.post, _this2.localstorageService.post, table, body);\n      // this.localstorageService.post(table, body)\n    })();\n  }\n\n  get(table, path, id) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (_this3.online) {\n        return _this3.localstorageService.get(table, id);\n      } else {\n        return _this3.localstorageService.get(table, id);\n      }\n    })();\n  }\n  get$(table) {\n    if (this.online) {\n      return this.localstorageService.get$(table);\n    } else {\n      return this.localstorageService.get$(table);\n    }\n  }\n  getCollection(table) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      return _this4.localstorageService.getCollection(table);\n    })();\n  }\n}\nSyncService.ɵfac = function SyncService_Factory(t) {\n  return new (t || SyncService)(i0.ɵɵinject(i1.LocalStorageService), i0.ɵɵinject(i2.OnlineOfflineService));\n};\nSyncService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SyncService,\n  factory: SyncService.ɵfac,\n  providedIn: 'root'\n});\nexport { SyncService };","map":{"version":3,"names":["InjectionToken","APP_STORAGE","IDENTITY_TABLE","NUGGET_TABLE","SyncService","constructor","localstorageService","onlineOfflineService","registerToEvents","online","isOnline","connectionChanged","subscribe","console","log","execute","offline","table","body","_this","_asyncToGenerator","call","post","path","_this2","get","id","_this3","get$","getCollection","_this4","i0","ɵɵinject","i1","LocalStorageService","i2","OnlineOfflineService","factory","ɵfac","providedIn"],"sources":["/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/src/app/data/sync-service.ts"],"sourcesContent":["import { Injectable, InjectionToken } from '@angular/core';\nimport { LocalStorageService } from './local-storage';\nimport { Observable } from 'rxjs';\nimport { OnlineOfflineService } from './offline-service';\n\nexport const APP_STORAGE = new InjectionToken<any>('APP_STORAGE');\nexport const IDENTITY_TABLE = 'identity';\nexport const NUGGET_TABLE = 'nugget';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SyncService {\n\n  private online:boolean;\n\n  constructor(private localstorageService: LocalStorageService, onlineOfflineService: OnlineOfflineService) {\n    this.registerToEvents(onlineOfflineService);\n    this.online = onlineOfflineService.isOnline;\n  }\n\n  private registerToEvents(onlineOfflineService: OnlineOfflineService) {\n    onlineOfflineService.connectionChanged.subscribe(online => {\n      if (online) {\n        console.log('went online');\n        console.log('sending all stored items');\n        this.online = true;\n      } else {\n        console.log('went offline, storing in indexdb');\n        this.online = false;\n      }\n    });\n  }\n\n  async execute(online: (table: string, body: any) => void, offline: (table: string, body: any) => void, table: string, body: any): Promise<void> {\n    if (this.online) {\n      return online(table, body)\n      // return await this.localstorageService.post(table, body)\n    } else {\n      return await offline.call(table, body)\n    }\n  }\n\n\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n\n  async post(table: string, path: string, body: any): Promise<void> {\n    await this.execute(this.localstorageService.post, this.localstorageService.post, table, body)\n    // this.localstorageService.post(table, body)\n  }\n\n  async get(table: string, path: string, id: string): Promise<any> {\n    if (this.online) {\n      return this.localstorageService.get(table, id)\n    } else {\n      return this.localstorageService.get(table, id)\n    }\n  }\n\n  get$(table: string): Observable<any> {\n    if (this.online) {\n      return this.localstorageService.get$(table);\n    } else {\n      return this.localstorageService.get$(table);\n    }\n  }\n\n  async getCollection(table: string): Promise<any> {\n    return this.localstorageService.getCollection(table);\n  }\n\n}"],"mappings":";AAAA,SAAqBA,cAAc,QAAQ,eAAe;;;;AAK1D,OAAO,MAAMC,WAAW,GAAG,IAAID,cAAc,CAAM,aAAa,CAAC;AACjE,OAAO,MAAME,cAAc,GAAG,UAAU;AACxC,OAAO,MAAMC,YAAY,GAAG,QAAQ;AAEpC,MAGaC,WAAW;EAItBC,YAAoBC,mBAAwC,EAAEC,oBAA0C;IAApF,KAAAD,mBAAmB,GAAnBA,mBAAmB;IACrC,IAAI,CAACE,gBAAgB,CAACD,oBAAoB,CAAC;IAC3C,IAAI,CAACE,MAAM,GAAGF,oBAAoB,CAACG,QAAQ;EAC7C;EAEQF,gBAAgBA,CAACD,oBAA0C;IACjEA,oBAAoB,CAACI,iBAAiB,CAACC,SAAS,CAACH,MAAM,IAAG;MACxD,IAAIA,MAAM,EAAE;QACVI,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;QAC1BD,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;QACvC,IAAI,CAACL,MAAM,GAAG,IAAI;OACnB,MAAM;QACLI,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;QAC/C,IAAI,CAACL,MAAM,GAAG,KAAK;;IAEvB,CAAC,CAAC;EACJ;EAEMM,OAAOA,CAACN,MAA0C,EAAEO,OAA2C,EAAEC,KAAa,EAAEC,IAAS;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAC7H,IAAID,KAAI,CAACV,MAAM,EAAE;QACf,OAAOA,MAAM,CAACQ,KAAK,EAAEC,IAAI,CAAC;QAC1B;OACD,MAAM;QACL,aAAaF,OAAO,CAACK,IAAI,CAACJ,KAAK,EAAEC,IAAI,CAAC;;IACvC;EACH;EAGA;EACA;EACA;EAEMI,IAAIA,CAACL,KAAa,EAAEM,IAAY,EAAEL,IAAS;IAAA,IAAAM,MAAA;IAAA,OAAAJ,iBAAA;MAC/C,MAAMI,MAAI,CAACT,OAAO,CAACS,MAAI,CAAClB,mBAAmB,CAACgB,IAAI,EAAEE,MAAI,CAAClB,mBAAmB,CAACgB,IAAI,EAAEL,KAAK,EAAEC,IAAI,CAAC;MAC7F;IAAA;EACF;;EAEMO,GAAGA,CAACR,KAAa,EAAEM,IAAY,EAAEG,EAAU;IAAA,IAAAC,MAAA;IAAA,OAAAP,iBAAA;MAC/C,IAAIO,MAAI,CAAClB,MAAM,EAAE;QACf,OAAOkB,MAAI,CAACrB,mBAAmB,CAACmB,GAAG,CAACR,KAAK,EAAES,EAAE,CAAC;OAC/C,MAAM;QACL,OAAOC,MAAI,CAACrB,mBAAmB,CAACmB,GAAG,CAACR,KAAK,EAAES,EAAE,CAAC;;IAC/C;EACH;EAEAE,IAAIA,CAACX,KAAa;IAChB,IAAI,IAAI,CAACR,MAAM,EAAE;MACf,OAAO,IAAI,CAACH,mBAAmB,CAACsB,IAAI,CAACX,KAAK,CAAC;KAC5C,MAAM;MACL,OAAO,IAAI,CAACX,mBAAmB,CAACsB,IAAI,CAACX,KAAK,CAAC;;EAE/C;EAEMY,aAAaA,CAACZ,KAAa;IAAA,IAAAa,MAAA;IAAA,OAAAV,iBAAA;MAC/B,OAAOU,MAAI,CAACxB,mBAAmB,CAACuB,aAAa,CAACZ,KAAK,CAAC;IAAC;EACvD;;AA3DWb,WAAW,C;mBAAXA,WAAW,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,mBAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,oBAAA;AAAA;AAAXhC,WAAW,C;SAAXA,WAAW;EAAAiC,OAAA,EAAXjC,WAAW,CAAAkC,IAAA;EAAAC,UAAA,EAFV;AAAM;SAEPnC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}