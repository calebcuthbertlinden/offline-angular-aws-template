{"ast":null,"code":"import { newRxError, newRxTypeError } from '../../rx-error';\nimport { RxStorageDexieStatics } from '../storage-dexie';\nimport { deepEqual } from '../utils';\n\n/**\n * accidentally passing a non-valid object into the query params\n * is very hard to debug especially when queries are observed\n * This is why we do some checks here in dev-mode\n */\nexport function checkQuery(args) {\n  var isPlainObject = Object.prototype.toString.call(args.queryObj) === '[object Object]';\n  if (!isPlainObject) {\n    throw newRxTypeError('QU11', {\n      op: args.op,\n      collection: args.collection.name,\n      queryObj: args.queryObj\n    });\n  }\n  var validKeys = ['selector', 'limit', 'skip', 'sort', 'index'];\n  Object.keys(args.queryObj).forEach(key => {\n    if (!validKeys.includes(key)) {\n      throw newRxTypeError('QU11', {\n        op: args.op,\n        collection: args.collection.name,\n        queryObj: args.queryObj,\n        key,\n        args: {\n          validKeys\n        }\n      });\n    }\n  });\n\n  // do not allow skip or limit for count queries\n  if (args.op === 'count' && (args.queryObj.limit || args.queryObj.skip)) {\n    throw newRxError('QU15', {\n      collection: args.collection.name,\n      query: args.queryObj\n    });\n  }\n}\nexport function checkMangoQuery(args) {\n  var schema = args.rxQuery.collection.schema.jsonSchema;\n\n  /**\n   * Ensure that all top level fields are included in the schema.\n   * TODO this check can be augmented to also check sub-fields.\n   */\n  var massagedSelector = args.mangoQuery.selector;\n  var schemaTopLevelFields = Object.keys(schema.properties);\n  Object.keys(massagedSelector)\n  // do not check operators\n  .filter(fieldOrOperator => !fieldOrOperator.startsWith('$'))\n  // skip this check on non-top-level fields\n  .filter(field => !field.includes('.')).forEach(field => {\n    if (!schemaTopLevelFields.includes(field)) {\n      throw newRxError('QU13', {\n        schema,\n        field,\n        query: args.mangoQuery\n      });\n    }\n  });\n\n  /**\n   * ensure if custom index is set,\n   * it is also defined in the schema\n   */\n  var schemaIndexes = schema.indexes ? schema.indexes : [];\n  var index = args.mangoQuery.index;\n  if (index) {\n    var isInSchema = schemaIndexes.find(schemaIndex => deepEqual(schemaIndex, index));\n    if (!isInSchema) {\n      throw newRxError('QU12', {\n        collection: args.rxQuery.collection.name,\n        query: args.mangoQuery,\n        schema\n      });\n    }\n  }\n\n  /**\n   * Ensure that a count() query can only be used\n   * with selectors that are fully satisfied by the used index.\n   */\n  if (args.rxQuery.op === 'count') {\n    if (!areSelectorsSatisfiedByIndex(args.rxQuery.collection.schema.jsonSchema, args.mangoQuery) && !args.rxQuery.collection.database.allowSlowCount) {\n      throw newRxError('QU14', {\n        collection: args.rxQuery.collection,\n        query: args.mangoQuery\n      });\n    }\n  }\n\n  /**\n   * Ensure that sort only runs on known fields\n   * TODO also check nested fields\n   */\n  if (args.mangoQuery.sort) {\n    args.mangoQuery.sort.map(sortPart => Object.keys(sortPart)[0]).filter(field => !field.includes('.')).forEach(field => {\n      if (!schemaTopLevelFields.includes(field)) {\n        throw newRxError('QU13', {\n          schema,\n          field,\n          query: args.mangoQuery\n        });\n      }\n    });\n  }\n}\nexport function areSelectorsSatisfiedByIndex(schema, query) {\n  var preparedQuery = RxStorageDexieStatics.prepareQuery(schema, query);\n  return preparedQuery.queryPlan.selectorSatisfiedByIndex;\n}","map":{"version":3,"names":["newRxError","newRxTypeError","RxStorageDexieStatics","deepEqual","checkQuery","args","isPlainObject","Object","prototype","toString","call","queryObj","op","collection","name","validKeys","keys","forEach","key","includes","limit","skip","query","checkMangoQuery","schema","rxQuery","jsonSchema","massagedSelector","mangoQuery","selector","schemaTopLevelFields","properties","filter","fieldOrOperator","startsWith","field","schemaIndexes","indexes","index","isInSchema","find","schemaIndex","areSelectorsSatisfiedByIndex","database","allowSlowCount","sort","map","sortPart","preparedQuery","prepareQuery","queryPlan","selectorSatisfiedByIndex"],"sources":["/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/node_modules/rxdb/dist/es/plugins/dev-mode/check-query.js"],"sourcesContent":["import { newRxError, newRxTypeError } from '../../rx-error';\nimport { RxStorageDexieStatics } from '../storage-dexie';\nimport { deepEqual } from '../utils';\n\n/**\n * accidentally passing a non-valid object into the query params\n * is very hard to debug especially when queries are observed\n * This is why we do some checks here in dev-mode\n */\nexport function checkQuery(args) {\n  var isPlainObject = Object.prototype.toString.call(args.queryObj) === '[object Object]';\n  if (!isPlainObject) {\n    throw newRxTypeError('QU11', {\n      op: args.op,\n      collection: args.collection.name,\n      queryObj: args.queryObj\n    });\n  }\n  var validKeys = ['selector', 'limit', 'skip', 'sort', 'index'];\n  Object.keys(args.queryObj).forEach(key => {\n    if (!validKeys.includes(key)) {\n      throw newRxTypeError('QU11', {\n        op: args.op,\n        collection: args.collection.name,\n        queryObj: args.queryObj,\n        key,\n        args: {\n          validKeys\n        }\n      });\n    }\n  });\n\n  // do not allow skip or limit for count queries\n  if (args.op === 'count' && (args.queryObj.limit || args.queryObj.skip)) {\n    throw newRxError('QU15', {\n      collection: args.collection.name,\n      query: args.queryObj\n    });\n  }\n}\nexport function checkMangoQuery(args) {\n  var schema = args.rxQuery.collection.schema.jsonSchema;\n\n  /**\n   * Ensure that all top level fields are included in the schema.\n   * TODO this check can be augmented to also check sub-fields.\n   */\n  var massagedSelector = args.mangoQuery.selector;\n  var schemaTopLevelFields = Object.keys(schema.properties);\n  Object.keys(massagedSelector)\n  // do not check operators\n  .filter(fieldOrOperator => !fieldOrOperator.startsWith('$'))\n  // skip this check on non-top-level fields\n  .filter(field => !field.includes('.')).forEach(field => {\n    if (!schemaTopLevelFields.includes(field)) {\n      throw newRxError('QU13', {\n        schema,\n        field,\n        query: args.mangoQuery\n      });\n    }\n  });\n\n  /**\n   * ensure if custom index is set,\n   * it is also defined in the schema\n   */\n  var schemaIndexes = schema.indexes ? schema.indexes : [];\n  var index = args.mangoQuery.index;\n  if (index) {\n    var isInSchema = schemaIndexes.find(schemaIndex => deepEqual(schemaIndex, index));\n    if (!isInSchema) {\n      throw newRxError('QU12', {\n        collection: args.rxQuery.collection.name,\n        query: args.mangoQuery,\n        schema\n      });\n    }\n  }\n\n  /**\n   * Ensure that a count() query can only be used\n   * with selectors that are fully satisfied by the used index.\n   */\n  if (args.rxQuery.op === 'count') {\n    if (!areSelectorsSatisfiedByIndex(args.rxQuery.collection.schema.jsonSchema, args.mangoQuery) && !args.rxQuery.collection.database.allowSlowCount) {\n      throw newRxError('QU14', {\n        collection: args.rxQuery.collection,\n        query: args.mangoQuery\n      });\n    }\n  }\n\n  /**\n   * Ensure that sort only runs on known fields\n   * TODO also check nested fields\n   */\n  if (args.mangoQuery.sort) {\n    args.mangoQuery.sort.map(sortPart => Object.keys(sortPart)[0]).filter(field => !field.includes('.')).forEach(field => {\n      if (!schemaTopLevelFields.includes(field)) {\n        throw newRxError('QU13', {\n          schema,\n          field,\n          query: args.mangoQuery\n        });\n      }\n    });\n  }\n}\nexport function areSelectorsSatisfiedByIndex(schema, query) {\n  var preparedQuery = RxStorageDexieStatics.prepareQuery(schema, query);\n  return preparedQuery.queryPlan.selectorSatisfiedByIndex;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}