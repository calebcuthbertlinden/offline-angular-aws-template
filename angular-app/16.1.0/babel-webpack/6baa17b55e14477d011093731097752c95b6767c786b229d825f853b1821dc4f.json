{"ast":null,"code":"import { newRxTypeError, newRxError } from '../../rx-error';\nimport { getPreviousVersions } from '../../rx-schema';\n\n/**\n * checks if the migrationStrategies are ok, throws if not\n * @throws {Error|TypeError} if not ok\n */\nexport function checkMigrationStrategies(schema, migrationStrategies) {\n  // migrationStrategies must be object not array\n  if (typeof migrationStrategies !== 'object' || Array.isArray(migrationStrategies)) {\n    throw newRxTypeError('COL11', {\n      schema\n    });\n  }\n  var previousVersions = getPreviousVersions(schema);\n\n  // for every previousVersion there must be strategy\n  if (previousVersions.length !== Object.keys(migrationStrategies).length) {\n    throw newRxError('COL12', {\n      have: Object.keys(migrationStrategies),\n      should: previousVersions\n    });\n  }\n\n  // every strategy must have number as property and be a function\n  previousVersions.map(vNr => ({\n    v: vNr,\n    s: migrationStrategies[vNr + 1]\n  })).filter(strategy => typeof strategy.s !== 'function').forEach(strategy => {\n    throw newRxTypeError('COL13', {\n      version: strategy.v,\n      type: typeof strategy,\n      schema\n    });\n  });\n  return true;\n}","map":{"version":3,"names":["newRxTypeError","newRxError","getPreviousVersions","checkMigrationStrategies","schema","migrationStrategies","Array","isArray","previousVersions","length","Object","keys","have","should","map","vNr","v","s","filter","strategy","forEach","version","type"],"sources":["/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/node_modules/rxdb/dist/es/plugins/dev-mode/check-migration-strategies.js"],"sourcesContent":["import { newRxTypeError, newRxError } from '../../rx-error';\nimport { getPreviousVersions } from '../../rx-schema';\n\n/**\n * checks if the migrationStrategies are ok, throws if not\n * @throws {Error|TypeError} if not ok\n */\nexport function checkMigrationStrategies(schema, migrationStrategies) {\n  // migrationStrategies must be object not array\n  if (typeof migrationStrategies !== 'object' || Array.isArray(migrationStrategies)) {\n    throw newRxTypeError('COL11', {\n      schema\n    });\n  }\n  var previousVersions = getPreviousVersions(schema);\n\n  // for every previousVersion there must be strategy\n  if (previousVersions.length !== Object.keys(migrationStrategies).length) {\n    throw newRxError('COL12', {\n      have: Object.keys(migrationStrategies),\n      should: previousVersions\n    });\n  }\n\n  // every strategy must have number as property and be a function\n  previousVersions.map(vNr => ({\n    v: vNr,\n    s: migrationStrategies[vNr + 1]\n  })).filter(strategy => typeof strategy.s !== 'function').forEach(strategy => {\n    throw newRxTypeError('COL13', {\n      version: strategy.v,\n      type: typeof strategy,\n      schema\n    });\n  });\n  return true;\n}\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,UAAU,QAAQ,gBAAgB;AAC3D,SAASC,mBAAmB,QAAQ,iBAAiB;;AAErD;AACA;AACA;AACA;AACA,OAAO,SAASC,wBAAwBA,CAACC,MAAM,EAAEC,mBAAmB,EAAE;EACpE;EACA,IAAI,OAAOA,mBAAmB,KAAK,QAAQ,IAAIC,KAAK,CAACC,OAAO,CAACF,mBAAmB,CAAC,EAAE;IACjF,MAAML,cAAc,CAAC,OAAO,EAAE;MAC5BI;IACF,CAAC,CAAC;EACJ;EACA,IAAII,gBAAgB,GAAGN,mBAAmB,CAACE,MAAM,CAAC;;EAElD;EACA,IAAII,gBAAgB,CAACC,MAAM,KAAKC,MAAM,CAACC,IAAI,CAACN,mBAAmB,CAAC,CAACI,MAAM,EAAE;IACvE,MAAMR,UAAU,CAAC,OAAO,EAAE;MACxBW,IAAI,EAAEF,MAAM,CAACC,IAAI,CAACN,mBAAmB,CAAC;MACtCQ,MAAM,EAAEL;IACV,CAAC,CAAC;EACJ;;EAEA;EACAA,gBAAgB,CAACM,GAAG,CAACC,GAAG,KAAK;IAC3BC,CAAC,EAAED,GAAG;IACNE,CAAC,EAAEZ,mBAAmB,CAACU,GAAG,GAAG,CAAC;EAChC,CAAC,CAAC,CAAC,CAACG,MAAM,CAACC,QAAQ,IAAI,OAAOA,QAAQ,CAACF,CAAC,KAAK,UAAU,CAAC,CAACG,OAAO,CAACD,QAAQ,IAAI;IAC3E,MAAMnB,cAAc,CAAC,OAAO,EAAE;MAC5BqB,OAAO,EAAEF,QAAQ,CAACH,CAAC;MACnBM,IAAI,EAAE,OAAOH,QAAQ;MACrBf;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EACF,OAAO,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}