{"ast":null,"code":"import _asyncToGenerator from \"/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { InjectionToken } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./local-storage/local-storage\";\nimport * as i2 from \"./offline-service\";\nexport const APP_STORAGE = new InjectionToken('APP_STORAGE');\nexport const IDENTITY_TABLE = 'identity';\nexport const NUGGET_TABLE = 'nugget';\nclass SyncService {\n  constructor(localstorageService, onlineOfflineService) {\n    this.localstorageService = localstorageService;\n    this.registerToEvents(onlineOfflineService);\n    this.online = onlineOfflineService.isOnline;\n  }\n  registerToEvents(onlineOfflineService) {\n    onlineOfflineService.connectionChanged.subscribe(online => {\n      if (online) {\n        console.log('went online');\n        this.online = true;\n        // this.localstorageService.sync(NUGGET_TABLE)\n        // this.localstorageService.sync(IDENTITY_TABLE)\n      } else {\n        console.log('went offline, storing in indexdb');\n        this.online = false;\n      }\n    });\n  }\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n  post(table, path, body) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.online) {\n        _this.localstorageService.post(table, body);\n        _this.localstorageService.syncPush(table);\n        return true;\n      } else {\n        yield _this.localstorageService.post(table, body);\n        return true;\n      }\n    })();\n  }\n  get(table, path, id) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (_this2.online) {\n        const minTimestamp = 0;\n        const response = yield fetch(`https://brwpjqq55e.execute-api.eu-west-1.amazonaws.com/prod/v1/sync?minUpdatedAt=${minTimestamp}&collection=${table}`);\n        const documentsFromRemote = yield response.json();\n        // Update local storage\n        for (const doc in documentsFromRemote) {\n          yield _this2.localstorageService.post(table, documentsFromRemote[doc]);\n        }\n        // Return latest\n        return _this2.localstorageService.get(table, id);\n      } else {\n        return _this2.localstorageService.get(table, id);\n      }\n    })();\n  }\n  get$(table) {\n    if (this.online) {\n      // TODO api call\n      return this.localstorageService.get$(table);\n    } else {\n      return this.localstorageService.get$(table);\n    }\n  }\n  getCollection(table) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      return _this3.localstorageService.getCollection(table);\n    })();\n  }\n}\nSyncService.ɵfac = function SyncService_Factory(t) {\n  return new (t || SyncService)(i0.ɵɵinject(i1.LocalStorageService), i0.ɵɵinject(i2.OnlineOfflineService));\n};\nSyncService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SyncService,\n  factory: SyncService.ɵfac,\n  providedIn: 'root'\n});\nexport { SyncService };","map":{"version":3,"names":["InjectionToken","APP_STORAGE","IDENTITY_TABLE","NUGGET_TABLE","SyncService","constructor","localstorageService","onlineOfflineService","registerToEvents","online","isOnline","connectionChanged","subscribe","console","log","post","table","path","body","_this","_asyncToGenerator","syncPush","get","id","_this2","minTimestamp","response","fetch","documentsFromRemote","json","doc","get$","getCollection","_this3","i0","ɵɵinject","i1","LocalStorageService","i2","OnlineOfflineService","factory","ɵfac","providedIn"],"sources":["/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/src/app/repository/sync-service.ts"],"sourcesContent":["import { Injectable, InjectionToken } from '@angular/core';\nimport { LocalStorageService } from './local-storage/local-storage';\nimport { Observable } from 'rxjs';\nimport { OnlineOfflineService } from './offline-service';\n\nexport const APP_STORAGE = new InjectionToken<any>('APP_STORAGE');\nexport const IDENTITY_TABLE = 'identity';\nexport const NUGGET_TABLE = 'nugget';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SyncService {\n\n  private online:boolean;\n\n  constructor(private localstorageService: LocalStorageService, onlineOfflineService: OnlineOfflineService) {\n    this.registerToEvents(onlineOfflineService);\n    this.online = onlineOfflineService.isOnline;\n  }\n\n  private registerToEvents(onlineOfflineService: OnlineOfflineService) {\n    onlineOfflineService.connectionChanged.subscribe(online => {\n      if (online) {\n        console.log('went online');\n        this.online = true;\n        // this.localstorageService.sync(NUGGET_TABLE)\n        // this.localstorageService.sync(IDENTITY_TABLE)\n      } else {\n        console.log('went offline, storing in indexdb');\n        this.online = false;\n      }\n    });\n  }\n\n  // -----------------------------------------------------------------------------------------------------\n  // @ Public methods\n  // -----------------------------------------------------------------------------------------------------\n\n  async post(table: string, path: string, body: any): Promise<any> {\n    if (this.online) {\n      this.localstorageService.post(table, body)\n      this.localstorageService.syncPush(table)\n      return true\n    } else {\n      await this.localstorageService.post(table, body)\n      return true\n    }\n  }\n\n  async get(table: string, path: string, id: string): Promise<any> {\n    if (this.online) {\n      const minTimestamp = 0;\n      const response = await fetch(\n          `https://brwpjqq55e.execute-api.eu-west-1.amazonaws.com/prod/v1/sync?minUpdatedAt=${minTimestamp}&collection=${table}`\n      );\n      const documentsFromRemote = await response.json();\n\n      // Update local storage\n      for (const doc in documentsFromRemote) {\n        await this.localstorageService.post(table, documentsFromRemote[doc])\n      }\n\n      // Return latest\n      return this.localstorageService.get(table, id)\n    } else {\n      return this.localstorageService.get(table, id)\n    }\n  }\n\n  get$(table: string): Observable<any> {\n    if (this.online) {\n      // TODO api call\n      return this.localstorageService.get$(table);\n    } else {\n      return this.localstorageService.get$(table);\n    }\n  }\n\n  async getCollection(table: string): Promise<any> {\n    return this.localstorageService.getCollection(table);\n  }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}