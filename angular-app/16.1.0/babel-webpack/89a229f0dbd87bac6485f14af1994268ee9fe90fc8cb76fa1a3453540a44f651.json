{"ast":null,"code":"import { calculateActionName, runAction } from 'event-reduce-js';\nimport { rxChangeEventToEventReduceChangeEvent } from './rx-change-event';\nimport { arrayFilterNotEmpty, clone, ensureNotFalsy, getFromMapOrCreate } from './plugins/utils';\nimport { getQueryMatcher, getSortComparator, normalizeMangoQuery } from './rx-query-helper';\nexport function getSortFieldsOfQuery(primaryKey, query) {\n  if (!query.sort || query.sort.length === 0) {\n    return [primaryKey];\n  } else {\n    return query.sort.map(part => Object.keys(part)[0]);\n  }\n}\nexport var RXQUERY_QUERY_PARAMS_CACHE = new WeakMap();\nexport function getQueryParams(rxQuery) {\n  return getFromMapOrCreate(RXQUERY_QUERY_PARAMS_CACHE, rxQuery, () => {\n    var collection = rxQuery.collection;\n    var normalizedMangoQuery = normalizeMangoQuery(collection.storageInstance.schema, clone(rxQuery.mangoQuery));\n    var primaryKey = collection.schema.primaryPath;\n\n    /**\n     * Create a custom sort comparator\n     * that uses the hooks to ensure\n     * we send for example compressed documents to be sorted by compressed queries.\n     */\n    var sortComparator = getSortComparator(collection.schema.jsonSchema, normalizedMangoQuery);\n    var useSortComparator = (docA, docB) => {\n      var sortComparatorData = {\n        docA,\n        docB,\n        rxQuery\n      };\n      return sortComparator(sortComparatorData.docA, sortComparatorData.docB);\n    };\n\n    /**\n     * Create a custom query matcher\n     * that uses the hooks to ensure\n     * we send for example compressed documents to match compressed queries.\n     */\n    var queryMatcher = getQueryMatcher(collection.schema.jsonSchema, normalizedMangoQuery);\n    var useQueryMatcher = doc => {\n      var queryMatcherData = {\n        doc,\n        rxQuery\n      };\n      return queryMatcher(queryMatcherData.doc);\n    };\n    var ret = {\n      primaryKey: rxQuery.collection.schema.primaryPath,\n      skip: normalizedMangoQuery.skip,\n      limit: normalizedMangoQuery.limit,\n      sortFields: getSortFieldsOfQuery(primaryKey, normalizedMangoQuery),\n      sortComparator: useSortComparator,\n      queryMatcher: useQueryMatcher\n    };\n    return ret;\n  });\n}\nexport function calculateNewResults(rxQuery, rxChangeEvents) {\n  if (!rxQuery.collection.database.eventReduce) {\n    return {\n      runFullQueryAgain: true\n    };\n  }\n  var queryParams = getQueryParams(rxQuery);\n  var previousResults = ensureNotFalsy(rxQuery._result).docsData.slice(0);\n  var previousResultsMap = ensureNotFalsy(rxQuery._result).docsDataMap;\n  var changed = false;\n  var eventReduceEvents = rxChangeEvents.map(cE => rxChangeEventToEventReduceChangeEvent(cE)).filter(arrayFilterNotEmpty);\n  var foundNonOptimizeable = eventReduceEvents.find(eventReduceEvent => {\n    var stateResolveFunctionInput = {\n      queryParams,\n      changeEvent: eventReduceEvent,\n      previousResults,\n      keyDocumentMap: previousResultsMap\n    };\n    var actionName = calculateActionName(stateResolveFunctionInput);\n    if (actionName === 'runFullQueryAgain') {\n      return true;\n    } else if (actionName !== 'doNothing') {\n      changed = true;\n      runAction(actionName, queryParams, eventReduceEvent, previousResults, previousResultsMap);\n      return false;\n    }\n  });\n  if (foundNonOptimizeable) {\n    return {\n      runFullQueryAgain: true\n    };\n  } else {\n    return {\n      runFullQueryAgain: false,\n      changed,\n      newResults: previousResults\n    };\n  }\n}","map":{"version":3,"names":["calculateActionName","runAction","rxChangeEventToEventReduceChangeEvent","arrayFilterNotEmpty","clone","ensureNotFalsy","getFromMapOrCreate","getQueryMatcher","getSortComparator","normalizeMangoQuery","getSortFieldsOfQuery","primaryKey","query","sort","length","map","part","Object","keys","RXQUERY_QUERY_PARAMS_CACHE","WeakMap","getQueryParams","rxQuery","collection","normalizedMangoQuery","storageInstance","schema","mangoQuery","primaryPath","sortComparator","jsonSchema","useSortComparator","docA","docB","sortComparatorData","queryMatcher","useQueryMatcher","doc","queryMatcherData","ret","skip","limit","sortFields","calculateNewResults","rxChangeEvents","database","eventReduce","runFullQueryAgain","queryParams","previousResults","_result","docsData","slice","previousResultsMap","docsDataMap","changed","eventReduceEvents","cE","filter","foundNonOptimizeable","find","eventReduceEvent","stateResolveFunctionInput","changeEvent","keyDocumentMap","actionName","newResults"],"sources":["/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/node_modules/rxdb/dist/es/event-reduce.js"],"sourcesContent":["import { calculateActionName, runAction } from 'event-reduce-js';\nimport { rxChangeEventToEventReduceChangeEvent } from './rx-change-event';\nimport { arrayFilterNotEmpty, clone, ensureNotFalsy, getFromMapOrCreate } from './plugins/utils';\nimport { getQueryMatcher, getSortComparator, normalizeMangoQuery } from './rx-query-helper';\nexport function getSortFieldsOfQuery(primaryKey, query) {\n  if (!query.sort || query.sort.length === 0) {\n    return [primaryKey];\n  } else {\n    return query.sort.map(part => Object.keys(part)[0]);\n  }\n}\nexport var RXQUERY_QUERY_PARAMS_CACHE = new WeakMap();\nexport function getQueryParams(rxQuery) {\n  return getFromMapOrCreate(RXQUERY_QUERY_PARAMS_CACHE, rxQuery, () => {\n    var collection = rxQuery.collection;\n    var normalizedMangoQuery = normalizeMangoQuery(collection.storageInstance.schema, clone(rxQuery.mangoQuery));\n    var primaryKey = collection.schema.primaryPath;\n\n    /**\n     * Create a custom sort comparator\n     * that uses the hooks to ensure\n     * we send for example compressed documents to be sorted by compressed queries.\n     */\n    var sortComparator = getSortComparator(collection.schema.jsonSchema, normalizedMangoQuery);\n    var useSortComparator = (docA, docB) => {\n      var sortComparatorData = {\n        docA,\n        docB,\n        rxQuery\n      };\n      return sortComparator(sortComparatorData.docA, sortComparatorData.docB);\n    };\n\n    /**\n     * Create a custom query matcher\n     * that uses the hooks to ensure\n     * we send for example compressed documents to match compressed queries.\n     */\n    var queryMatcher = getQueryMatcher(collection.schema.jsonSchema, normalizedMangoQuery);\n    var useQueryMatcher = doc => {\n      var queryMatcherData = {\n        doc,\n        rxQuery\n      };\n      return queryMatcher(queryMatcherData.doc);\n    };\n    var ret = {\n      primaryKey: rxQuery.collection.schema.primaryPath,\n      skip: normalizedMangoQuery.skip,\n      limit: normalizedMangoQuery.limit,\n      sortFields: getSortFieldsOfQuery(primaryKey, normalizedMangoQuery),\n      sortComparator: useSortComparator,\n      queryMatcher: useQueryMatcher\n    };\n    return ret;\n  });\n}\nexport function calculateNewResults(rxQuery, rxChangeEvents) {\n  if (!rxQuery.collection.database.eventReduce) {\n    return {\n      runFullQueryAgain: true\n    };\n  }\n  var queryParams = getQueryParams(rxQuery);\n  var previousResults = ensureNotFalsy(rxQuery._result).docsData.slice(0);\n  var previousResultsMap = ensureNotFalsy(rxQuery._result).docsDataMap;\n  var changed = false;\n  var eventReduceEvents = rxChangeEvents.map(cE => rxChangeEventToEventReduceChangeEvent(cE)).filter(arrayFilterNotEmpty);\n  var foundNonOptimizeable = eventReduceEvents.find(eventReduceEvent => {\n    var stateResolveFunctionInput = {\n      queryParams,\n      changeEvent: eventReduceEvent,\n      previousResults,\n      keyDocumentMap: previousResultsMap\n    };\n    var actionName = calculateActionName(stateResolveFunctionInput);\n    if (actionName === 'runFullQueryAgain') {\n      return true;\n    } else if (actionName !== 'doNothing') {\n      changed = true;\n      runAction(actionName, queryParams, eventReduceEvent, previousResults, previousResultsMap);\n      return false;\n    }\n  });\n  if (foundNonOptimizeable) {\n    return {\n      runFullQueryAgain: true\n    };\n  } else {\n    return {\n      runFullQueryAgain: false,\n      changed,\n      newResults: previousResults\n    };\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}