{"ast":null,"code":"/*******************************************************************************\n ** this function will convert seconds into hours, minutes, and seconds in\n ** CMITimespan type format - HHHH:MM:SS.SS (Hours has a max of 4 digits &\n ** Min of 2 digits\n *******************************************************************************/\nconst convertTotalSeconds = totalSeconds => {\n  let sec = totalSeconds % 60;\n  totalSeconds -= sec;\n  const tmp = totalSeconds % 3600; // of seconds in the total # of minutes\n  totalSeconds -= tmp; // of seconds in the total # of hours\n  // convert seconds to conform to CMITimespan type (e.g. SS.00)\n  sec = Math.round(sec * 100) / 100;\n  let strSec = sec.toString();\n  let strWholeSec = strSec;\n  let strFractionSec = '';\n  if (strSec.indexOf('.') !== -1) {\n    strWholeSec = strSec.substring(0, strSec.indexOf('.'));\n    strFractionSec = strSec.substring(strSec.indexOf('.') + 1, strSec.length);\n  }\n  if (strWholeSec.length < 2) {\n    strWholeSec = '0' + strWholeSec;\n  }\n  strSec = strWholeSec;\n  if (strFractionSec.length) {\n    strSec = strSec + '.' + strFractionSec;\n  }\n  let hour;\n  let min;\n  if (totalSeconds % 3600 !== 0) {\n    hour = 0;\n  } else {\n    hour = totalSeconds / 3600;\n  }\n  if (tmp % 60 !== 0) {\n    min = 0;\n  } else {\n    min = tmp / 60;\n  }\n  const strHour = hour.toString().length < 2 ? `0${hour}` : hour;\n  const strMin = min.toString().length < 2 ? `0${min}` : min;\n  return `${strHour}:${strMin}:${strSec}`;\n};\nexport default convertTotalSeconds;","map":{"version":3,"names":["convertTotalSeconds","totalSeconds","sec","tmp","Math","round","strSec","toString","strWholeSec","strFractionSec","indexOf","substring","length","hour","min","strHour","strMin"],"sources":["/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/src/app/scorm/service/time-converter.ts"],"sourcesContent":["/*******************************************************************************\n ** this function will convert seconds into hours, minutes, and seconds in\n ** CMITimespan type format - HHHH:MM:SS.SS (Hours has a max of 4 digits &\n ** Min of 2 digits\n *******************************************************************************/\n const convertTotalSeconds = (totalSeconds:number): string => {\n  let sec = (totalSeconds % 60);\n\n  totalSeconds -= sec;\n  const tmp = (totalSeconds % 3600);  // of seconds in the total # of minutes\n  totalSeconds -= tmp;                // of seconds in the total # of hours\n\n  // convert seconds to conform to CMITimespan type (e.g. SS.00)\n  sec = Math.round(sec * 100) / 100;\n\n  let strSec = sec.toString();\n  let strWholeSec = strSec;\n  let strFractionSec = '';\n\n  if (strSec.indexOf('.') !== -1) {\n    strWholeSec = strSec.substring(0, strSec.indexOf('.'));\n    strFractionSec = strSec.substring(strSec.indexOf('.') + 1, strSec.length);\n  }\n\n  if (strWholeSec.length < 2) {\n    strWholeSec = '0' + strWholeSec;\n  }\n  strSec = strWholeSec;\n\n  if (strFractionSec.length) {\n    strSec = strSec + '.' + strFractionSec;\n  }\n\n  let hour: number;\n  let min: number;\n\n  if ((totalSeconds % 3600) !== 0) {\n    hour = 0;\n  } else {\n    hour = (totalSeconds / 3600);\n  }\n  if ((tmp % 60) !== 0) {\n    min = 0;\n  } else {\n    min = (tmp / 60);\n  }\n\n  const strHour = (hour.toString().length < 2) ? `0${hour}` : hour;\n  const strMin = (min.toString().length < 2) ? `0${min}` : min;\n\n  return `${strHour}:${strMin}:${strSec}`;\n};\n\nexport default convertTotalSeconds;\n"],"mappings":"AAAA;;;;;AAKC,MAAMA,mBAAmB,GAAIC,YAAmB,IAAY;EAC3D,IAAIC,GAAG,GAAID,YAAY,GAAG,EAAG;EAE7BA,YAAY,IAAIC,GAAG;EACnB,MAAMC,GAAG,GAAIF,YAAY,GAAG,IAAK,CAAC,CAAE;EACpCA,YAAY,IAAIE,GAAG,CAAC,CAAgB;EAEpC;EACAD,GAAG,GAAGE,IAAI,CAACC,KAAK,CAACH,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG;EAEjC,IAAII,MAAM,GAAGJ,GAAG,CAACK,QAAQ,EAAE;EAC3B,IAAIC,WAAW,GAAGF,MAAM;EACxB,IAAIG,cAAc,GAAG,EAAE;EAEvB,IAAIH,MAAM,CAACI,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;IAC9BF,WAAW,GAAGF,MAAM,CAACK,SAAS,CAAC,CAAC,EAAEL,MAAM,CAACI,OAAO,CAAC,GAAG,CAAC,CAAC;IACtDD,cAAc,GAAGH,MAAM,CAACK,SAAS,CAACL,MAAM,CAACI,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAEJ,MAAM,CAACM,MAAM,CAAC;;EAG3E,IAAIJ,WAAW,CAACI,MAAM,GAAG,CAAC,EAAE;IAC1BJ,WAAW,GAAG,GAAG,GAAGA,WAAW;;EAEjCF,MAAM,GAAGE,WAAW;EAEpB,IAAIC,cAAc,CAACG,MAAM,EAAE;IACzBN,MAAM,GAAGA,MAAM,GAAG,GAAG,GAAGG,cAAc;;EAGxC,IAAII,IAAY;EAChB,IAAIC,GAAW;EAEf,IAAKb,YAAY,GAAG,IAAI,KAAM,CAAC,EAAE;IAC/BY,IAAI,GAAG,CAAC;GACT,MAAM;IACLA,IAAI,GAAIZ,YAAY,GAAG,IAAK;;EAE9B,IAAKE,GAAG,GAAG,EAAE,KAAM,CAAC,EAAE;IACpBW,GAAG,GAAG,CAAC;GACR,MAAM;IACLA,GAAG,GAAIX,GAAG,GAAG,EAAG;;EAGlB,MAAMY,OAAO,GAAIF,IAAI,CAACN,QAAQ,EAAE,CAACK,MAAM,GAAG,CAAC,GAAI,IAAIC,IAAI,EAAE,GAAGA,IAAI;EAChE,MAAMG,MAAM,GAAIF,GAAG,CAACP,QAAQ,EAAE,CAACK,MAAM,GAAG,CAAC,GAAI,IAAIE,GAAG,EAAE,GAAGA,GAAG;EAE5D,OAAO,GAAGC,OAAO,IAAIC,MAAM,IAAIV,MAAM,EAAE;AACzC,CAAC;AAED,eAAeN,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}