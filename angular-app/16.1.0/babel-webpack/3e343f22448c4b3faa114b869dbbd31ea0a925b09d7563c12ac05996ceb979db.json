{"ast":null,"code":"/**\n * find an simliar node in a list of nodes\n * which is not exactly the same node\n * @hotpath\n */\nexport function findSimilarNode(own, others) {\n  const ownString = own.toString();\n  for (let i = 0; i < others.length; i++) {\n    const other = others[i];\n    if (own !== other && !other.deleted && own.isEqualToOtherNode(other, ownString)) {\n      return other;\n    }\n  }\n  return null;\n}","map":{"version":3,"names":["findSimilarNode","own","others","ownString","toString","i","length","other","deleted","isEqualToOtherNode"],"sources":["/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/node_modules/binary-decision-diagram/dist/es/find-similar-node.js"],"sourcesContent":["/**\n * find an simliar node in a list of nodes\n * which is not exactly the same node\n * @hotpath\n */\nexport function findSimilarNode(own, others) {\n    const ownString = own.toString();\n    for (let i = 0; i < others.length; i++) {\n        const other = others[i];\n        if (own !== other &&\n            !other.deleted &&\n            own.isEqualToOtherNode(other, ownString)) {\n            return other;\n        }\n    }\n    return null;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,eAAeA,CAACC,GAAG,EAAEC,MAAM,EAAE;EACzC,MAAMC,SAAS,GAAGF,GAAG,CAACG,QAAQ,CAAC,CAAC;EAChC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;IACpC,MAAME,KAAK,GAAGL,MAAM,CAACG,CAAC,CAAC;IACvB,IAAIJ,GAAG,KAAKM,KAAK,IACb,CAACA,KAAK,CAACC,OAAO,IACdP,GAAG,CAACQ,kBAAkB,CAACF,KAAK,EAAEJ,SAAS,CAAC,EAAE;MAC1C,OAAOI,KAAK;IAChB;EACJ;EACA,OAAO,IAAI;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}