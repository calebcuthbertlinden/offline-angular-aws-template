{"ast":null,"code":"import { booleanToBooleanString } from '../util';\nexport function resolveWithSimpleBdd(simpleBdd, fns, input) {\n  let currentNode = simpleBdd;\n  let currentLevel = simpleBdd.l;\n  while (true) {\n    const booleanResult = fns[currentLevel](input);\n    const branchKey = booleanToBooleanString(booleanResult);\n    currentNode = currentNode[branchKey];\n    if (typeof currentNode === 'number' || typeof currentNode === 'string') {\n      return currentNode;\n    } else {\n      currentLevel = currentNode.l;\n    }\n  }\n}","map":{"version":3,"names":["booleanToBooleanString","resolveWithSimpleBdd","simpleBdd","fns","input","currentNode","currentLevel","l","booleanResult","branchKey"],"sources":["/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/node_modules/binary-decision-diagram/dist/es/minimal-string/resolve-with-simple-bdd.js"],"sourcesContent":["import { booleanToBooleanString } from '../util';\nexport function resolveWithSimpleBdd(simpleBdd, fns, input) {\n    let currentNode = simpleBdd;\n    let currentLevel = simpleBdd.l;\n    while (true) {\n        const booleanResult = fns[currentLevel](input);\n        const branchKey = booleanToBooleanString(booleanResult);\n        currentNode = currentNode[branchKey];\n        if (typeof currentNode === 'number' || typeof currentNode === 'string') {\n            return currentNode;\n        }\n        else {\n            currentLevel = currentNode.l;\n        }\n    }\n}\n"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,SAAS;AAChD,OAAO,SAASC,oBAAoBA,CAACC,SAAS,EAAEC,GAAG,EAAEC,KAAK,EAAE;EACxD,IAAIC,WAAW,GAAGH,SAAS;EAC3B,IAAII,YAAY,GAAGJ,SAAS,CAACK,CAAC;EAC9B,OAAO,IAAI,EAAE;IACT,MAAMC,aAAa,GAAGL,GAAG,CAACG,YAAY,CAAC,CAACF,KAAK,CAAC;IAC9C,MAAMK,SAAS,GAAGT,sBAAsB,CAACQ,aAAa,CAAC;IACvDH,WAAW,GAAGA,WAAW,CAACI,SAAS,CAAC;IACpC,IAAI,OAAOJ,WAAW,KAAK,QAAQ,IAAI,OAAOA,WAAW,KAAK,QAAQ,EAAE;MACpE,OAAOA,WAAW;IACtB,CAAC,MACI;MACDC,YAAY,GAAGD,WAAW,CAACE,CAAC;IAChC;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}