{"ast":null,"code":"import _defineProperty from \"/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { getOperator, initOptions, OperatorType } from \"./core\";\nimport { Cursor } from \"./cursor\";\nimport { assert, inArray, isObject, isOperator, normalize } from \"./util\";\n/**\n * An object used to filter input documents\n *\n * @param {Object} criteria The criteria for constructing predicates\n * @param {Options} options Options for use by operators\n * @constructor\n */\nexport class Query {\n  constructor(criteria, options) {\n    _defineProperty(this, \"criteria\", void 0);\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"compiled\", void 0);\n    this.criteria = criteria;\n    this.options = options;\n    this.options = initOptions(options);\n    this.compiled = [];\n    this.compile();\n  }\n  compile() {\n    assert(isObject(this.criteria), \"query criteria must be an object\");\n    let whereOperator;\n    for (const [field, expr] of Object.entries(this.criteria)) {\n      if (\"$where\" === field) {\n        whereOperator = {\n          field: field,\n          expr: expr\n        };\n      } else if (inArray([\"$and\", \"$or\", \"$nor\", \"$expr\", \"$jsonSchema\"], field)) {\n        this.processOperator(field, field, expr);\n      } else {\n        // normalize expression\n        assert(!isOperator(field), `unknown top level operator: ${field}`);\n        for (const [operator, val] of Object.entries(normalize(expr))) {\n          this.processOperator(field, operator, val);\n        }\n      }\n      if (isObject(whereOperator)) {\n        this.processOperator(whereOperator.field, whereOperator.field, whereOperator.expr);\n      }\n    }\n  }\n  processOperator(field, operator, value) {\n    const call = getOperator(OperatorType.QUERY, operator);\n    assert(!!call, `unknown operator ${operator}`);\n    const fn = call(field, value, this.options);\n    this.compiled.push(fn);\n  }\n  /**\n   * Checks if the object passes the query criteria. Returns true if so, false otherwise.\n   *\n   * @param obj The object to test\n   * @returns {boolean} True or false\n   */\n  test(obj) {\n    for (let i = 0, len = this.compiled.length; i < len; i++) {\n      if (!this.compiled[i](obj)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Returns a cursor to select matching documents from the input source.\n   *\n   * @param source A source providing a sequence of documents\n   * @param projection An optional projection criteria\n   * @returns {Cursor} A Cursor for iterating over the results\n   */\n  find(collection, projection) {\n    return new Cursor(collection, x => this.test(x), projection || {}, this.options);\n  }\n  /**\n   * Remove matched documents from the collection returning the remainder\n   *\n   * @param collection An array of documents\n   * @returns {Array} A new array with matching elements removed\n   */\n  remove(collection) {\n    return collection.reduce((acc, obj) => {\n      if (!this.test(obj)) acc.push(obj);\n      return acc;\n    }, []);\n  }\n}","map":{"version":3,"names":["getOperator","initOptions","OperatorType","Cursor","assert","inArray","isObject","isOperator","normalize","Query","constructor","criteria","options","_defineProperty","compiled","compile","whereOperator","field","expr","Object","entries","processOperator","operator","val","value","call","QUERY","fn","push","test","obj","i","len","length","find","collection","projection","x","remove","reduce","acc"],"sources":["/Users/caleblinden/Documents/GitHub/mmf-poc/mmf-poc/node_modules/mingo/es/query.js"],"sourcesContent":["import { getOperator, initOptions, OperatorType } from \"./core\";\nimport { Cursor } from \"./cursor\";\nimport { assert, inArray, isObject, isOperator, normalize } from \"./util\";\n/**\n * An object used to filter input documents\n *\n * @param {Object} criteria The criteria for constructing predicates\n * @param {Options} options Options for use by operators\n * @constructor\n */\nexport class Query {\n    criteria;\n    options;\n    compiled;\n    constructor(criteria, options) {\n        this.criteria = criteria;\n        this.options = options;\n        this.options = initOptions(options);\n        this.compiled = [];\n        this.compile();\n    }\n    compile() {\n        assert(isObject(this.criteria), \"query criteria must be an object\");\n        let whereOperator;\n        for (const [field, expr] of Object.entries(this.criteria)) {\n            if (\"$where\" === field) {\n                whereOperator = { field: field, expr: expr };\n            }\n            else if (inArray([\"$and\", \"$or\", \"$nor\", \"$expr\", \"$jsonSchema\"], field)) {\n                this.processOperator(field, field, expr);\n            }\n            else {\n                // normalize expression\n                assert(!isOperator(field), `unknown top level operator: ${field}`);\n                for (const [operator, val] of Object.entries(normalize(expr))) {\n                    this.processOperator(field, operator, val);\n                }\n            }\n            if (isObject(whereOperator)) {\n                this.processOperator(whereOperator.field, whereOperator.field, whereOperator.expr);\n            }\n        }\n    }\n    processOperator(field, operator, value) {\n        const call = getOperator(OperatorType.QUERY, operator);\n        assert(!!call, `unknown operator ${operator}`);\n        const fn = call(field, value, this.options);\n        this.compiled.push(fn);\n    }\n    /**\n     * Checks if the object passes the query criteria. Returns true if so, false otherwise.\n     *\n     * @param obj The object to test\n     * @returns {boolean} True or false\n     */\n    test(obj) {\n        for (let i = 0, len = this.compiled.length; i < len; i++) {\n            if (!this.compiled[i](obj)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Returns a cursor to select matching documents from the input source.\n     *\n     * @param source A source providing a sequence of documents\n     * @param projection An optional projection criteria\n     * @returns {Cursor} A Cursor for iterating over the results\n     */\n    find(collection, projection) {\n        return new Cursor(collection, (x) => this.test(x), projection || {}, this.options);\n    }\n    /**\n     * Remove matched documents from the collection returning the remainder\n     *\n     * @param collection An array of documents\n     * @returns {Array} A new array with matching elements removed\n     */\n    remove(collection) {\n        return collection.reduce((acc, obj) => {\n            if (!this.test(obj))\n                acc.push(obj);\n            return acc;\n        }, []);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}